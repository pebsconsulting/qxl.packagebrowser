{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_qxl_taskmanager_v1_0_0/source/class/qxl/taskmanager/demo/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "application",
    "Standalone",
    "members",
    "main",
    "manager",
    "qxl",
    "taskmanager",
    "Manager",
    "container",
    "ui",
    "Composite",
    "layout",
    "VBox",
    "set",
    "width",
    "title",
    "basic",
    "Label",
    "rich",
    "libInfo",
    "$$environment",
    "sourcePath",
    "setValue",
    "name",
    "description",
    "homepage",
    "add",
    "managerUi",
    "demo",
    "height",
    "flex",
    "getRoot",
    "top",
    "left",
    "createTask",
    "duration",
    "showProgress",
    "task",
    "Task",
    "callback",
    "value",
    "setProgress",
    "Promise",
    "resolve",
    "interval",
    "Math",
    "round",
    "progress",
    "id",
    "setInterval",
    "clearInterval",
    "remove",
    "wait",
    "ms",
    "event",
    "Timer",
    "once",
    "j",
    "promises",
    "i",
    "random",
    "label",
    "push",
    "all",
    "Application"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxl.taskmanager\n\n   Copyright:\n     2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * This is the main application class of \"qxl.taskmanager\"\n */\nqx.Class.define(\"qxl.taskmanager.demo.Application\",\n{\n  extend : qx.application.Standalone,\n  members :\n  {\n    main : function()\n    {\n      // Call super class\n      this.base(arguments);\n\n      // Enable logging in debug variant\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        // support native logging capabilities, e.g. Firebug for Firefox\n        qx.log.appender.Native;\n        // support additional cross-browser console. Press F7 to toggle visibility\n        qx.log.appender.Console;\n      }\n\n      // create task manager\n      const manager = new qxl.taskmanager.Manager();\n\n      // create UI\n      const container = new qx.ui.container.Composite(new qx.ui.layout.VBox(5));\n      container.set({width:300});\n      let title = (new qx.ui.basic.Label()).set({rich:true});\n      let libInfo = qx.$$environment[\"qx.libraryInfoMap\"][\"qxl.taskmanager\"];\n      let sourcePath = \"tree/master/source/class/qxl/taskmanager/demo/\";\n      title.setValue(`<h1>${libInfo.name}</h1>\n        <p>${libInfo.description}</p>\n        <p>The source code of this demo can be found\n          <a target=\"_blank\" href=\"${libInfo.homepage}/${sourcePath}\">here.</a>\n        </p>`);\n      container.add(title);\n      const managerUi = (new qxl.taskmanager.demo.Manager(manager)).set({height: 500});\n      container.add(managerUi, {flex:1});\n      this.getRoot().add( container, {top: 50, left: 20});\n\n      /**\n       * Creates a fake task that last the given duration\n       * @param {String} name Name of the task, description in UI\n       * @param {Number} duration Duration of task in seconds\n       * @param {Boolean} showProgress Whether to show a progressbar (0-100)\n       * @return {Promise<void>}\n       */\n      function createTask(name, duration, showProgress=true) {\n        let task = new qxl.taskmanager.Task(name);\n        let callback = showProgress ? value => task.setProgress(value) : null;\n        manager.add(task);\n        return new Promise(resolve => {\n          let interval = Math.round(duration*1000)/100;\n          let progress = 0;\n          let id = setInterval(() => {\n            progress++;\n            if (typeof callback == \"function\") {\n              callback(progress)\n            }\n            if (progress === 100) {\n              clearInterval(id);\n              manager.remove(task);\n              resolve();\n            }\n          }, interval);\n        });\n      }\n\n      /**\n       * Waits the given duration\n       * @param {Number} ms Duration in milliseconds\n       * @return {Promise<unknown>}\n       */\n      function wait(ms) {\n        return new Promise(resolve => qx.event.Timer.once(resolve,null,ms));\n      }\n\n      // run some random \"tasks\"\n      (async ()=>{\n        for (let j=1; j<4; j++) {\n          let promises = [];\n          for (let i=1; i<=20; i++) {\n            let duration = Math.round(Math.random()*10);\n            let showProgress = (()=>{\n              switch(j) {\n                case 1: return true;\n                case 2: return false;\n                default: return Math.random()>0.5;\n              }\n            })();\n            let label = showProgress\n              ? `Progressing task #${i}, Duration: ${duration} seconds.`\n              : `Blocking Task #${i}, Duration: ${duration} seconds.`;\n            promises.push(createTask(label, duration, showProgress));\n            await wait(Math.round(Math.random()*1000));\n          }\n          await Promise.all(promises);\n          await wait(1000);\n        }\n      })();\n    }\n  }\n});\n"
  ]
}