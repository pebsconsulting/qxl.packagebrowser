{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_qxl_taskmanager_v1_0_0/source/class/qxl/taskmanager/Task.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "properties",
    "name",
    "check",
    "event",
    "active",
    "apply",
    "init",
    "status",
    "progress",
    "value",
    "Error",
    "nullable",
    "data",
    "events",
    "construct",
    "set",
    "members",
    "_applyActive",
    "setStatus",
    "_applyStatus",
    "setActive",
    "abort",
    "fireEvent",
    "done",
    "qxl",
    "taskmanager",
    "Task"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,sBAAhB,EAAuC;AACrCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADqB;AAErCC,IAAAA,UAAU,EAAE;AACV;AACJ;AACA;AACIC,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE,QADH;AAEJC,QAAAA,KAAK,EAAE;AAFH,OAJI;;AASV;AACJ;AACA;AACIC,MAAAA,MAAM,EAAE;AACNF,QAAAA,KAAK,EAAE,SADD;AAENG,QAAAA,KAAK,EAAE,cAFD;AAGNF,QAAAA,KAAK,EAAE,cAHD;AAING,QAAAA,IAAI,EAAE;AAJA,OAZE;;AAmBV;AACJ;AACA;AACIC,MAAAA,MAAM,EAAC;AACLL,QAAAA,KAAK,EAAE,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,EAAkC,MAAlC,CADF;AAELI,QAAAA,IAAI,EAAE,QAFD;AAGLD,QAAAA,KAAK,EAAE,cAHF;AAILF,QAAAA,KAAK,EAAE;AAJF,OAtBG;;AA6BV;AACJ;AACA;AACA;AACIK,MAAAA,QAAQ,EAAE;AACRN,QAAAA,KAAK,EAAE,eAAAO,KAAK,EAAI;AACd,cAAI,CAACA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,GAAtB,KAA8BA,KAAK,KAAK,IAA5C,EAAkD;AAChD,kBAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,iBAAO,IAAP;AACD,SANO;AAORC,QAAAA,QAAQ,EAAE,IAPF;AAQRR,QAAAA,KAAK,EAAE;AARC,OAjCA;;AA4CV;AACJ;AACA;AACIS,MAAAA,IAAI,EAAE;AACJN,QAAAA,IAAI,EAAE,IADF;AAEJK,QAAAA,QAAQ,EAAE;AAFN;AA/CI,KAFyB;AAuDrCE,IAAAA,MAAM,EAAE;AACN;AACJ;AACA;AACI,eAAU,qBAJJ;;AAMN;AACJ;AACA;AACI,cAAS;AATH,KAvD6B;;AAmErC;AACF;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAE,mBAASb,IAAT,EAA0B;AAAA,UAAXW,IAAW,uEAAN,IAAM;AACnC;AACA,WAAKG,GAAL,CAAS;AAACd,QAAAA,IAAI,EAAJA,IAAD;AAAOW,QAAAA,IAAI,EAAJA;AAAP,OAAT;AACD,KA3EoC;AA6ErCI,IAAAA,OAAO,EAAE;AACPC,MAAAA,YADO,wBACMR,KADN,EACa;AAClB,aAAKS,SAAL,CAAeT,KAAK,GAAG,QAAH,GAAa,UAAjC;AACD,OAHM;AAIPU,MAAAA,YAJO,wBAIMV,KAJN,EAIa;AAClB,aAAKW,SAAL,CAAeX,KAAK,KAAK,QAAzB;AACD,OANM;;AAQP;AACJ;AACA;AACA;AACA;AACA;AACIY,MAAAA,KAdO,mBAcC;AACN,aAAKC,SAAL,CAAe,SAAf;AACA,aAAKJ,SAAL,CAAe,SAAf;AACD,OAjBM;;AAmBP;AACJ;AACA;AACA;AACIK,MAAAA,IAvBO,kBAuBA;AACL,aAAKD,SAAL,CAAe,MAAf;AACA,aAAKJ,SAAL,CAAe,MAAf;AACD;AA1BM;AA7E4B,GAAvC;AAnBAM,EAAAA,GAAG,CAACC,WAAJ,CAAgBC,IAAhB,CAAqBhC,aAArB,GAAqCA,aAArC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxl.taskmanager\n\n   Copyright:\n     2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * An object representing a background task\n */\nqx.Class.define(\"qxl.taskmanager.Task\",{\n  extend: qx.core.Object,\n  properties: {\n    /**\n     * The name/description of the task\n     */\n    name: {\n      check: \"String\",\n      event: \"changeName\"\n    },\n\n    /**\n     * Whether the task is active or not\n     */\n    active: {\n      check: \"Boolean\",\n      apply: \"_applyActive\",\n      event: \"changeActive\",\n      init: true\n    },\n\n    /**\n     * The status of the task\n     */\n    status:{\n      check: [\"active\", \"inactive\", \"aborted\", \"done\"],\n      init: \"active\",\n      apply: \"_applyStatus\",\n      event: \"changeStatus\"\n    },\n\n    /**\n     * The progress of the task. Null if the progress cannot be\n     * determined.\n     */\n    progress: {\n      check: value => {\n        if ((value < 0 || value > 100) && value !== null) {\n          throw new Error(\"Value must be null or between 0 and 100\");\n        }\n        return true\n      },\n      nullable: true,\n      event: \"changeProgress\"\n    },\n\n    /**\n     * Arbitrary additional data\n     */\n    data: {\n      init: null,\n      nullable: true\n    }\n  },\n\n  events: {\n    /**\n     * Fired when the task is aborted by calling the {@link #abort} method.\n     */\n    \"abort\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired when the task is marked as done by calling the {@link #done} method.\n     */\n    \"done\" : \"qx.event.type.Event\",\n  },\n\n  /**\n   * Constructor\n   * @param {String} name\n   * @param {*?} data\n   */\n  construct: function(name, data=null) {\n    this.base(arguments);\n    this.set({name, data});\n  },\n\n  members: {\n    _applyActive(value) {\n      this.setStatus(value ? \"active\": \"inactive\");\n    },\n    _applyStatus(value) {\n      this.setActive(value === \"active\");\n    },\n\n    /**\n     * Fires the \"abort\" event on the instance and sets the status of the task\n     * to \"aborted\". Note that it is the responsibility of the application\n     * to listen to this event (or, alternatively, to the \"changeStatus\"\n     * event) and abort the \"real\" task that this instance represents.\n     */\n    abort() {\n      this.fireEvent(\"aborted\");\n      this.setStatus(\"aborted\");\n    },\n\n    /**\n     * Fires the \"done\" event on the instance and sets the status of the task\n     * to \"done\".\n     */\n    done() {\n      this.fireEvent(\"done\");\n      this.setStatus(\"done\");\n    }\n  }\n});\n"
  ]
}