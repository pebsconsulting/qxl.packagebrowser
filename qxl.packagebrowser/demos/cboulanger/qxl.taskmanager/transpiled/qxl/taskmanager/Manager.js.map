{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_qxl_taskmanager_v1_0_0/source/class/qxl/taskmanager/Manager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "events",
    "construct",
    "__tasks",
    "data",
    "Array",
    "__activeTasks",
    "members",
    "__busy",
    "__progress",
    "__setBusy",
    "value",
    "Boolean",
    "getLength",
    "fireDataEvent",
    "__setProgress",
    "num",
    "reduce",
    "acc",
    "item",
    "progress",
    "getProgress",
    "Math",
    "round",
    "add",
    "task",
    "Assert",
    "assertInstance",
    "qxl",
    "taskmanager",
    "Task",
    "includes",
    "Error",
    "getName",
    "addListener",
    "active",
    "push",
    "remove",
    "isActive",
    "getTasks",
    "getActiveTasks",
    "getBusy",
    "destruct",
    "_disposeObjects",
    "Manager"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qxl.taskmanager\n\n   Copyright:\n     2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * A manager for {@link qxl.taskmanager.Task} objects. You can bind to the\n * (virtual) `tasks` and `activeTasks` properties, which are {@link qx.data.Array}\n * objects. `tasks` contains all tasks, `activeTasks` only those of which the\n * `active` property is `true`. The manager also has the virtual properties\n * `busy` (Boolean) and `progress` (Number) that can be bound to other qooxdoo\n * objects. The manager is \"busy\" if there are active tasks, and has a \"progress\"\n * value if any of the active tasks have a progress value.\n */\nqx.Class.define(\"qxl.taskmanager.Manager\",{\n  extend: qx.core.Object,\n  events: {\n    /**\n     * Fired when a new task is added\n     */\n    \"taskAdded\": \"qx.event.type.Data\",\n\n    /**\n     * Fired when the overall progress of all active tasks changes\n     */\n    \"changeProgress\": \"qx.event.type.Data\",\n\n    /**\n     * Fired when the busy state of the manager changes\n     */\n    \"changeBusy\": \"qx.event.type.Data\"\n  },\n\n  /**\n   * Constructor\n   */\n  construct: function(){\n    this.base(arguments);\n    this.__tasks = new qx.data.Array();\n    this.__activeTasks = new qx.data.Array();\n  },\n\n  members: {\n    __busy: false,\n    __tasks: null,\n    __activeTasks: null,\n    __progress: null,\n\n    /**\n     * Sets the busy state and fires data event if appropriate\n     * @private\n     */\n    __setBusy() {\n      let value = Boolean(this.__activeTasks.getLength());\n      if (this.__busy !== value) {\n        this.fireDataEvent(\"changeBusy\", value, this.__busy);\n        this.__busy = value;\n      }\n    },\n\n    /**\n     * Sets the overall progress of all active tasks and fires data\n     * event if appropriate\n     * @private\n     */\n    __setProgress() {\n      let num = 0;\n      let value = this.__activeTasks.reduce((acc, item) => {\n        let progress = item.getProgress();\n        if ( progress !== null) {\n          num++;\n          return (acc || 0) + progress;\n        }\n        return acc;\n      }, null);\n      if (typeof value == \"number\") {\n        value = Math.round(value/num);\n      }\n      if (this.__progress !== value) {\n        this.fireDataEvent(\"changeProgress\", value, this.__progress);\n        this.__progress = value;\n      }\n    },\n\n    /**\n     * Adds a task\n     * @param {qxl.taskmanager.Task} task\n     * @return {qxl.taskmanager.Manager} Returns instance for chaining\n     */\n    add(task) {\n      qx.core.Assert.assertInstance(task, qxl.taskmanager.Task);\n      if (this.__tasks.includes(task)) {\n        throw new Error(\"Task has already been added:\" +  task.getName());\n      }\n      // active state of the task\n      task.addListener(\"changeActive\", active => {\n        if (active && !this.__activeTasks.includes(task)) {\n          this.__activeTasks.push(task);\n        } else if (!active && this.__activeTasks.includes(task)) {\n          this.__activeTasks.remove(task);\n        }\n        this.__setBusy();\n      });\n      task.addListener(\"changeProgress\", this.__setProgress, this);\n      this.__tasks.push(task);\n      if (task.isActive()) {\n        this.__activeTasks.push(task);\n      }\n      this.__setBusy();\n      this.__setProgress();\n      this.fireDataEvent(\"taskAdded\", task);\n      return this;\n    },\n\n    /**\n     * Removes a task\n     * @param {qxl.taskmanager.Task} task\n     * @return {qxl.taskmanager.Task} The removed task, for easy disposal\n     */\n    remove(task) {\n      qx.core.Assert.assertInstance(task, qxl.taskmanager.Task);\n      if (task.isActive()) {\n        this.__activeTasks.remove(task);\n      }\n      this.__tasks.remove(task);\n      this.__setBusy();\n      return task;\n    },\n\n    /**\n     * Getter for all tasks managed by this instance\n     * @return {qx.data.Array} A qx data array with instances of {@link qxl.taskmanager.Task}\n     */\n    getTasks() {\n      return this.__tasks;\n    },\n\n    /**\n     * Getter for all active tasks managed by this instance\n     * @return {qx.data.Array} A qx data array with instances of {@link qxl.taskmanager.Task}\n     */\n    getActiveTasks() {\n      return this.__activeTasks;\n    },\n\n    /**\n     * Getter for pseudo-property busy, returns true if there is any active task in the manager\n     * @return {Boolean}\n     */\n    getBusy() {\n      return this.__busy;\n    },\n\n    /**\n     * Getter for pseudo-property progress. Returns null if all of the active tasks progress\n     * is null. Computes the overall progress of all the non-null progress\n     * active tasks.\n     * @return {Number|null}\n     */\n    getProgress() {\n      return this.__progress;\n    }\n  },\n\n  /**\n   * Destructor\n   */\n  destruct: function () {\n    this._disposeObjects(\"__tasks\",\"__activeTasks\");\n  }\n});\n"
  ]
}