{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_eventrecorder_v0_18_0/source/class/qx/io/channel/Channel.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "CHANNEL_STATUS_OPEN",
    "CHANNEL_STATUS_CLOSED",
    "CHANNEL_STATUS_OFFLINE",
    "CHANNEL_STATUS_WAITING",
    "construct",
    "transport",
    "channelId",
    "Interface",
    "objectImplements",
    "io",
    "channel",
    "ITransport",
    "__transport",
    "__channelId",
    "addListener",
    "e",
    "message",
    "getData",
    "$$channelId",
    "$$channel",
    "fireDataEvent",
    "initStatus",
    "getStatus",
    "bind",
    "events",
    "properties",
    "status",
    "check",
    "Channel",
    "deferredInit",
    "event",
    "members",
    "getTransport",
    "getChannelId",
    "sendMessage",
    "messageObj"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,uBAAhB,EAAyC;AACvCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADuB;;AAGvC;AACF;AACA;AACEC,IAAAA,OAAO,EAAE;AACPC,MAAAA,mBAAmB,EAAE,MADd;AAEPC,MAAAA,qBAAqB,EAAE,QAFhB;AAGPC,MAAAA,sBAAsB,EAAE,SAHjB;AAIPC,MAAAA,sBAAsB,EAAE;AAJjB,KAN8B;;AAavC;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,SAAS,EAAE,mBAASC,SAAT,EAAoBC,SAApB,EAA+B;AACxC;AACAhB,MAAAA,EAAE,CAACiB,SAAH,CAAaC,gBAAb,CAA8BH,SAA9B,EAAyCf,EAAE,CAACmB,EAAH,CAAMC,OAAN,CAAcL,SAAd,CAAwBM,UAAjE;AACA,WAAKC,SAAL,GAAmBP,SAAnB;AACA,WAAKQ,SAAL,GAAmBP,SAAnB,CAJwC,CAMxC;;AACAD,MAAAA,SAAS,CAACS,WAAV,CAAsB,SAAtB,EAAiC,UAASC,CAAT,EAAY;AAC3C,YAAIC,OAAO,GAAGD,CAAC,CAACE,OAAF,EAAd;;AACA,YAAI,CAACD,OAAO,CAACE,WAAT,IAAwBF,OAAO,CAACE,WAAR,KAAwB,KAAKL,SAAzD,EAAsE;AACpEG,UAAAA,OAAO,CAACG,SAAR,GAAoB,IAApB;AACA,eAAKC,aAAL,CAAmB,SAAnB,EAA8BJ,OAA9B;AACD;AACF,OAND,EAMG,IANH,EAPwC,CAexC;;AACA,WAAKK,UAAL,CAAgBhB,SAAS,CAACiB,SAAV,EAAhB;AACAjB,MAAAA,SAAS,CAACkB,IAAV,CAAe,QAAf,EAAyB,IAAzB,EAA+B,QAA/B;AACD,KAtCsC;;AAwCvC;AACF;AACA;AACEC,IAAAA,MAAM,EAAE;AACN;AACJ;AACA;AACA;AACI,iBAAW;AALL,KA3C+B;AAmDvCC,IAAAA,UAAU,EAAE;AAEV;AACJ;AACA;AACIC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CACLrC,EAAE,CAACmB,EAAH,CAAMC,OAAN,CAAckB,OAAd,CAAsB5B,mBADjB,EAELV,EAAE,CAACmB,EAAH,CAAMC,OAAN,CAAckB,OAAd,CAAsB3B,qBAFjB,EAGLX,EAAE,CAACmB,EAAH,CAAMC,OAAN,CAAckB,OAAd,CAAsBzB,sBAHjB,EAILb,EAAE,CAACmB,EAAH,CAAMC,OAAN,CAAckB,OAAd,CAAsB1B,sBAJjB,CADD;AAON2B,QAAAA,YAAY,EAAE,IAPR;AAQNC,QAAAA,KAAK,EAAE;AARD;AALE,KAnD2B;AAoEvCC,IAAAA,OAAO,EAAE;AAEP;AACJ;AACA;AACA;AACInB,MAAAA,SAAW,EAAE,IANN;;AAQP;AACJ;AACA;AACIC,MAAAA,SAAW,EAAE,IAXN;;AAaP;AACJ;AACA;AACA;AACImB,MAAAA,YAAY,EAAE,wBAAW;AACvB,eAAO,KAAKpB,SAAZ;AACD,OAnBM;;AAqBP;AACJ;AACA;AACA;AACIqB,MAAAA,YAAY,EAAE,wBAAW;AACvB,eAAO,KAAKpB,SAAZ;AACD,OA3BM;;AA6BP;AACJ;AACA;AACA;AACIqB,MAAAA,WAAW,EAAE,qBAAUC,UAAV,EAAsB;AACjC,YAAI,KAAKtB,SAAT,EAAsB;AACpBsB,UAAAA,UAAU,CAACjB,WAAX,GAAyB,KAAKL,SAA9B;AACD;;AACD,aAAKD,SAAL,CAAiBsB,WAAjB,CAA6BC,UAA7B;AACD;AAtCM;AApE8B,GAAzC;AAJA7C,EAAAA,EAAE,CAACmB,EAAH,CAAMC,OAAN,CAAckB,OAAd,CAAsBnC,aAAtB,GAAsCA,aAAtC",
  "sourcesContent": [
    "/**\n * A channel is the connection between two objects living in different execution\n * context. It relies on a Transport object to pass messages between the i/o endpoints.\n */\nqx.Class.define(\"qx.io.channel.Channel\", {\n  extend: qx.core.Object,\n\n  /**\n   * Static constants\n   */\n  statics: {\n    CHANNEL_STATUS_OPEN: \"open\",\n    CHANNEL_STATUS_CLOSED: \"closed\",\n    CHANNEL_STATUS_OFFLINE: \"offline\",\n    CHANNEL_STATUS_WAITING: \"waiting\"\n  },\n\n  /**\n   * Constructor\n   * @param transport {qx.data.channel.transport.ITransport}\n   * @param channelId {String?}\n   *    The channel id is needed in situations where multiple channels share a\n   *    transport object.\n   */\n  construct: function(transport, channelId) {\n    this.base(arguments);\n    qx.Interface.objectImplements(transport, qx.io.channel.transport.ITransport);\n    this.__transport = transport;\n    this.__channelId = channelId;\n\n    // retransmit message, attaching channel information\n    transport.addListener(\"message\", function(e) {\n      var message = e.getData();\n      if (!message.$$channelId || message.$$channelId === this.__channelId) {\n        message.$$channel = this;\n        this.fireDataEvent(\"message\", message);\n      }\n    }, this);\n\n    // bind the status of the channel to the status of the transport\n    this.initStatus(transport.getStatus());\n    transport.bind(\"status\", this, \"status\");\n  },\n\n  /**\n   * Events\n   */\n  events: {\n    /**\n     * Whenever a channel endpoint sends a message into this channel,\n     * this event is fired with the message object as data.\n     */\n    \"message\" :\"qx.event.type.Data\"\n  },\n\n  properties: {\n\n    /**\n     * The status of the channel\n     */\n    status: {\n      check: [\n        qx.io.channel.Channel.CHANNEL_STATUS_OPEN,\n        qx.io.channel.Channel.CHANNEL_STATUS_CLOSED,\n        qx.io.channel.Channel.CHANNEL_STATUS_WAITING,\n        qx.io.channel.Channel.CHANNEL_STATUS_OFFLINE\n      ],\n      deferredInit: true,\n      event: \"changeStatus\"\n    }\n  },\n\n  members: {\n\n    /**\n     * The transport used\n     * @var {qx.io.channel.transport.ITransport}\n     */\n    __transport: null,\n\n    /**\n     * An identifier which needs to be unique in each of the endpoint contexts\n     */\n    __channelId: null,\n\n    /**\n     * Returns the transport object\n     * @return {qx.data.channel.transport.ITransport}\n     */\n    getTransport: function() {\n      return this.__transport;\n    },\n\n    /**\n     * Returns the channel id or null if none has been set\n     * @return {String|null}\n     */\n    getChannelId: function() {\n      return this.__channelId;\n    },\n\n    /**\n     * Send a message into the channel, using the selected transport\n     * @param messageObj {Object}\n     */\n    sendMessage: function (messageObj) {\n      if (this.__channelId) {\n        messageObj.$$channelId = this.__channelId;\n      }\n      this.__transport.sendMessage(messageObj);\n    }\n  }\n});\n"
  ]
}