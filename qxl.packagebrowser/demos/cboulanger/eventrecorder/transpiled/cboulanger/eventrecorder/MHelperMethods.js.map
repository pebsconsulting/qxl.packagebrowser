{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_eventrecorder_v0_18_0/source/class/cboulanger/eventrecorder/MHelperMethods.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "createQookeryComponent",
    "formUrl",
    "Promise",
    "resolve",
    "reject",
    "qookery",
    "contexts",
    "Qookery",
    "loadResource",
    "xmlSource",
    "xmlDocument",
    "xml",
    "Document",
    "fromString",
    "parser",
    "createFormParser",
    "formComponent",
    "parseXmlDocument",
    "e",
    "dispose",
    "getPlayerByType",
    "type",
    "Error",
    "__players",
    "Clazz",
    "cboulanger",
    "eventrecorder",
    "player",
    "lang",
    "String",
    "firstUp",
    "getApplicationParentDir",
    "uri",
    "util",
    "Uri",
    "parseUri",
    "location",
    "href",
    "protocol",
    "authority",
    "directory",
    "split",
    "slice",
    "join",
    "getRawGist",
    "gist_id",
    "url",
    "req",
    "io",
    "request",
    "Jsonp",
    "addListener",
    "response",
    "getResponse",
    "Type",
    "isObject",
    "data",
    "files",
    "JSON",
    "stringify",
    "filenames",
    "Object",
    "getOwnPropertyNames",
    "file",
    "filename",
    "endsWith",
    "script",
    "content",
    "getData",
    "send",
    "addGlobalEventListener",
    "fn",
    "evtMonitor",
    "event",
    "Manager",
    "getGlobalEventMonitor",
    "setGlobalEventMonitor",
    "target",
    "absoluteIdOf",
    "domNode",
    "id",
    "core",
    "Id",
    "getAbsoluteIdOf",
    "ui",
    "Widget",
    "getWidgetByElement",
    "getQxObject",
    "tokenize",
    "line",
    "Assert",
    "assertString",
    "tokens",
    "token",
    "prevChar",
    "insideQuotes",
    "char",
    "trim",
    "parse",
    "push",
    "length",
    "MHelperMethods"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n\n************************************************************************ */\n\n/**\n * An unsystematic collection of methods that are re-used in more than one class\n * The methods really need to be put into domain-specific mixins or static classes\n */\nqx.Mixin.define(\"cboulanger.eventrecorder.MHelperMethods\", {\n  members: {\n\n    async createQookeryComponent(formUrl) {\n      return new Promise((resolve, reject) => {\n        qookery.contexts.Qookery.loadResource(formUrl, this, xmlSource => {\n          const xmlDocument = qx.xml.Document.fromString(xmlSource);\n          const parser = qookery.Qookery.createFormParser();\n          try {\n            const formComponent = parser.parseXmlDocument(xmlDocument);\n            resolve(formComponent);\n          } catch (e) {\n            reject(e);\n          } finally {\n            parser.dispose();\n          }\n        });\n      });\n    },\n\n\n\n    /**\n     * Returns a player instance. Caches the result\n     * @param type\n     * @private\n     * @return {cboulanger.eventrecorder.IPlayer}\n     */\n    getPlayerByType(type) {\n      if (!type) {\n        throw new Error(\"No player type given!\");\n      }\n      if (!this.__players) {\n        this.__players = [];\n      }\n      if (this.__players[type]) {\n        return this.__players[type];\n      }\n      let Clazz = cboulanger.eventrecorder.player[qx.lang.String.firstUp(type)];\n      if (!Clazz) {\n        throw new Error(`A player of type '${type}' does not exist.`);\n      }\n      const player = new Clazz();\n      this.__players[type] = player;\n      return player;\n    },\n\n    getApplicationParentDir() {\n      let uri = qx.util.Uri.parseUri(location.href);\n      return `${uri.protocol}://${uri.authority}${uri.directory.split(\"/\").slice(0, -2).join(\"/\")}`;\n    },\n\n    /**\n     * Get the content of a gist by its id\n     * @param gist_id {String}\n     * @return {Promise<*>}\n     * @private\n     */\n    async getRawGist(gist_id) {\n      return new Promise((resolve, reject) => {\n        let url = `https://api.github.com/gists/${gist_id}`;\n        let req = new qx.io.request.Jsonp(url);\n        req.addListener(\"success\", e => {\n          let response = req.getResponse();\n          if (!qx.lang.Type.isObject(response.data.files)) {\n            reject(new Error(\"Unexpected response: \" + JSON.stringify(response)));\n          }\n          let filenames = Object.getOwnPropertyNames(response.data.files);\n          let file = response.data.files[filenames[0]];\n          if (!file.filename.endsWith(\".eventrecorder\")) {\n            reject(new Error(\"Gist is not an eventrecorder script\"));\n          }\n          let script = file.content;\n          resolve(script);\n        });\n        req.addListener(\"statusError\", e => reject(new Error(e.getData())));\n        req.send();\n      });\n    },\n\n    /**\n     * Add a function to the global event monitor.\n     * @param fn {Function}\n     */\n    addGlobalEventListener(fn) {\n      let evtMonitor = qx.event.Manager.getGlobalEventMonitor();\n      qx.event.Manager.setGlobalEventMonitor(evtMonitor ? ((target, event) => {\n        evtMonitor(target, event);\n        fn(target, event);\n      }) : fn);\n    },\n\n    /**\n     * Returns the absolute id of the owned object with that id\n     * @param domNode {Element}\n     * @param id {String}\n     * @returns {String}\n     */\n    absoluteIdOf: function (domNode, id) {\n      return qx.core.Id.getAbsoluteIdOf(qx.ui.core.Widget.getWidgetByElement(domNode).getQxObject(id));\n    },\n\n    /**\n     * Simple tokenizer which splits expressions separated by whitespace, but keeps\n     * expressions in quotes (which can contain whitespace) together. Parses tokens\n     * as JSON expressions, but accepts unquoted text as strings.\n     * @param line {String}\n     * @return {String[]}\n     * @private\n     */\n    tokenize(line) {\n      qx.core.Assert.assertString(line);\n      let tokens = [];\n      let token = \"\";\n      let prevChar = \"\";\n      let insideQuotes = false;\n      for (let char of line.trim().split(\"\")) {\n        switch (char) {\n          case \"\\\"\":\n            insideQuotes = !insideQuotes;\n            token += char;\n            break;\n          case \" \":\n            // add whitespace to token if inside quotes\n            if (insideQuotes) {\n              token += char;\n              break;\n            }\n            // when outside quotes, whitespace is end of token\n            if (prevChar !== \" \") {\n              // parse token as json expression or as a string if that fails\n              try {\n                token = JSON.parse(token);\n              } catch (e) {\n              }\n              tokens.push(token);\n              token = \"\";\n            }\n            break;\n          default:\n            token += char;\n        }\n        prevChar = char;\n      }\n      if (token.length) {\n        try {\n          token = JSON.parse(token);\n        } catch (e) {\n        }\n        tokens.push(token);\n      }\n      return tokens;\n    }\n  }\n});\n"
  ]
}