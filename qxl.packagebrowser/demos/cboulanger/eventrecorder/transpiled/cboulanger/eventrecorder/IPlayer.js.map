{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_eventrecorder_v0_18_0/source/class/cboulanger/eventrecorder/IPlayer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "events",
    "members",
    "getType",
    "start",
    "stop",
    "replay",
    "script",
    "translate",
    "getExportFileExtension",
    "cmd_import",
    "uri",
    "cmd_clear_imports",
    "cmd_assert_uri",
    "cmd_assert_match_uri",
    "uri_regexp",
    "cmd_config_set_mode",
    "mode",
    "cmd_await_all",
    "cmd_define",
    "macro_name",
    "cmd_end",
    "cmd_info",
    "text",
    "cmd_hide_info",
    "cmd_widget_info",
    "id",
    "cmd_await_property_value",
    "property",
    "value",
    "cmd_await_property_match_json",
    "json",
    "cmd_delay",
    "delayInMs",
    "cmd_wait",
    "timeInMs",
    "cmd_await_event",
    "type",
    "cmd_await_event_data",
    "data",
    "cmd_await_event_match_json",
    "cmd_assert_appeared",
    "cmd_assert_disappeared",
    "cmd_execute",
    "cmd_fire",
    "event",
    "cmd_tap",
    "cmd_dbltap",
    "cmd_set_value",
    "cmd_await_value",
    "cmd_open_tree_node",
    "nodeIndex",
    "cmd_close_tree_node",
    "cmd_open_tree_node_treevirtual",
    "cmd_close_tree_node_treevirtual",
    "cmd_set_selection",
    "selectedId",
    "cmd_await_selection",
    "cmd_set_model_selection",
    "indexArray",
    "cmd_set_selection_from_selectables",
    "index",
    "cmd_await_selection_from_selectables",
    "cmd_reset_selection",
    "cmd_set_table_selection",
    "interval",
    "cmd_set_row_selection",
    "rowIndex",
    "cboulanger",
    "eventrecorder",
    "IPlayer"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2019 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors:\n    Christian Boulanger (cboulanger) info@bibliograph.org\n\n************************************************************************ */\n\n/**\n * This interface defines the events and methods a player must implement\n */\nqx.Interface.define(\"cboulanger.eventrecorder.IPlayer\", {\n\n  /**\n   * Events that must be declared by this interface\n   */\n  events: {\n    /**\n     * Fired with each step of the replayed script. The event data is an array\n     * containing the number of the step and the number of steps\n     */\n    \"progress\" : \"qx.event.type.Data\"\n  },\n\n  /**\n   * Methonds that must be declared by this interface\n   */\n  members :\n  {\n    /**\n     * Returns the player type\n     * @return {String}\n     */\n    getType() {},\n\n    /**\n     * Starts the player\n     */\n    start() {},\n\n    /**\n     * Stops the recording.\n     */\n    stop() {},\n\n    /**\n     * Replays the given script of intermediate code\n     * @param script {String} The script to replay\n     * @return {Promise} Promise which resolves when the script has been replayed, or\n     * rejecdts with an error\n     */\n    async replay(script) {},\n\n    /**\n     * Translates the intermediate code into the target language\n     * @param script\n     * @return {string} Javasc\n     */\n    async translate(script) {},\n\n    /**\n     * Returns the file extension of the downloaded file in the target language\n     * @return {string}\n     */\n    getExportFileExtension() {},\n\n    /*\n    ============================================================================\n       COMMANDS\n    ============================================================================\n    */\n\n    /**\n     * Imports a remote file and caches it locally\n     * @param uri {String}\n     * @return {Promise<array>}\n     */\n    async cmd_import(uri) {},\n\n    /**\n     * Clears locally cached imported scripts in order to force-reload them\n     */\n    cmd_clear_imports() {},\n\n\n    /**\n     * Asserts that the current url matches the given value (RegExp)\n     * @param uri {String}\n     */\n    cmd_assert_uri(uri) {},\n\n    /**\n     * Asserts that the current url matches the given value (RegExp)\n     * @param uri_regexp {String} A string containing a regular expression\n     */\n    cmd_assert_match_uri(uri_regexp) {},\n\n    /**\n     * Sets the player mode\n     * @param mode\n     * @return {string}\n     */\n    cmd_config_set_mode(mode) {},\n\n    /**\n     * Starts a block of statements that return promises. The player will wait for\n     * all of the promises to resolve before proceeding.\n     */\n    cmd_await_all() {},\n\n    /**\n     * Starts the definition of a macro\n     * @param macro_name\n     * @return {null}\n     */\n    cmd_define(macro_name) {},\n\n    /**\n     * Ends the definition of a macro or a block of awaitable statements\n     * @return {null}\n     */\n    cmd_end() {},\n\n    /**\n     * Generates code that displays an informational text centered on the screen\n     * @param text {String} The text to display\n     * @return {String}\n     */\n    cmd_info(text) {},\n\n    /**\n     * Generates code that hides the info pane\n     * @return {String}\n     */\n    cmd_hide_info() {},\n\n    /**\n     * Generates code that displays an informational text placed next to the widget with the given id.\n     * @param id {String} The id of the widget\n     * @param text {String} The text to display\n     * @return {String}\n     */\n    cmd_widget_info(id, text) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the given\n     * property of the object with the given id is assigned the given value.\n     * This works also with properties without a change event because the\n     * value is periodically checked.\n     * @param id {String} The id of the object\n     * @param property {String} The name of the property\n     * @param value {*} The value, must be serializable to JSON\n     * @return {*|string}\n     */\n    cmd_await_property_value(id, property, value) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the following\n     * condition is met: the property with the given name of the object with the\n     * given id changes to a value that, if serialized to json, matches the given\n     * json literal. The json can contain regular expressions enclosed in\n     * <! and !> as placeholders (and validators) for unknown values\n     * (See {@link cboulanger.eventrecorder.player.Abstract#createRegexpForJsonComparison}\n     *\n     * @param id {String} The id of the object\n     * @param property {String} The name of the property\n     * @param json {String} A json expression\n     * @return {*|string}\n     */\n    cmd_await_property_match_json(id, property, json) {},\n\n    /**\n     * Generates code that causes the given delay (in milliseconds).\n     * The delay is capped by the {@link cboulanger.eventrecorder.player.Abstract#maxDelay} property\n     * and will only be caused in presentation mode\n     * @param delayInMs {Number}\n     * @return {string}\n     */\n    cmd_delay(delayInMs) {},\n\n    /**\n     * Generates code that waits the given time in milliseconds, regardless of player mode\n     * @param timeInMs {Number}\n     * @return {string}\n     */\n    cmd_wait(timeInMs) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name.\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @return {*|string}\n     */\n    cmd_await_event(id, type) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name.\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @param data {*} The data to expect. Must be serializable to JSON\n     * @return {*|string}\n     */\n    cmd_await_event_data(id, type, data) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the object with\n     * the given id fires an event with the given name with event data that\n     * matches, if serialized to JSON, the given json string, which can contain\n     * regular expressions embedded in <! and !>\n     * @param id {String} The id of the object\n     * @param type {String} The type of the event\n     * @param json {*} A JSON expression that can contain regular expressions\n     * embedded in <! and !>\n     * @return {*|string}\n     */\n    cmd_await_event_match_json(id, type, json) {},\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id becomes visible and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_appeared(id) {},\n\n    /**\n     * Generates code that returns a promise with resolves when the object with the given id disappears and rejects\n     * if the timeout is reached before that happens.\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_assert_disappeared(id) {},\n\n    /**\n     * Generates code that fires an `execute` event on the object with the given id (Button, Command)\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_execute(id) {},\n\n    /**\n     * Generates code that fires an event with the given payload on the object with the given id (Button, Command)\n     * @param id {String}\n     * @param event {String}\n     * @param json {*}\n     * @return {String}\n     */\n    cmd_fire(id, event, json) {}, /**\n                                   \n    /**\n                                   * Generates code that fires an `tap` event on the object with the given id (Button, Command)\n                                   * @param id {String}\n                                   * @return {String}\n                                   */\n    cmd_tap(id) {},\n\n    /**\n     * Generates code that fires an `dbltap` event on the object with the given id (Button, Command)\n     * @param id {String}\n     * @return {String}\n     */\n    cmd_dbltap(id) {},\n\n    /**\n     * Generates code that sets the `value` property of the object with the given id\n     * @param id {String}\n     * @param data {String} A JSON expression\n     * @return {string}\n     */\n    cmd_set_value(id, data) {},\n\n    /**\n     * Generates code that returns a promise which resolves when the value\n     * property of the object with the given id is assigned the given value.\n     * The value must be given in JSON format, i.e. strings must be quoted.\n     * @param id {String} The id of the object\n     * @param value {String} The value, must be serializable to JSON\n     * @return {*|string}\n     */\n    cmd_await_value(id, value) {},\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} The id of the {@link qx.ui.tree.VirtualTree}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node(id, nodeIndex) {},\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.tree.VirtualTree} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node(id, nodeIndex) {},\n\n    /**\n     * Generates code that opens a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_open_tree_node_treevirtual(id, nodeIndex) {},\n\n    /**\n     * Generates code that closes a the node with the given node id on the {@link qx.ui.treevirtual.TreeVirtual} with the given id\n     * @param id {String} Id of the {@link qx.ui.treevirtual.TreeVirtual}\n     * @param nodeIndex {String|Number} The index of the node in the tree data model\n     * @return {String}\n     */\n    cmd_close_tree_node_treevirtual(id, nodeIndex) {},\n\n    /**\n     * Generates code that sets a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected.\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that is selected. Only one widget can be selected at this time\n     * @return {String}\n     */\n    cmd_set_selection(id, selectedId) {},\n\n    /**\n     * Generates code that awaits a selection for all objects which have a `setSelection` method that\n     * takes an array of qooxdoo widgets that should be selected within the timeout\n     * @param id {String} Id of the object ón which the selection is set\n     * @param selectedId {String} The id of the widget that should be selected\n     * @return {String}\n     */\n    cmd_await_selection(id, selectedId) {},\n\n\n    /**\n     * Generates code that sets a selection for all (virtual) widgets that have a data model\n     * @param id {String} The id of the widget on which the selection is set\n     * @param indexArray {String} An array literal containing the indexes of the models\n     * @return {String}\n     */\n    cmd_set_model_selection(id, indexArray) {},\n\n    /**\n     * Generates code that sets a selection on widgets that have a `getSelectables()` method\n     * @param id {String} The id of the widget on which the selection is set\n     * @param index {String|Number} The index of the selection in the selectables\n     * @return {String}\n     */\n    cmd_set_selection_from_selectables(id, index) {},\n\n    /**\n     * Generates code that awaits a selection on widgets that have a `getSelectables()` method\n     * @param id {String} The id of the widget on which the selection is set\n     * @param index {String|Number} The index of the selection in the selectables\n     * @return {String}\n     */\n    cmd_await_selection_from_selectables(id, index) {},\n\n    /**\n     * Resets the selection of a widget that has a `selection` property or a `resetSelection` method.\n     * @param id {String} The id of the widget\n     * @return {string}\n     */\n    cmd_reset_selection(id) {},\n\n    /**\n     * Generates code that sets an selection interval on a {@link qx.ui.table.Table}\n     * @param id {String} The id of a {@link qx.ui.table.Table}\n     * @param interval {String} The first and the last row to be selected, separated by comma.\n     * @return {String}\n     */\n    cmd_set_table_selection(id, interval) {},\n\n    /**\n     * Generates code that set the selection on a {@link qx.ui.virtual.selection.Row} object\n     * @param id {String} The id of a qx.ui.virtual.selection.Row object\n     * @param rowIndex {String|Number} The index of the row to be selected\n     * @return {String}\n     */\n    cmd_set_row_selection(id, rowIndex) {}\n  }\n});\n"
  ]
}