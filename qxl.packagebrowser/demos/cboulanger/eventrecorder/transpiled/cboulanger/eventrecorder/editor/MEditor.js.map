{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_eventrecorder_v0_18_0/source/class/cboulanger/eventrecorder/editor/MEditor.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__players",
    "getEditorObject",
    "getQxObject",
    "translateTo",
    "playerType",
    "mode",
    "exporter",
    "getPlayerByType",
    "model",
    "getModel",
    "setMode",
    "editedScript",
    "getLeftEditorContent",
    "translatedText",
    "translate",
    "setRightEditorContent",
    "e",
    "error",
    "qxl",
    "dialog",
    "Dialog",
    "message",
    "exportTo",
    "translatedScript",
    "getRightEditorContent",
    "getScript",
    "event",
    "Timer",
    "once",
    "filename",
    "_getApplicationName",
    "_download",
    "getExportFileExtension",
    "_applyPlayerType",
    "old",
    "setPlayer",
    "_applyPlayer",
    "player",
    "removeAllBindings",
    "formModel",
    "console",
    "debug",
    "bind",
    "setTargetScriptType",
    "getType",
    "__initializedEditor",
    "_updateEditor",
    "setLeftEditorContent",
    "leftEditor",
    "getComponent",
    "getEditor",
    "resize",
    "getSession",
    "on",
    "getValue",
    "setScript",
    "_setupAutocomplete",
    "langTools",
    "ace",
    "require",
    "Error",
    "log",
    "tokens",
    "iface",
    "Interface",
    "getByName",
    "$$members",
    "key",
    "Object",
    "getOwnPropertyNames",
    "startsWith",
    "code",
    "toString",
    "params",
    "slice",
    "indexOf",
    "split",
    "map",
    "p",
    "trim",
    "caption",
    "substr",
    "replace",
    "snippet",
    "i",
    "join",
    "meta",
    "value",
    "push",
    "type",
    "id",
    "getObjectIds",
    "completer",
    "getCompletions",
    "editor",
    "session",
    "pos",
    "prefix",
    "callback",
    "length",
    "line",
    "getLine",
    "row",
    "column",
    "numberOfTokens",
    "tokenize",
    "options",
    "filter",
    "token",
    "toLocaleLowerCase",
    "score",
    "addCompleter",
    "cboulanger",
    "eventrecorder",
    "MEditor"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n\n************************************************************************ */\n\n\n/**\n * This mixin contains methods that are used by script editor widgets\n * @ignore(ace)\n */\nqx.Mixin.define(\"cboulanger.eventrecorder.editor.MEditor\", {\n\n  members: {\n\n    __players: null,\n\n    /**\n     * Returns the editor component\n     * @return {qookery.IFormComponent}\n     */\n    getEditorObject() {\n      return this.getQxObject(\"editor\");\n    },\n\n    /**\n     * Translates the text in the left editor into the language produced by the\n     * given player type. Alerts any errors that occur.\n     * @param playerType {String}\n     * @param mode {String}\n     * @return {String|false}\n     */\n    async translateTo(playerType, mode) {\n      const exporter = this.getPlayerByType(playerType);\n      const model = this.getQxObject(\"editor\").getModel();\n      if (mode) {\n        exporter.setMode(mode);\n      }\n      let editedScript = model.getLeftEditorContent();\n      try {\n        let translatedText = await exporter.translate(editedScript);\n        model.setRightEditorContent(translatedText);\n        return translatedText;\n      } catch (e) {\n        this.error(e);\n        qxl.dialog.Dialog.error(e.message);\n      }\n      return false;\n    },\n\n    /**\n     * Export the script in the given format\n     * @param playerType {String}\n     * @param mode {String}\n     * @return {Boolean}\n     */\n    async exportTo(playerType, mode) {\n      const exporter = this.getPlayerByType(playerType);\n      if (mode) {\n        exporter.setMode(mode);\n      }\n      let translatedScript = this.getQxObject(\"editor\").getModel().getRightEditorContent();\n      if (!translatedScript) {\n        if (!this.getScript()) {\n          qxl.dialog.Dialog.error(\"No script to export!\");\n          return false;\n        }\n        translatedScript = await this.translateTo(playerType);\n      }\n      qx.event.Timer.once(() => {\n        let filename = this._getApplicationName();\n        this._download(`${filename}.${exporter.getExportFileExtension()}`, translatedScript);\n      }, null, 0);\n      return true;\n    },\n\n    _applyPlayerType(playerType, old) {\n      if (old) {\n        old = this.getPlayerByType(old);\n      }\n      this.setPlayer(this.getPlayerByType(playerType));\n    },\n\n    _applyPlayer(player, old) {\n      if (old) {\n        old.removeAllBindings();\n        formModel.removeAllBindings();\n      }\n      if (!player) {\n        return;\n      }\n      if (!this.getEditorObject()) {\n        console.debug(\"Cannot apply player since editor is not ready...\");\n        // editor hasn't been loaded and rendered yet\n        return;\n      }\n      const formModel = this.getEditorObject().getModel();\n      formModel.bind(\"targetMode\", player, \"mode\");\n      player.bind(\"mode\", formModel, \"targetMode\");\n      formModel.setTargetScriptType(player.getType());\n    },\n\n    __initializedEditor: false,\n\n    _updateEditor() {\n      try {\n        this.getEditorObject().getModel().setLeftEditorContent(this.getScript());\n        const leftEditor = this.getEditorObject().getComponent(\"leftEditor\").getEditor();\n        leftEditor.resize();\n        // the following should not be necessary\n        if (!this.__initializedEditor) {\n          leftEditor.getSession().on(\"change\", () => {\n            if (leftEditor.getValue() !== this.getScript()) {\n              this.setScript(leftEditor.getValue());\n            }\n          });\n          this.__initializedEditor = true;\n        }\n      } catch (e) {\n        //console.warn(e.message);\n        console.debug(\"Waiting for ACE editor to become available...\");\n        qx.event.Timer.once(() => this._updateEditor(), this, 500);\n      }\n    },\n\n    /**\n     * Configures the autocomplete feature in the editor(s)\n     * @private\n     */\n    _setupAutocomplete() {\n      let langTools;\n      try {\n        langTools = ace.require(\"ace/ext/language_tools\");\n        if (!langTools) {\n          throw new Error(\"language_tools not available\");\n        }\n      } catch (e) {\n        console.log(\"Deferring setup of autocomplete...\");\n        qx.event.Timer.once(() => this._setupAutocomplete(), this, 1000);\n        return;\n      }\n      let tokens = [];\n      let iface = qx.Interface.getByName(\"cboulanger.eventrecorder.IPlayer\").$$members;\n      for (let key of Object.getOwnPropertyNames(iface)) {\n        if (key.startsWith(\"cmd_\") && typeof iface[key] == \"function\") {\n          let code = iface[key].toString();\n          let params = code.slice(code.indexOf(\"(\") + 1, code.indexOf(\")\")).split(/,/).map(p => p.trim());\n          let caption = key.substr(4).replace(/_/g, \"-\");\n          let snippet = caption + \" \" + params.map((p, i) => `\\${${i + 1}:${p}}`).join(\" \") + \"\\$0\";\n          let meta = params.join(\" \");\n          let value = null;\n          tokens.push({caption, type: \"command\", snippet, meta, value});\n        }\n      }\n      for (let id of this.getObjectIds()) {\n        tokens.push({caption: id, type: \"id\", value: id});\n      }\n      const completer = {\n        getCompletions:  (editor, session, pos, prefix, callback) => {\n          if (prefix.length === 0) {\n            callback(null, []);\n            return;\n          }\n          let line = editor.session.getLine(pos.row).substr(0, pos.column);\n          let numberOfTokens = this.tokenize(line).length;\n          let options = tokens\n          // filter on positional argument\n            .filter(token => (token.type === \"command\" && numberOfTokens === 1) || (token.type === \"id\" && numberOfTokens === 2))\n            // filter on word match\n            .filter(token => token.caption.toLocaleLowerCase().substr(0, prefix.length) === prefix.toLocaleLowerCase())\n            // create popup data\n            .map(token => {\n              token.score = 100 - (token.caption.length - prefix.length);\n              return token;\n            });\n          callback(null, options);\n        }\n      };\n      langTools.addCompleter(completer);\n    }\n  }\n});\n"
  ]
}