{
  "className": "cboulanger.eventrecorder.Recorder",
  "packageName": "cboulanger.eventrecorder",
  "name": "Recorder",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [
    "cboulanger.eventrecorder.MHelperMethods",
    "cboulanger.eventrecorder.MState"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 20,
        "column": 0
      },
      "end": {
        "line": 361,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The base class of all recorder types</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.bom.Element"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 30,
        "column": 14
      },
      "end": {
        "line": 52,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Constructor</p>"
        }
      ]
    }
  },
  "properties": {
    "mode": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The recorder mode, can be \"overwrite\" or \"append\"</p>"
          }
        ]
      },
      "name": "mode",
      "propertyType": "new",
      "nullable": false,
      "init": "overwrite",
      "allowNull": false,
      "possibleValues": [
        "overwrite",
        "append"
      ],
      "defaultValue": "overwrite"
    },
    "logEvents": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to output additional event data to the console</p>"
          }
        ]
      },
      "name": "logEvents",
      "propertyType": "new",
      "nullable": false,
      "init": false,
      "allowNull": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "running": {
      "type": "property",
      "name": "running",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MState",
      "event": "changeRunning",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the recorder/player is recording/playing</p>"
          }
        ]
      }
    },
    "paused": {
      "type": "property",
      "name": "paused",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MState",
      "event": "changePaused",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the recorder/player is put in paused mode</p>"
          }
        ]
      }
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__lines": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 80,
          "column": 17
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__excludeIds": {
      "location": {
        "start": {
          "line": 81,
          "column": 4
        },
        "end": {
          "line": 81,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastEventTimestamp": {
      "location": {
        "start": {
          "line": 82,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__latInput": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 83,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "excludeIds": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Exclude the given id(s) from recording</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ids {Array|String}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getExcludedIds": {
      "location": {
        "start": {
          "line": 111,
          "column": 4
        },
        "end": {
          "line": 113,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list of excluded ids.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]}",
            "type": "String[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getObjectIds": {
      "location": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return an array of object ids that have been assigned in the current application</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{[]}",
            "type": "[]",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScript": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the recorded script</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setScript": {
      "location": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the script to which the recorder should append new events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "script {String}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "beforeStart": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 191,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called by start()</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "recordEvent": {
      "location": {
        "start": {
          "line": 202,
          "column": 4
        },
        "end": {
          "line": 210,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called by the global event listener</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String}"
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event}"
          },
          {
            "name": "@param",
            "body": "target {qx.bom.Element}"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{boolean} returns true if the event was recorded, false if\n it was ignored because of the list of excluded ids.",
            "type": "boolean",
            "description": " returns true if the event was recorded, false if\n it was ignored because of the list of excluded ids."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "afterStop": {
      "location": {
        "start": {
          "line": 215,
          "column": 4
        },
        "end": {
          "line": 217,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executed after stop()</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createIntermediateCodeFromEvent": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Given an object id, the event name and the even target, return one or more\n pieces of intermediate code from which a player can replay the user action\n that lead to this event. Return an array, each element is one line of code</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the qooxdoo object",
            "paramName": "id",
            "description": " The id of the qooxdoo object",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "event {qx.event.Event} The event that was fired",
            "paramName": "event",
            "description": " The event that was fired",
            "type": "qx.event.Event"
          },
          {
            "name": "@param",
            "body": "target {qx.bom.Element|qx.core.Object} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": [
              "qx.bom.Element",
              "qx.core.Object"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} An array of script lines",
            "type": "String[]",
            "description": " An array of script lines"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createQookeryComponent": {
      "type": "function",
      "name": "createQookeryComponent",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MHelperMethods"
    },
    "getPlayerByType": {
      "type": "function",
      "name": "getPlayerByType",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MHelperMethods",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a player instance. Caches the result</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type",
            "paramName": "type",
            "type": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{cboulanger.eventrecorder.IPlayer}",
            "type": "cboulanger.eventrecorder.IPlayer",
            "description": ""
          }
        ]
      }
    },
    "getApplicationParentDir": {
      "type": "function",
      "name": "getApplicationParentDir",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MHelperMethods"
    },
    "getRawGist": {
      "type": "function",
      "name": "getRawGist",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MHelperMethods",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the content of a gist by its id</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "gist_id {String}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<*>}",
            "type": "Promise<*>",
            "description": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      }
    },
    "addGlobalEventListener": {
      "type": "function",
      "name": "addGlobalEventListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MHelperMethods",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a function to the global event monitor.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fn {Function}"
          }
        ]
      }
    },
    "absoluteIdOf": {
      "type": "function",
      "name": "absoluteIdOf",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MHelperMethods",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the absolute id of the owned object with that id</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domNode {Element}"
          },
          {
            "name": "@param",
            "body": "id {String}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ]
      }
    },
    "tokenize": {
      "type": "function",
      "name": "tokenize",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MHelperMethods",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Simple tokenizer which splits expressions separated by whitespace, but keeps\n expressions in quotes (which can contain whitespace) together. Parses tokens\n as JSON expressions, but accepts unquoted text as strings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "line {String}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]}",
            "type": "String[]",
            "description": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      }
    },
    "start": {
      "type": "function",
      "name": "start",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MState",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Starts the recorder/player</p>"
          }
        ]
      }
    },
    "pause": {
      "type": "function",
      "name": "pause",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MState",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pauses the recorder/player</p>"
          }
        ]
      }
    },
    "resume": {
      "type": "function",
      "name": "resume",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MState",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resumes recording/playing.</p>"
          }
        ]
      }
    },
    "stop": {
      "type": "function",
      "name": "stop",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "cboulanger.eventrecorder.MState",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the recording.</p>"
          }
        ]
      }
    },
    "getRunning": {
      "type": "function",
      "name": "getRunning",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>running</code>.\n\nFor further details take a look at the property definition: {@link #running}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for running"
          }
        ]
      }
    },
    "isRunning": {
      "type": "function",
      "name": "isRunning",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>running</code>.\n\nFor further details take a look at the property definition: {@link #running}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for running"
          }
        ]
      }
    },
    "setRunning": {
      "type": "function",
      "name": "setRunning",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>running</code>.\n\nFor further details take a look at the property definition: {@link #running}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for running"
          }
        ]
      }
    },
    "resetRunning": {
      "type": "function",
      "name": "resetRunning",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>running</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #running}."
          }
        ]
      }
    },
    "getPaused": {
      "type": "function",
      "name": "getPaused",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paused</code>.\n\nFor further details take a look at the property definition: {@link #paused}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for paused"
          }
        ]
      }
    },
    "isPaused": {
      "type": "function",
      "name": "isPaused",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paused</code>.\n\nFor further details take a look at the property definition: {@link #paused}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for paused"
          }
        ]
      }
    },
    "setPaused": {
      "type": "function",
      "name": "setPaused",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paused</code>.\n\nFor further details take a look at the property definition: {@link #paused}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for paused"
          }
        ]
      }
    },
    "resetPaused": {
      "type": "function",
      "name": "resetPaused",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paused</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paused}."
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getMode": {
      "type": "function",
      "name": "getMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>mode</code>.\n\nFor further details take a look at the property definition: {@link #mode}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for mode"
          }
        ]
      }
    },
    "setMode": {
      "type": "function",
      "name": "setMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>mode</code>.\n\nFor further details take a look at the property definition: {@link #mode}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for mode"
          }
        ]
      }
    },
    "resetMode": {
      "type": "function",
      "name": "resetMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>mode</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #mode}."
          }
        ]
      }
    },
    "getLogEvents": {
      "type": "function",
      "name": "getLogEvents",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>logEvents</code>.\n\nFor further details take a look at the property definition: {@link #logEvents}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for logEvents"
          }
        ]
      }
    },
    "isLogEvents": {
      "type": "function",
      "name": "isLogEvents",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>logEvents</code>.\n\nFor further details take a look at the property definition: {@link #logEvents}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for logEvents"
          }
        ]
      }
    },
    "setLogEvents": {
      "type": "function",
      "name": "setLogEvents",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>logEvents</code>.\n\nFor further details take a look at the property definition: {@link #logEvents}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for logEvents"
          }
        ]
      }
    },
    "resetLogEvents": {
      "type": "function",
      "name": "resetLogEvents",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>logEvents</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #logEvents}."
          }
        ]
      }
    }
  },
  "descendants": []
}