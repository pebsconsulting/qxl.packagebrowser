{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_eventrecorder_v0_18_0/source/class/cboulanger/eventrecorder/Recorder.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "cboulanger",
    "eventrecorder",
    "MHelperMethods",
    "MState",
    "construct",
    "__excludeIds",
    "__lines",
    "addGlobalEventListener",
    "target",
    "event",
    "isRunning",
    "id",
    "getAttribute",
    "Id",
    "getAbsoluteIdOf",
    "recordEvent",
    "properties",
    "mode",
    "check",
    "nullable",
    "init",
    "logEvents",
    "members",
    "__lastEventTimestamp",
    "__latInput",
    "excludeIds",
    "ids",
    "lang",
    "Type",
    "isArray",
    "found",
    "excluded",
    "substr",
    "length",
    "debug",
    "push",
    "getExcludedIds",
    "getObjectIds",
    "traverseObjectTree",
    "obj",
    "getQxObjectId",
    "e",
    "error",
    "owned",
    "getOwnedQxObjects",
    "registeredObjects",
    "getInstance",
    "getRegisteredObjects",
    "values",
    "message",
    "getScript",
    "join",
    "setScript",
    "script",
    "Assert",
    "assertString",
    "split",
    "beforeStart",
    "getMode",
    "document",
    "location",
    "host",
    "pathname",
    "concat",
    "Date",
    "toLocaleString",
    "createIntermediateCodeFromEvent",
    "afterStop",
    "getTrackEvents",
    "lines",
    "type",
    "getType",
    "data",
    "getData",
    "owner",
    "getQxOwner",
    "getLogEvents",
    "JSON",
    "stringify",
    "toString",
    "ui",
    "form",
    "DateField",
    "ComboBox",
    "VirtualComboBox",
    "tree",
    "FolderOpenButton",
    "FocusHandler",
    "isFocusRoot",
    "getQxObject",
    "__lastInput",
    "isModelSelection",
    "Array",
    "getModel",
    "ownerId",
    "model",
    "indexes",
    "toArray",
    "map",
    "item",
    "indexOf",
    "isString",
    "VirtualTree",
    "row",
    "getLookupTable",
    "nodeId",
    "treevirtual",
    "TreeVirtual",
    "selection",
    "getDataModel",
    "getRowFromNodeId",
    "virtual",
    "Row",
    "table",
    "Model",
    "ranges",
    "getSelectedRanges",
    "minIndex",
    "maxIndex",
    "selected",
    "selectedId",
    "getSelectables",
    "index",
    "startsWith",
    "getTrackPropertyChanges",
    "property",
    "String",
    "firstLow",
    "now",
    "msSinceLastEvent",
    "unshift",
    "Recorder"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n  UI Event Recorder\n\n  Copyright:\n    2018 Christian Boulanger\n\n  License:\n    MIT license\n    See the LICENSE file in the project's top-level directory for details.\n\n  Authors: Christian Boulanger\n\n************************************************************************ */\n\n/**\n * The base class of all recorder types\n * @require(qx.bom.Element)\n */\nqx.Class.define(\"cboulanger.eventrecorder.Recorder\", {\n  extend : qx.core.Object,\n  include : [\n    cboulanger.eventrecorder.MHelperMethods,\n    cboulanger.eventrecorder.MState\n  ],\n\n  /**\n   * Constructor\n   */\n  construct : function() {\n    this.base(arguments);\n\n    this.__excludeIds = [];\n    this.__lines = [];\n\n    this.addGlobalEventListener((target, event) => {\n      if (!this.isRunning()) {\n        return;\n      }\n      let id;\n      if (typeof target.getAttribute == \"function\") {\n        id = target.getAttribute(\"data-qx-object-id\");\n      } else if (target instanceof qx.core.Object) {\n        id = qx.core.Id.getAbsoluteIdOf(target, true);\n      } else {\n        return;\n      }\n      if (id) {\n        this.recordEvent(id, event, target);\n      }\n    });\n  },\n\n  properties: {\n\n    /**\n     * The recorder mode, can be \"overwrite\" or \"append\"\n     */\n    mode: {\n      check: [\"overwrite\", \"append\"],\n      nullable: false,\n      init: \"overwrite\"\n    },\n\n    /**\n     * Whether to output additional event data to the console\n     */\n    logEvents: {\n      check: \"Boolean\",\n      nullable: false,\n      init: false\n    }\n  },\n\n  /**\n   * The methods and simple properties of this class\n   */\n  members :\n  {\n    __lines: null,\n    __excludeIds: null,\n    __lastEventTimestamp: null,\n    __latInput: null,\n\n    /**\n     * Exclude the given id(s) from recording\n     * @param ids {Array|String}\n     */\n    excludeIds(ids) {\n      // normalize to array\n      ids = qx.lang.Type.isArray(ids)? ids: [ids];\n      // add ids that are not yet included by path\n      for (let id of ids) {\n        let found=false;\n        for (let excluded of this.__excludeIds) {\n          if (id.substr(0, excluded.length) === excluded) {\n            found = true;\n          }\n        }\n        if (!found) {\n          this.debug(`Excluding ${id} from event recording.`);\n          this.__excludeIds.push(id);\n        }\n      }\n    },\n\n    /**\n     * Returns the list of excluded ids.\n     * @return {String[]}\n     */\n    getExcludedIds() {\n      return this.__excludeIds;\n    },\n\n    /**\n     * Return an array of object ids that have been assigned in the current application\n     * @return {[]}\n     */\n    getObjectIds() {\n      let ids = [];\n      let traverseObjectTree = function (obj) {\n        if (typeof obj.getQxObjectId !== \"function\") {\n          return;\n        }\n        let id = obj.getQxObjectId();\n        if (id) {\n          try {\n            ids.push(qx.core.Id.getAbsoluteIdOf(obj));\n          } catch (e) {\n            this.error(`Cannot get absolute ID for object with id ${id}.`);\n          }\n        }\n        for (let owned of obj.getOwnedQxObjects()) {\n          traverseObjectTree(owned);\n        }\n      };\n      try {\n        let registeredObjects = qx.core.Id.getInstance().getRegisteredObjects() || {};\n        for (let obj of Object.values(registeredObjects)) {\n          traverseObjectTree(obj);\n        }\n        return ids;\n      } catch (e) {\n        this.error(e.message);\n        return [];\n      }\n    },\n\n    /**\n     * Returns the recorded script\n     * @return {String}\n     */\n    getScript() {\n      return this.__lines.join(\"\\n\");\n    },\n\n    /**\n     * Sets the script to which the recorder should append new events\n     * @param script {String}\n     */\n    setScript(script) {\n      if (script) {\n        qx.core.Assert.assertString(script);\n        this.__lines = script.split(/\\n/);\n      } else {\n        this.__lines = [];\n      }\n    },\n\n    /**\n     * Called by start()\n     */\n    beforeStart() {\n      switch (this.getMode()) {\n        case \"overwrite\":\n          this.__lines = [\n            `config-set-mode presentation`,\n            `assert-match-uri ${document.location.host + document.location.pathname}`,\n            \"\"\n          ];\n          break;\n        case \"append\":\n          this.__lines = this.__lines.concat([\n            \"\",\n            `# appended at ${(new Date()).toLocaleString()}`,\n            \"\"\n          ]);\n          break;\n      }\n      this.__lastEventTimestamp = 0;\n    },\n\n    /**\n     * Called by the global event listener\n     * @param id {String}\n     * @param event {qx.event.type.Event}\n     * @param target {qx.bom.Element}\n     * @private\n     * @return {boolean} returns true if the event was recorded, false if\n     * it was ignored because of the list of excluded ids.\n     */\n    recordEvent(id, event, target) {\n      for (let excluded of this.__excludeIds) {\n        if (id.substr(0, excluded.length) === excluded) {\n          return false;\n        }\n      }\n      this.__lines = this.__lines.concat(this.createIntermediateCodeFromEvent(id, event, target));\n      return true;\n    },\n\n    /**\n     * Executed after stop()\n     */\n    afterStop() {\n      this.__lastEventTimestamp = 0;\n    },\n\n    /**\n     * Given an object id, the event name and the even target, return one or more\n     * pieces of intermediate code from which a player can replay the user action\n     * that lead to this event. Return an array, each element is one line of code\n     * @param id {String} The id of the qooxdoo object\n     * @param event {qx.event.Event} The event that was fired\n     * @param target {qx.bom.Element|qx.core.Object} The event target\n     * @return {String[]} An array of script lines\n     */\n    createIntermediateCodeFromEvent(id, event, target) {\n      // opt out of recording\n      if (typeof target.getTrackEvents == \"function\" && !target.getTrackEvents()) {\n        return [];\n      }\n      let lines = [];\n      const type = event.getType();\n      let data = typeof event.getData == \"function\" ? event.getData() : null;\n      let owner = typeof target.getQxOwner == \"function\" ? target.getQxOwner() : null;\n      if (this.getLogEvents()) {\n        this.debug(JSON.stringify({id, owner: owner && owner.toString(), type: type, data:data, target:target.toString()}));\n      }\n      switch (type) {\n        case \"dbltap\":\n          return [`dbltap ${id}`];\n        case \"tap\":\n          return [`tap ${id}`];\n        case \"execute\":\n          switch (true) {\n            case owner instanceof qx.ui.form.DateField:\n            case owner instanceof qx.ui.form.ComboBox:\n            case owner instanceof qx.ui.form.VirtualComboBox:\n            case target instanceof qx.ui.tree.core.FolderOpenButton:\n              return [];\n          }\n          lines.push(`execute ${id}`);\n          break;\n        case \"appear\":\n        case \"disappear\":\n          if (qx.ui.core.FocusHandler.getInstance().isFocusRoot(qx.core.Id.getQxObject(id))) {\n            return [`assert-${type}ed ${id}`];\n          }\n          return [];\n\n        case \"input\":\n          this.__lastInput = data;\n          return [];\n\n        case \"change\": {\n          // model selection\n          const isModelSelection =\n            target instanceof qx.data.Array &&\n            target.getQxOwner() &&\n            typeof target.getQxOwner().getModel == \"function\";\n          if (isModelSelection) {\n            const owner = target.getQxOwner();\n            const ownerId = qx.core.Id.getAbsoluteIdOf(owner);\n            const model = owner.getModel();\n            const indexes = target.toArray().map(item => model.indexOf(item));\n            lines.push(`set-model-selection ${ownerId} ${JSON.stringify(indexes)}`);\n            break;\n          }\n          // form fields\n          if (qx.lang.Type.isString(data) && data === this.__lastInput) {\n            lines.push(`set-value ${id} \"${data}\"`);\n          }\n          break;\n        }\n\n        case \"open\":\n        case \"close\": {\n          if (target instanceof qx.ui.tree.VirtualTree) {\n            let row = target.getLookupTable().indexOf(data);\n            if (row < 0) {\n              return [];\n            }\n            lines.push(`${type}-tree-node ${id} ${row}`);\n          }\n          break;\n        }\n        // qx.ui.treevirtual.TreeVirtual\n        case \"treeClose\":\n        case \"treeOpenWithContent\":\n        case \"treeOpenWhileEmpty\":\n          lines.push(`${type===\"treeClose\"?\"close-tree-node-treevirtual\":\"open-tree-node-treevirtual\"} ${id} ${data.nodeId}`);\n          break;\n\n        case \"changeSelection\": {\n          if (target instanceof qx.ui.treevirtual.TreeVirtual) {\n            let selection = event.getData();\n            if (!selection.length) {\n              return [];\n            }\n            let row = target.getDataModel().getRowFromNodeId(selection[0].nodeId);\n            lines.push(`set-table-selection ${id} ${row},${row}`);\n          }\n          if (target instanceof qx.ui.virtual.selection.Row) {\n            lines.push(`set-row-selection ${id} ${data}`);\n            break;\n          }\n          if (target instanceof qx.ui.table.selection.Model) {\n            lines.push(`reset-selection ${id}`);\n            let ranges = target.getSelectedRanges();\n            if (ranges.length) {\n              lines.push(`set-table-selection ${id} ${ranges[0].minIndex},${ranges[0].maxIndex}`);\n            }\n            break;\n          }\n          if (data && data.length && qx.lang.Type.isArray(data)) {\n            let selected = data[0];\n            if (selected instanceof qx.core.Object && selected.getQxObjectId()) {\n              let selectedId = qx.core.Id.getAbsoluteIdOf(selected);\n              lines.push(`set-selection ${id} ${selectedId}`);\n            } else if (typeof target.getSelectables == \"function\") {\n              let index = target.getSelectables().indexOf(selected);\n              lines.push(`set-selection-from-selectables ${id} ${index}`);\n            }\n            break;\n          }\n          return [];\n        }\n        default:\n          // record change events if explicitly requested\n          if (type.startsWith(\"change\") && typeof target.getTrackPropertyChanges == \"function\") {\n            if (target.getTrackPropertyChanges()) {\n              let property = qx.lang.String.firstLow(type.substr(6));\n              lines.push(`await-match-json ${id} ${property} ${JSON.stringify(data)}`);\n              break;\n            }\n          }\n          // ignore all others\n          return [];\n      }\n      // prepend a wait command to replay delays in user action\n      let now = Date.now();\n      let msSinceLastEvent = now - (this.__lastEventTimestamp || now);\n      this.__lastEventTimestamp = now;\n      if (msSinceLastEvent) {\n        lines.unshift(`delay ${msSinceLastEvent}`);\n      }\n      return lines;\n    }\n  }\n});\n"
  ]
}