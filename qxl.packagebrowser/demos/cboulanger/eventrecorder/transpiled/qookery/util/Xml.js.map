{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/cboulanger_eventrecorder_v0_18_0/qx_packages/ergobyte_qookery_892f44d1d1ae5d65c7dd99b18da6876de2f2a920/qookery/source/class/qookery/util/Xml.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "getNamespaceDeclarations",
    "element",
    "namespaces",
    "attributes",
    "i",
    "length",
    "attribute",
    "item",
    "attributeName",
    "nodeName",
    "indexOf",
    "prefix",
    "substr",
    "value",
    "resolveQName",
    "namespaceResolver",
    "qName",
    "charAt",
    "Error",
    "colonPos",
    "namespaceUri",
    "lang",
    "String",
    "format",
    "localPart",
    "substring",
    "getNodeText",
    "node",
    "text",
    "dom",
    "Node",
    "getText",
    "trim",
    "getAttribute",
    "defaultValue",
    "rightBracePos",
    "xml",
    "Element",
    "getAttributeNS",
    "parseValue",
    "component",
    "type",
    "toLowerCase",
    "evaluateExpression",
    "parseInt",
    "split",
    "map",
    "data",
    "Conversion",
    "toNumber",
    "RegExp",
    "expression",
    "messageId",
    "v",
    "qookery",
    "util",
    "Xml",
    "__NAMED_SIZES",
    "undefined",
    "isNaN",
    "parseAllAttributes",
    "typeMap",
    "xmlAttributes",
    "xmlAttribute",
    "attributeQName",
    "name",
    "getAttributeType"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/*\n\tQookery - Declarative UI Building for Qooxdoo\n\n\tCopyright (c) Ergobyte Informatics S.A., www.ergobyte.gr\n\n\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\tyou may not use this file except in compliance with the License.\n\tYou may obtain a copy of the License at\n\n\t\thttp://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n*/\n\n/**\n * Various utility methods helpful when working with XML documents\n */\nqx.Class.define(\"qookery.util.Xml\", {\n\n\tstatics: {\n\n\t\t/**\n\t\t * Return namespace declarations defined onto element, if any\n\t\t *\n\t\t * @param element {Element} the XML element to search for namespace declarations\n\t\t *\n\t\t * @return {Map?} prefix-to-URI map, or <code>null</code> if no xmlns attributes found\n\t\t */\n\t\tgetNamespaceDeclarations: function(element) {\n\t\t\tvar namespaces = null, attributes = element.attributes;\n\t\t\tfor(var i = 0; i < attributes.length; i++) {\n\t\t\t\tvar attribute = attributes.item(i);\n\t\t\t\tvar attributeName = attribute.nodeName;\n\t\t\t\tif(attributeName !== \"xmlns\" && attributeName.indexOf(\"xmlns:\") !== 0) continue;\n\t\t\t\tvar prefix = attributeName.length === 5 ? \"\" : attributeName.substr(6);\n\t\t\t\tif(namespaces == null) namespaces = { };\n\t\t\t\tnamespaces[prefix] = attribute.value;\n\t\t\t}\n\t\t\treturn namespaces;\n\t\t},\n\n\t\t/**\n\t\t * Resolve a QName using provided namespace resolver\n\t\t *\n\t\t * <p>The result format is \"{\" + Namespace URI + \"}\" + local part. If the namespace URI is empty,\n\t\t * only the local part is returned.</p>\n\t\t *\n\t\t * @param namespaceResolver {Function} A prefix => namespaceUri function, returning <code>null</code> when prefix is unknown\n\t\t * @param qName {String} the QName to resolve\n\t\t *\n\t\t * @return {String} the string representation of the resolved QName\n\t\t *\n\t\t * @throws {Error} in case the QName prefix could not be resolved\n\t\t */\n\t\tresolveQName: function(namespaceResolver, qName) {\n\t\t\tif(qName.charAt(0) === \"{\")\n\t\t\t\treturn qName;\n\t\t\tif(namespaceResolver == null)\n\t\t\t\tthrow new Error(\"Namespace resolver required\");\n\t\t\tvar colonPos = qName.indexOf(\":\");\n\t\t\tvar prefix = colonPos === -1 ? \"\" : qName.substr(0, colonPos);\n\t\t\tvar namespaceUri = namespaceResolver(prefix);\n\t\t\tif(namespaceUri == null) {\n\t\t\t\tswitch(prefix) {\n\t\t\t\tcase \"\":\n\t\t\t\t\t// The default namespace, if not specified otherwise, is the empty string\n\t\t\t\t\tnamespaceUri = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"xml\":\n\t\t\t\t\t// Prefix always available, according to XML 1.0 and 1.1 specifications\n\t\t\t\t\tnamespaceUri = \"http://www.w3.org/XML/1998/namespace\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(qx.lang.String.format(\"Unable to resolve namespace prefix '%1'\", [ prefix ]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(namespaceUri === \"\")\n\t\t\t\treturn qName;\n\t\t\tvar localPart = qName.substring(colonPos + 1);\n\t\t\treturn \"{\" + namespaceUri + \"}\" + localPart;\n\t\t},\n\n\t\t/**\n\t\t * Return the text value of an XML node, after trimming leading and trailing whitespace\n\t\t *\n\t\t * @param node {Node} XML node to get text from\n\t\t *\n\t\t * @return {String?} whitespace trimmed text or <code>null</code> if empty\n\t\t */\n\t\tgetNodeText: function(node) {\n\t\t\tvar text = qx.dom.Node.getText(node);\n\t\t\tif(text == null || text.length === 0)\n\t\t\t\treturn null;\n\t\t\ttext = text.trim();\n\t\t\tif(text.length === 0)\n\t\t\t\treturn null;\n\t\t\treturn text;\n\t\t},\n\n\t\t/**\n\t\t * Return the text value of an element's attribute, after trimming leading and trailing whitespace\n\t\t *\n\t\t * <p>You may supply the <code>Error</code> build-in object as the defaultValue parameter\n\t\t * in order to request that an exception is thrown when value is missing.</p>\n\t\t *\n\t\t * @param element {Element} XML element holding required attribute\n\t\t * @param attributeName {String} name of required attribute, may be fully qualified\n\t\t * @param defaultValue {String?} the text to return in case the attribute is empty/missing\n\t\t *\n\t\t * @return {String} whitespace trimmed attribute value or the default value if empty/missing\n\t\t */\n\t\tgetAttribute: function(element, attributeName, defaultValue) {\n\t\t\tvar namespaceUri = \"\", localPart = attributeName;\n\t\t\tif(attributeName.charAt(0) === \"{\") {\n\t\t\t\tvar rightBracePos = attributeName.indexOf(\"}\");\n\t\t\t\tif(rightBracePos === -1)\n\t\t\t\t\tthrow new Error(\"Ill-formed attribute name\");\n\t\t\t\tnamespaceUri = attributeName.substring(1, rightBracePos);\n\t\t\t\tlocalPart = attributeName.substring(rightBracePos + 1);\n\t\t\t}\n\t\t\tvar text = qx.xml.Element.getAttributeNS(element, namespaceUri, localPart);\n\t\t\tif(text != null) {\n\t\t\t\ttext = text.trim();\n\t\t\t\tif(text.length !== 0)\n\t\t\t\t\treturn text;\n\t\t\t}\n\t\t\tif(defaultValue === Error)\n\t\t\t\tthrow new Error(qx.lang.String.format(\"Required attribute '%1' missing from XML element '%2'\", [ attributeName, element ]));\n\t\t\treturn defaultValue;\n\t\t},\n\n\t\t/**\n\t\t * Parse a string of specified value type against provided component\n\t\t *\n\t\t * @param component {qookery.IComponent} the component that will serve as the context for evaluations\n\t\t * @param type {String} one of the known value types\n\t\t * @param text {String} the string to parse\n\t\t *\n\t\t * @return {any} the parsing result\n\t\t */\n\t\tparseValue: function(component, type, text) {\n\t\t\tswitch(type) {\n\t\t\tcase \"Boolean\":\n\t\t\t\tswitch(text.toLowerCase()) {\n\t\t\t\tcase \"true\": return true;\n\t\t\t\tcase \"false\": return false;\n\t\t\t\t}\n\t\t\t\treturn text;\n\t\t\tcase \"Expression\":\n\t\t\t\treturn component.evaluateExpression(text);\n\t\t\tcase \"Integer\":\n\t\t\t\treturn parseInt(text, 10);\n\t\t\tcase \"IntegerList\":\n\t\t\t\treturn text.split(/\\W+/).map(function(element) { return parseInt(element, 10); });\n\t\t\tcase \"Number\":\n\t\t\t\treturn qx.data.Conversion.toNumber(text);\n\t\t\tcase \"NumberList\":\n\t\t\t\treturn text.split(/\\s+/).map(function(element) { return qx.data.Conversion.toNumber(element); });\n\t\t\tcase \"RegularExpression\":\n\t\t\t\treturn new RegExp(text);\n\t\t\tcase \"ReplaceableString\":\n\t\t\t\tif(text.length < 2) return text;\n\t\t\t\tif(text.charAt(0) !== \"%\") return text;\n\t\t\t\tif(text.charAt(1) === \"{\" && text.charAt(text.length - 1) === \"}\") {\n\t\t\t\t\tvar expression = text.substring(2, text.length - 1);\n\t\t\t\t\treturn component.evaluateExpression(expression);\n\t\t\t\t}\n\t\t\t\tvar messageId = text.substring(1);\n\t\t\t\treturn component[\"tr\"](messageId);\n\t\t\tcase \"QName\":\n\t\t\t\treturn component.resolveQName(text);\n\t\t\tcase \"Size\":\n\t\t\t\tvar v = qookery.util.Xml.__NAMED_SIZES[text];\n\t\t\t\tif(v !== undefined)\n\t\t\t\t\treturn v;\n\t\t\t\tv = parseInt(text, 10);\n\t\t\t\tif(!isNaN(v))\n\t\t\t\t\treturn v;\n\t\t\t\treturn text;\n\t\t\tcase \"StringList\":\n\t\t\t\treturn text.split(/\\s+/);\n\t\t\tdefault:\n\t\t\t\t// Fallback for unknown types\n\t\t\t\treturn text;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Parse XML element attributes according to component's attribute type mapping\n\t\t *\n\t\t * <p>Supported types are those of qookery.util.Xml#parseValue()</p>\n\t\t *\n\t\t * @param component {qookery.IComponent} Qookery component to serve as the base of any conversion\n\t\t * @param element {Element} XML element to read attributes from\n\t\t * @param typeMap {Map?} custom type mapping; if provided, it overrides the component's type mapping\n\t\t *\n\t\t * @return {Map} attribute name to converted attribute value map\n\t\t */\n\t\tparseAllAttributes: function(component, element, typeMap) {\n\t\t\tvar attributes = { };\n\t\t\tvar xmlAttributes = element.attributes;\n\t\t\tfor(var i = 0; i < xmlAttributes.length; i++) {\n\t\t\t\tvar xmlAttribute = xmlAttributes.item(i);\n\t\t\t\tvar attributeQName = xmlAttribute.name;\n\t\t\t\tif(attributeQName === \"xmlns\" || attributeQName.indexOf(\"xmlns:\") === 0)\n\t\t\t\t\tcontinue; // Namespace declarations are handled separately\n\t\t\t\tvar text = xmlAttribute.value;\n\t\t\t\tif(text == null || text.length === 0)\n\t\t\t\t\tcontinue; // Empty attributes are ignored\n\t\t\t\ttext = text.trim();\n\t\t\t\tif(text.length === 0)\n\t\t\t\t\tcontinue; // Empty attribute after trimming whitespace, also ignored\n\t\t\t\tvar attributeName = attributeQName;\n\t\t\t\tif(attributeQName.indexOf(\":\") !== -1)\n\t\t\t\t\tattributeName = component.resolveQName(attributeQName);\n\t\t\t\tvar value = text;\n\t\t\t\tvar type = (typeMap != null ? typeMap[attributeName] : undefined) || component.getAttributeType(attributeName);\n\t\t\t\tif(type != null)\n\t\t\t\t\tvalue = qookery.util.Xml.parseValue(component, type, text);\n\t\t\t\tattributes[attributeName] = value;\n\t\t\t}\n\t\t\treturn attributes;\n\t\t},\n\n\t\t__NAMED_SIZES: {\n\t\t\t\"null\": null,\n\t\t\t\"XXS\": 28,\n\t\t\t\"XS\": 46,\n\t\t\t\"S\": 74,\n\t\t\t\"M\": 120,\n\t\t\t\"L\": 194,\n\t\t\t\"XL\": 314,\n\t\t\t\"XXL\": 508\n\t\t}\n\t}\n});\n"
  ]
}