{
  "className": "qookery.IContainerComponent",
  "packageName": "qookery",
  "name": "IContainerComponent",
  "superClass": "qookery.IComponent",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 60,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Interface for components that are containers of other components</p>"
        }
      ]
    }
  },
  "type": "interface",
  "members": {
    "add": {
      "location": {
        "start": {
          "line": 35,
          "column": 2
        },
        "end": {
          "line": 35,
          "column": 30
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add component into this container</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "component {qookery.IComponent} the component to add into this component",
            "paramName": "component",
            "description": " the component to add into this component",
            "type": "qookery.IComponent"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "an exception is thrown in case this component does not support operation"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 42,
          "column": 2
        },
        "end": {
          "line": 42,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove component from this container</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "component {qookery.IComponent} component to remove",
            "paramName": "component",
            "description": " component to remove",
            "type": "qookery.IComponent"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 51,
          "column": 2
        },
        "end": {
          "line": 51,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Test whether given component is a member of this container</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "component {qookery.IComponent} component to look for",
            "paramName": "component",
            "description": " component to look for",
            "type": "qookery.IComponent"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if component is a member of this container",
            "type": "Boolean",
            "description": " <code>true</code> if component is a member of this container"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "listChildren": {
      "location": {
        "start": {
          "line": 58,
          "column": 2
        },
        "end": {
          "line": 58,
          "column": 30
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return an array of all contained components</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} contained components",
            "type": "Array",
            "description": " contained components"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getId": {
      "type": "function",
      "name": "getId",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the component identifier, if any\n </p>\n<p>This identifier is guaranteed to be unique within the defining XML document</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} unique identifier or <code>null</code>",
            "type": "String",
            "description": " unique identifier or <code>null</code>"
          }
        ]
      }
    },
    "getAttributeType": {
      "type": "function",
      "name": "getAttributeType",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the type of an attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "attributeName {String} name of the attribute",
            "paramName": "attributeName",
            "description": " name of the attribute",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} attribute's type or <code>null</code> if unknown",
            "type": "String",
            "description": " attribute's type or <code>null</code> if unknown"
          }
        ]
      }
    },
    "setAttribute": {
      "type": "function",
      "name": "setAttribute",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set an attribute's value\n </p>\n<p>NB: Few attributes are expected by implementations to be modified this way - be sure\n to check component documentation for supported changes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "attributeName {String} the name of the attribute to change",
            "paramName": "attributeName",
            "description": " the name of the attribute to change",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {any} the new attribute value, <code>undefined</code> clears attribute",
            "paramName": "value",
            "description": " the new attribute value, <code>undefined</code> clears attribute",
            "type": "any"
          }
        ]
      }
    },
    "resolveNamespacePrefix": {
      "type": "function",
      "name": "resolveNamespacePrefix",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resolve a URI namespace prefix</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prefix {String} the prefix to resolve",
            "paramName": "prefix",
            "description": " the prefix to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String?} namespace URI or <code>null</code> if prefix is unknown",
            "type": "String?",
            "description": " namespace URI or <code>null</code> if prefix is unknown"
          }
        ]
      }
    },
    "resolveQName": {
      "type": "function",
      "name": "resolveQName",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resolve a QName\n </p>\n<p>The result format is \"{\" + Namespace URI + \"}\" + local part. If the namespace URI is empty,\n only the local part is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "qName {String} the QName to resolve",
            "paramName": "qName",
            "description": " the QName to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string representation of the resolved QName",
            "type": "String",
            "description": " the string representation of the resolved QName"
          }
        ]
      }
    },
    "create": {
      "type": "function",
      "name": "create",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called by the form parser soon after initialization and attribute parsing\n </p>\n<p>Notice: You must never call this method directly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "attributes {Map} preprocessed attributes found in the defining XML document",
            "paramName": "attributes",
            "description": " preprocessed attributes found in the defining XML document",
            "type": "Map"
          }
        ]
      }
    },
    "parseXmlElement": {
      "type": "function",
      "name": "parseXmlElement",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called by the parser when an unknown XML element is encountered within a component's declaration\n </p>\n<p>Notice: You must never call this method directly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elementName {String} the resolved fully-qualified name of encountered DOM element",
            "paramName": "elementName",
            "description": " the resolved fully-qualified name of encountered DOM element",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "element {Element} the DOM element that is not understood by parser",
            "paramName": "element",
            "description": " the DOM element that is not understood by parser",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> in case the component was able to do something with input",
            "type": "Boolean",
            "description": " <code>true</code> in case the component was able to do something with input"
          }
        ]
      }
    },
    "setup": {
      "type": "function",
      "name": "setup",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called by the parser after creation of the component and all its children\n </p>\n<p>Notice: You must never call this method directly.</p>"
          }
        ]
      }
    },
    "getForm": {
      "type": "function",
      "name": "getForm",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the form containing this component</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qookery.IFormComponent} the form containing this component",
            "type": "qookery.IFormComponent",
            "description": " the form containing this component"
          }
        ]
      }
    },
    "getParent": {
      "type": "function",
      "name": "getParent",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the parent component or <code>null</cide> if this is the root component</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qookery.IComponent} parent component or <code>null</code>",
            "type": "qookery.IComponent",
            "description": " parent component or <code>null</code>"
          }
        ]
      }
    },
    "evaluateExpression": {
      "type": "function",
      "name": "evaluateExpression",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Evaluate a Qookery expression within component's scripting context</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expression {String} a valid JavaScript expression",
            "paramName": "expression",
            "description": " a valid JavaScript expression",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{any} the evaluation result",
            "type": "any",
            "description": " the evaluation result"
          }
        ]
      }
    },
    "executeClientCode": {
      "type": "function",
      "name": "executeClientCode",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Execute Qookery scripting code on component</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clientCode {String} a valid Qookery script",
            "paramName": "clientCode",
            "description": " a valid Qookery script",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "argumentMap {Map?} a map to be passed as arguments to the script",
            "paramName": "argumentMap",
            "description": " a map to be passed as arguments to the script",
            "optional": true,
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{any} the script result",
            "type": "any",
            "description": " the script result"
          }
        ]
      }
    },
    "focus": {
      "type": "function",
      "name": "focus",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the focus to this component</p>"
          }
        ]
      }
    },
    "listWidgets": {
      "type": "function",
      "name": "listWidgets",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a list of widgets that are handled by this component</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filterName {String} if set, one of 'topMost', 'main' to restrict resulting list",
            "paramName": "filterName",
            "description": " if set, one of 'topMost', 'main' to restrict resulting list",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} widget list - an empty array if none found",
            "type": "qx.ui.core.Widget[]",
            "description": " widget list - an empty array if none found"
          }
        ]
      }
    },
    "getMainWidget": {
      "type": "function",
      "name": "getMainWidget",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the main widget\n </p>\n<p>This method a shorthand for #listWidgets('main')[0]</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} the main widget",
            "type": "qx.ui.core.Widget",
            "description": " the main widget"
          }
        ]
      }
    },
    "addEventHandler": {
      "type": "function",
      "name": "addEventHandler",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an event handler to this component</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "eventName {String} the name of the event to listen to",
            "paramName": "eventName",
            "description": " the name of the event to listen to",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "handler {Function} a function to execute when the event is triggered",
            "paramName": "handler",
            "description": " a function to execute when the event is triggered",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "onlyOnce {Boolean} if <code>true</code>, the listener will be removed as soon as it triggered for the first time",
            "paramName": "onlyOnce",
            "description": " if <code>true</code>, the listener will be removed as soon as it triggered for the first time",
            "type": "Boolean"
          }
        ]
      }
    },
    "isActionSupported": {
      "type": "function",
      "name": "isActionSupported",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the action exist or not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "actionName {String} the name of the action",
            "paramName": "actionName",
            "description": " the name of the action",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the action exists",
            "type": "Boolean",
            "description": " whether the action exists"
          }
        ]
      }
    },
    "executeAction": {
      "type": "function",
      "name": "executeAction",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Execute an action provided by this component\n </p>\n<p>It is safe to call this method for undefined actions,\n in which case <code>null</code> is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "actionName {String} one the actions provided by component",
            "paramName": "actionName",
            "description": " one the actions provided by component",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "varargs {any} any number of arguments that will be passed to action's function",
            "paramName": "varargs",
            "description": " any number of arguments that will be passed to action's function",
            "type": "any"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{any} the action's execution result",
            "type": "any",
            "description": " the action's execution result"
          }
        ]
      }
    },
    "validate": {
      "type": "function",
      "name": "validate",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request validation of component state and contents\n </p>\n<p>NB: Components should not return errors when disabled, hidden or excluded.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qookery.util.ValidationError} discovered validation error or <code>null</code> if component is valid",
            "type": "qookery.util.ValidationError",
            "description": " discovered validation error or <code>null</code> if component is valid"
          }
        ]
      }
    },
    "tr": {
      "type": "function",
      "name": "tr",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a translated message</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} the identifier of the wanted message",
            "paramName": "messageId",
            "description": " the identifier of the wanted message",
            "type": "String"
          }
        ]
      }
    },
    "addToDisposeList": {
      "type": "function",
      "name": "addToDisposeList",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a disposable to the list of objects that will be disposed automatically together with component</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "disposable {Object} any object that has a <code>dispose</code> property that is a function",
            "paramName": "disposable",
            "description": " any object that has a <code>dispose</code> property that is a function",
            "type": "Object"
          }
        ]
      }
    },
    "getAttribute": {
      "type": "function",
      "name": "getAttribute",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qookery.IComponent",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return an attribute's value if defined, or a default value if missing\n </p>\n<p>You may supply the <code>Error</code> JS build-in object as the default value parameter\n in order to request that a range error is thrown when attribute is missing.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} the name of the wanted attribute",
            "paramName": "name",
            "description": " the name of the wanted attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "defaultValue {any} optional default value, <code>undefined</code> will be used if not provided",
            "paramName": "defaultValue",
            "description": " optional default value, <code>undefined</code> will be used if not provided",
            "type": "any"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{any} attribute's value or requested default value if attribute is not defined within the set",
            "type": "any",
            "description": " attribute's value or requested default value if attribute is not defined within the set"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{RangeError} in case attribute is not part of the set and the default value was set to <code>Error</code>",
            "type": "RangeError",
            "description": " in case attribute is not part of the set and the default value was set to <code>Error</code>"
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getVisibility": {
      "type": "function",
      "name": "getVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for visibility"
          }
        ]
      }
    },
    "setVisibility": {
      "type": "function",
      "name": "setVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for visibility"
          }
        ]
      }
    },
    "resetVisibility": {
      "type": "function",
      "name": "resetVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>visibility</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ]
      }
    }
  },
  "abstract": true,
  "descendants": []
}