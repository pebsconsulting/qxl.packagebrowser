{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/oposs_headerpuppet_v0_0_6/source/class/headerpuppet/HeaderPuppet.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "tableWidget",
    "configuration",
    "set",
    "paddingBottom",
    "layout",
    "_layout",
    "Grid",
    "getLineWidth",
    "setBackgroundColor",
    "getLineColor",
    "_setLayout",
    "_labels",
    "_cells",
    "forEach",
    "cell",
    "_addCell",
    "tcm",
    "getTableColumnModel",
    "addListener",
    "e",
    "data",
    "getData",
    "realCol",
    "getVisibleX",
    "col",
    "setColumnWidth",
    "getColumnWidth",
    "i",
    "getVisibleColumnCount",
    "c",
    "r",
    "getRowCount",
    "getCellWidget",
    "bg",
    "backgroundColor",
    "getCellBackgroundColor",
    "height",
    "allowGrowX",
    "allowGrowY",
    "allowShrinkY",
    "push",
    "_add",
    "column",
    "row",
    "setColumnFlex",
    "ps",
    "getPaneScroller",
    "_startMoveHeader",
    "setColumnVisibilityButtonVisible",
    "properties",
    "lineWidth",
    "init",
    "apply",
    "lineColor",
    "cellPadding",
    "cellBackgroundColor",
    "cellFont",
    "members",
    "_applyPropChange",
    "value",
    "old",
    "name",
    "spacingX",
    "spacingY",
    "setPadding",
    "setFont",
    "_filterMap",
    "srcMap",
    "dstMap",
    "keys",
    "key",
    "undefined",
    "container",
    "padding",
    "getCellPadding",
    "containerLayout",
    "setRowFlex",
    "label",
    "basic",
    "Label",
    "text",
    "font",
    "getCellFont",
    "headerpuppet",
    "HeaderPuppet"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright: 2019 OETIKER+PARTNER AG\n\n   License: MIT license\n\n   Authors: Tobias Oetiker (oetiker) tobi@oetiker.ch\n\n************************************************************************ */\n\n/**\n * Qooxdoo tables have a single header row. For complex content this may\n * be a little limited. The HeaderPuppet creates a grid structure synced\n * to the header of the table. The cool thing about the grid is that\n * it support colSpan and rowSpan allowing to produce pretty nifty setups.\n * into a VBox layout. When attaching the HeaderPuppet to a table, then the\n * the table will loose the ability to modify which columns are hidden and also\n * the ability to alter the order of columns.\n *\n * <pre class=\"javascript\">\n * let win = new qx.ui.window.Window(\"Table\").set({\n *    layout : new qx.ui.layout.VBox(),\n *    contentPadding: 0,\n *    centerOnAppear: true\n * });\n * let tableModel = new qx.ui.table.model.Simple();\n * tableModel.setColumns([ \"ID\", \"A number\", \"A date\", \"Boolean\" ]);\n *\n * var table = new qx.ui.table.Table(tableModel).set({\n *    allowGrowY: true\n * });\n *\n * var headers = [\n *  { text: \"A Long Long Title with multiple lines\", rich: true,\n *    column: 0, row:0, rowSpan:2, alignY: 'middle', textAlign: 'center' },\n *  { text: \"Hello World Hello World\", column: 1, row:0, colSpan: 2,\n *    alignX: 'center', alignY: 'middle' },\n *  { text: \"Another Test shifted by one column\", column: 2, row:1, colSpan: 2,\n *    alignX: 'right', textAlign: 'right', rich:true}\n *  ];\n * win.add(new headerpuppet.HeaderPuppet(table,headers));\n * win.add(table,{flex: 1});\n * win.open();\n * </pre>\n *\n * @asset(headerpuppet/*)\n */\nqx.Class.define(\"headerpuppet.HeaderPuppet\", {\n    extend : qx.ui.core.Widget,\n    /**\n     *\n     * @param tableWidget {qx.ui.table.Table}\n     *      The table we want to add extra headers to\n     * @param configuration {Array}\n     *  An array of Maps defining the content of the extra header area.\n     *  Each entry can use the following mandatory parameters:\n     * <pre>\n     *  **text** the text to be shown in the field\n     *\n     *  **column** the column for this entry (starting with 0)\n     *\n     *  **row** the row for this entry (starting with 0)\n     * </pre>\n     *\n     * Optional parameters\n     *\n     * <pre>\n     *  **rowSpan** number of rows this label should cover\n     *\n     *  **colSpan** number of columns this label should cover\n     *\n     *  **rich** expect html input, automated line breaks\n     *\n     *  **backgroundColor** by default labels have a white background color\n     *\n     *  **alignX** takes one of `left`, `right`, `center` to indicate how to position the label widget if there is more space than required. Default is `left`.\n     *\n     *  **alignY** takes one of `top`,`bottom`, `middle` to indicate the the vertical position of the label.\n     *\n     *  **textAlign** takes one of `left`, `right`, `center` to indicate the text alignment inside the label.\n     *\n     *  **font** use a specific font in this cell\n     * </pre>\n     *\n     */\n    construct: function(tableWidget,configuration){\n        this.base(arguments);\n        this.set({\n            paddingBottom: 1\n        })\n        // this.setAppearance('headerpuppet');\n        let layout = this._layout = new qx.ui.layout.Grid(\n            this.getLineWidth(),this.getLineWidth()\n        );\n        this.setBackgroundColor(this.getLineColor());\n        this._setLayout(layout);\n        this._labels = [];\n        this._cells = [];\n        configuration.forEach(cell => { this._addCell(cell)});\n\n        let tcm = tableWidget.getTableColumnModel();\n\n        /* install the column with syncing */\n        tcm.addListener('widthChanged',e => {\n            var data = e.getData();\n            var realCol = tcm.getVisibleX(data.col);\n            layout.setColumnWidth(realCol,\n                tcm.getColumnWidth(data.col)-this.getLineWidth());\n        });\n\n        /* set initial column widths */\n        for (var i = 0;i<tcm.getVisibleColumnCount();i++){\n            layout.setColumnWidth(i,tcm.getColumnWidth(i)-1);\n        }\n\n        /* add empty labels */\n        for (let c = 0;c<=tcm.getVisibleColumnCount();c++){\n            for (let r = 0; r < layout.getRowCount(); r++){\n                if (! layout.getCellWidget(r,c)){\n                    let bg = new qx.ui.core.Widget().set({\n                        // appearance: \"headerpuppet/cell\",\n                        backgroundColor: this.getCellBackgroundColor(),\n                        height: 5,\n                        allowGrowX: true,\n                        allowGrowY:true,\n                        allowShrinkY: true\n                    });\n                    this._cells.push(bg);\n                    this._add(bg,{column:c,row:r});\n                }\n            }\n        }\n        layout.setColumnFlex(tcm.getVisibleColumnCount(),1);\n\n        /* disable header cell mover by overwriting it */\n        let ps = tableWidget.getPaneScroller(0);\n        ps._startMoveHeader = function(){};\n\n        /* disable column visibility button */\n        tableWidget.setColumnVisibilityButtonVisible(false);\n    },\n    properties: {\n        /**\n         * width of the grid line in the header\n         */\n        lineWidth: {\n            init: 1,\n            apply: \"_applyPropChange\"\n\n        },\n        /**\n         * color of the grid lines\n         */\n        lineColor: {\n            init: '#eee',\n            apply: \"_applyPropChange\"\n        },\n        /**\n         * cell padding\n         */\n        cellPadding: {\n            init: 3,\n            apply: \"_applyPropChange\"\n        },\n        /**\n         * cellBackgroundColor\n         */\n        cellBackgroundColor: {\n            init: '#fff',\n            apply: \"_applyPropChange\"\n        },\n        /**\n         * cellFont\n         */\n        cellFont: {\n            init: 'bold',\n            apply: \"_applyPropChange\"\n        }\n    },\n    members: {\n        _layout: null,\n        _cells: null,\n        _labels: null,\n        /**\n         * Apply changes to the Properties\n         *\n         * @param {Number} value\n         * @param {Number} old\n         * @param {String} name\n         */\n        _applyPropChange: function(value,old,name) {\n            switch(name){\n                case \"lineWidth\":\n                    this._layout.set({\n                        spacingX: value,\n                        spacingY: value\n                    });\n                    break;\n                case \"lineColor\":\n                    this.set({\n                        backgroundColor: value\n                    });\n                    break;\n                case \"cellPadding\":\n                    this._labels.forEach( cell => {\n                        cell.setPadding(value);\n                    });\n                    break;\n                case \"cellBackgroundColor\":\n                    this._cells.forEach( cell => {\n                        cell.setBackgroundColor(value);\n                    });\n                    break;\n                case \"cellFont\":\n                    this._labels.forEach( cell => {\n                        cell.setFont(value);\n                    });\n                    break;\n            }\n        },\n        /**\n         * Place the entries from the source map with matching\n         * keys in the keys array into the dstMap.\n         *\n         * @param srcMap {Map} burstin with key value pairs\n         * @param dstMap {Map} a potentially pre-seeded map to receive data from srcMap for the keys listed in the keys array.\n         * @param keys {Array} a list of valid keys for destination map\n         */\n        _filterMap: function(srcMap,dstMap,keys){\n            keys.forEach(key => {\n                if (srcMap[key] !== undefined){\n                    dstMap[key]=srcMap[key];\n                }\n            });\n            return dstMap;\n        },\n\n        /**\n         *\n         * @param cell {Map} a single line from the configuration array.\n         */\n        _addCell: function(cell) {\n            let container = new qx.ui.core.Widget().set({\n              backgroundColor: (\n                cell.backgroundColor || this.getCellBackgroundColor()),\n              // appearance: \"headerpuppet/cell\",\n              allowGrowX: true,\n              allowGrowY: true,\n              padding: this.getCellPadding()\n            });\n            this._cells.push(container);\n            let containerLayout = new qx.ui.layout.Grid(0,0);\n\n            containerLayout.setColumnFlex(0,1);\n            containerLayout.setRowFlex(0,1);\n\n            container._setLayout(containerLayout);\n\n            let label = new qx.ui.basic.Label(cell.text).set(\n                this._filterMap(cell,{\n                    font: this.getCellFont()\n                },['rich','alignX','textAlign','alignY','font'])\n            );\n            this._labels.push(label);\n            container._add(label,{column:0,row:0});\n            this._add(container,this._filterMap(cell,{},\n                ['column','row','colSpan','rowSpan'])\n            );\n        }\n    },\n\n});\n"
  ]
}