{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/oposs_headerpuppet_v0_0_6/qx_packages/qooxdoo_qxl_testtapper_v0_4_0/source/class/qxl/testtapper/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "application",
    "Standalone",
    "members",
    "_cnt",
    "_failed",
    "main",
    "cfg",
    "bom",
    "History",
    "getInstance",
    "getState",
    "split",
    "forEach",
    "item",
    "key",
    "value",
    "log",
    "appender",
    "Native",
    "matcher",
    "RegExp",
    "module",
    "getRoot",
    "add",
    "ui",
    "basic",
    "Label",
    "set",
    "rich",
    "left",
    "top",
    "console",
    "clazzes",
    "Object",
    "keys",
    "$$registry",
    "filter",
    "clazz",
    "match",
    "sort",
    "pChain",
    "Promise",
    "resolve",
    "reject",
    "then",
    "runAll",
    "info",
    "bottom",
    "that",
    "methodNames",
    "prototype",
    "name",
    "pos",
    "classname",
    "lastIndexOf",
    "pkgname",
    "substring",
    "loader",
    "dev",
    "unit",
    "TestLoaderBasic",
    "testResult",
    "TestResult",
    "methodNameIndex",
    "next",
    "length",
    "runTests",
    "showExceptions",
    "arr",
    "test",
    "getFullName",
    "message",
    "String",
    "exception",
    "error",
    "setTimeout",
    "getSuite",
    "addListener",
    "evt",
    "getData",
    "qxl",
    "testtapper",
    "Application"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright: 2018 Oetiker+Partner AG\n\n   License: MIT\n\n   Authors: Tobias Oetiker\n\n************************************************************************ */\n\n/**\n * Test Runner\n *\n * @asset(qxl/testtapper/run.js)\n */\n\nqx.Class.define(\"qxl.testtapper.Application\", {\n    extend: qx.application.Standalone,\n    members: {\n        _cnt: null,\n        _failed: null,\n        main: function() {\n            this.base(arguments);\n            this._cnt = 0;\n            this._failed = {};\n            // eslint-disable-next-line no-undef\n            let cfg = {};\n            qx.bom.History.getInstance().getState()\n                .split(';').forEach(item => {\n                    let [key,value] = item.split('=');\n                    cfg[key] = value;\n                });\n            qx.log.appender.Native;\n            let matcher = new RegExp(\"\\\\.test\\\\.\" + (cfg.module || ''));\n            this.getRoot().add(\n                new qx.ui.basic.Label(`\n                <h1>TestTAPper - the Qooxdoo Testrunner is at work</h1>\n                <p>See the debug console of your browser for details.</p>\n                `).set({\n                    rich: true\n                }),\n                { left: 100, top: 100 }\n            );\n            if (cfg.module) {\n                console.log(\"# running only tests that match \" + cfg.module);\n            }\n            let clazzes = Object.keys(qx.Class.$$registry)\n            .filter(clazz => clazz.match(matcher))\n            .sort();\n            let pChain = new qx.Promise((resolve,reject) => resolve(true));\n            clazzes.forEach(\n                clazz => {\n                    pChain = pChain.then(()=>\n                        this.runAll(\n                            qx.Class.$$registry[clazz]\n                        ).then(()=>{\n                            console.info(`# done testing ${clazz}.`);\n                        })\n                    );\n                }\n            );\n\n            return pChain.then(() => {\n                console.log(`1..${this._cnt}`);\n                this.getRoot().add(\n                    new qx.ui.basic.Label(`\n                    <h1>TestTAPper - is Done</h1>\n                    `).set({\n                        rich: true\n                    }),\n                    { left: 100, bottom: 100 }\n                );\n            });\n        },\n        runAll: function(clazz) {\n            let that = this;\n            console.info(`# start testing ${clazz}.`);\n            let methodNames = Object.keys(clazz.prototype)\n                .filter(name => name.match(/^test/)).sort();\n            return new qx.Promise(resolve => {\n                let pos = clazz.classname.lastIndexOf(\".\");\n                let pkgname = clazz.classname.substring(0, pos);\n                let loader = new qx.dev.unit.TestLoaderBasic(pkgname);\n                let testResult = new qx.dev.unit.TestResult();\n                let methodNameIndex = -1;\n                let next = () => {\n                    methodNameIndex++;\n                    if (methodNameIndex < methodNames.length) {\n                        loader.runTests(\n                            testResult,\n                            clazz.classname,\n                            methodNames[methodNameIndex]\n                        );\n                    }\n                    else {\n                        resolve();\n                    }\n                };\n                let showExceptions = arr => {\n                    arr.forEach(item => {\n                        if (item.test.getFullName){\n                            let test = item.test.getFullName();\n                            that._failed[test] = true;\n                            that._cnt++;\n                            let message = String(item.exception);\n                            if (item.exception) {\n                                if (item.exception.message) {\n                                message = item.exception.message;\n                                console.info(`not ok ${that._cnt} - ${test} - ${message}`);\n                                }\n                                else {\n                                    console.error('# '+item.exception);\n                                }\n                            }\n                        }\n                        else {\n                            console.error('Unexpected Error - ',item);\n                        }\n                    });\n                    setTimeout(next, 0);\n                };\n\n                loader.getSuite().add(clazz);\n                testResult.addListener(\"startTest\", evt => {\n                    console.info('# start ' +evt.getData().getFullName());\n                });\n                testResult.addListener(\"wait\", evt => {\n                    console.info('# wait '+evt.getData().getFullName());\n                });\n                testResult.addListener(\"endMeasurement\", evt => {\n                    console.info('# endMeasurement '+evt.getData().getFullName());\n                });\n                testResult.addListener(\"endTest\", evt => {\n                    let test = evt.getData().getFullName();\n                    if (!that._failed[test]){\n                        that._cnt++;\n                        console.info(`ok ${that._cnt} - ` + test);\n                    }\n                    setTimeout(next, 0);\n                });\n                testResult.addListener(\"failure\", evt => showExceptions(evt.getData()));\n                testResult.addListener(\"error\", evt => showExceptions(evt.getData()));\n                testResult.addListener(\"skip\", evt => {\n                    that._cnt++;\n                    let test = evt.getData()[0].test.getFullName();\n                    that._failed[test] = true;\n                    console.info(`ok ${that._cnt} - # SKIP ${test}`);\n                });\n\n                next();\n            });\n        }\n    }\n});\n"
  ]
}