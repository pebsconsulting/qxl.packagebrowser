{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/oetiker_UploadWidget_v1_0_2/source/class/uploadwidget/UploadField.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "fieldName",
    "label",
    "icon",
    "command",
    "_setLayout",
    "layout",
    "Grid",
    "setColumnFlex",
    "setColumnAlign",
    "getChildControl",
    "setFieldName",
    "setLabel",
    "setIcon",
    "setCommand",
    "properties",
    "check",
    "init",
    "apply",
    "fileName",
    "event",
    "nullable",
    "fileSize",
    "members",
    "_applyFileName",
    "value",
    "old",
    "setValue",
    "_applyFieldName",
    "_applyLabel",
    "_applyIcon",
    "getTextField",
    "getButton",
    "_onChangeFileName",
    "e",
    "getData",
    "setFileName",
    "setFileSize",
    "getFileSize",
    "_createChildControlImpl",
    "id",
    "control",
    "uploadwidget",
    "UploadButton",
    "getFieldName",
    "getLabel",
    "getIcon",
    "_add",
    "column",
    "row",
    "addListener",
    "form",
    "TextField",
    "set",
    "readOnly",
    "UploadField"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Visionet GmbH, http://www.visionet.de\r\n\r\n   License:\r\n     LGPL: http://www.gnu.org/licenses/lgpl.html\r\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Dietrich Streifert (level420)\r\n   \r\n   Contributors:\r\n     * Petr Kobalicek (e666e)     \r\n     * Tobi Oetiker (oetiker)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * UploadField: A textfield which holds the filename of the file which\r\n * should be uploaded and a button which allows selecting the file via the native\r\n * file selector, looking somewhat similar to what people are used to\r\n * from web browsers.\r\n *\r\n * @childControl button {uploadwidget.UploadButton} upload button.\r\n * @childControl textfield {qx.ui.form.TextField} read-only textfield next to the upload button\r\n *\r\n */\r\nqx.Class.define(\"uploadwidget.UploadField\",\r\n{\r\n  extend : qx.ui.core.Widget,\r\n\r\n  // --------------------------------------------------------------------------\r\n  // [Constructor]\r\n  // --------------------------------------------------------------------------\r\n\r\n  /**\r\n   * @param fieldName {String} upload field name\r\n   * @param label {String} button label\r\n   * @param icon {String} icon path\r\n   */\r\n  construct : function(fieldName, label, icon, command)\r\n  {\r\n    this.base(arguments);\r\n    this._setLayout(new qx.ui.layout.Grid(2,2)\r\n                    .setColumnFlex(0,1)\r\n                    .setColumnAlign(0,'left','middle')\r\n                    .setColumnAlign(1,'left','middle')\r\n    );\r\n    this.getChildControl('textfield');\r\n    if (fieldName) {\r\n        this.setFieldName(fieldName);\r\n    }\r\n    if (label) {\r\n        this.setLabel(label);\r\n    }\r\n    if (icon) {\r\n        this.setIcon(icon);\r\n    }\r\n    if (command) {\r\n        this.getChildControl('button').setCommand(command);\r\n    }\r\n  },\r\n\r\n  // --------------------------------------------------------------------------\r\n  // [Properties]\r\n  // --------------------------------------------------------------------------\r\n\r\n  properties :\r\n  {\r\n    /**\r\n     * The name which is assigned to the form\r\n     */\r\n    fieldName :\r\n    {\r\n      check : \"String\",\r\n      init  : \"\",\r\n      apply : \"_applyFieldName\"\r\n    },\r\n\r\n    /**\r\n     * The value which is assigned to the form\r\n     */\r\n    fileName :\r\n    {\r\n      check : \"String\",\r\n      init : \"\",\r\n      apply : \"_applyFileName\",\r\n      event : \"changeFileName\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The value which is assigned to the form\r\n     */\r\n    fileSize :\r\n    {\r\n      check : \"Integer\",\r\n      init : \"\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The value which is assigned to the form\r\n     */\r\n    label :\r\n    {\r\n      check : \"String\",\r\n      init : \"\",\r\n      apply : \"_applyLabel\",\r\n      event : \"changeLabel\"\r\n    },\r\n    /**\r\n     * The icon on the upload button\r\n     */\r\n    icon :\r\n    {\r\n      check : \"String\",\r\n      init : \"\",\r\n      apply : \"_applyIcon\",\r\n      event : \"changeIcon\"\r\n    }\r\n  }, \r\n\r\n  // --------------------------------------------------------------------------\r\n  // [Members]\r\n  // --------------------------------------------------------------------------\r\n\r\n  members :\r\n  {\r\n\r\n    // ------------------------------------------------------------------------\r\n    // [Modifiers]\r\n    // ------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * Value modifier. Sets the value of both the text field and\r\n     * the UploadButton. The setValue modifier of UploadButton\r\n     * throws an exception if the value is not an empty string.\r\n     *\r\n     * @param value {var} Current value\r\n     * @param old {var} Previous value\r\n     */\r\n    _applyFileName : function(value, old)\r\n    {\r\n      \r\n      // the value of the file can not be changed,\r\n      // so do not try\r\n      // this.getChildControl('button').setFileName(value);\r\n      this.getChildControl('textfield').setValue(value);\r\n    },\r\n\r\n\r\n    /**\r\n     * Upload parameter value modifier. Sets the name attribute of the\r\n     * the hidden input type=file element in UploadButton which should.\r\n     * This name is the form submission parameter name.\r\n     *\r\n     * @param value {var} Current value\r\n     * @param old {var} Previous value\r\n     */\r\n    _applyFieldName : function(value, old)\r\n    {\r\n        this.getChildControl('button').setFieldName(value);\r\n    },\r\n    /**\r\n     * Upload butotn label modifier.\r\n     *\r\n     * @param value {var} Current value\r\n     * @param old {var} Previous value\r\n     */\r\n    _applyLabel : function(value, old)\r\n    {\r\n        this.getChildControl('button').setLabel(value);\r\n    },\r\n    /**\r\n     * Upload button icon modifier.\r\n     *\r\n     * @param value {var} Current value\r\n     * @param old {var} Previous value\r\n     */\r\n    _applyIcon : function(value, old)\r\n    {\r\n        this.getChildControl('button').setIcon(value);\r\n    },\r\n\r\n    // ------------------------------------------------------------------------\r\n    // [Setters / Getters]\r\n    // ------------------------------------------------------------------------\r\n   \r\n    /**\r\n     * Returns component text field widget.\r\n     * @deprecated {0.4} Use getChildControl('textfield');\r\n     */\r\n    getTextField: function()\r\n    {\r\n      return this.getChildControl('textfield');\r\n    },\r\n\r\n    /**\r\n     * Returns component button widget. \r\n     * @deprecated {0.4} Use getChildControl('button')\r\n     */\r\n    getButton: function()\r\n    {\r\n      return this.getChildControl('button');\r\n    },\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // [Event Handlers]\r\n    // ------------------------------------------------------------------------\r\n    \r\n    /**\r\n     * If the user select a file by clicking the button, the value of\r\n     * the input type=file tag of the UploadButton changes and\r\n     * the text field is set with the value of the selected filename.\r\n     *\r\n     * @param e {Event} change value event data\r\n     * @return {void}\r\n     */\r\n    _onChangeFileName : function(e)\r\n    {\r\n      var value = e.getData();\r\n      this.setFileName(value);\r\n      this.setFileSize(this.getChildControl('button').getFileSize());\r\n    },\r\n\r\n    // ------------------------------------------------------------------------\r\n    // [Child Controls]\r\n    // ------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Create the widget child controls.\r\n     */\r\n\r\n    _createChildControlImpl: function(id) {\r\n      var control;\r\n      switch(id) {\r\n      case \"button\":\r\n        control = new uploadwidget.UploadButton(this.getFieldName(), this.getLabel(), this.getIcon());\r\n        this._add(control,{column: 1,row:0});\r\n        control.addListener(\"changeFileName\", this._onChangeFileName, this);        \r\n        break;\r\n      case \"textfield\":        \r\n        control = new qx.ui.form.TextField();\r\n        control.set({\r\n            readOnly: true\r\n        });\r\n        this._add(control,{column: 0,row:0});\r\n        break;\r\n      }\r\n      return control || this.base(arguments, id);\r\n    }\r\n  }\r\n});\n"
  ]
}