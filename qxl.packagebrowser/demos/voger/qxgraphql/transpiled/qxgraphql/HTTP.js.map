{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/voger_qxgraphql_v0_0_2/source/class/qxgraphql/HTTP.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "url",
    "setUrl",
    "__requestHeaders",
    "Map",
    "setMaxDelay",
    "setRequestHeader",
    "events",
    "properties",
    "timeout",
    "validate",
    "nullable",
    "init",
    "attempts",
    "check",
    "event",
    "members",
    "__MAX_DELAY",
    "__BASE_DELAY",
    "getRequestHeaders",
    "getRequestHeader",
    "key",
    "get",
    "value",
    "set",
    "removeRequestHeader",
    "clearRequestHeaders",
    "clear",
    "send",
    "query",
    "getAttempts",
    "request",
    "__getRequest",
    "getUrl",
    "setMethod",
    "setTimeout",
    "getTimeout",
    "forEach",
    "header",
    "setRequestData",
    "toJson",
    "__performAttempts",
    "delay",
    "getMaxDelay",
    "runs",
    "sendWithPromise",
    "error",
    "_isRetriable",
    "Promise",
    "resolve",
    "Timer",
    "once",
    "then",
    "min",
    "max",
    "Math",
    "pow",
    "newDelay",
    "floor",
    "random",
    "io",
    "Xhr",
    "includes",
    "getStatus",
    "getPhase",
    "_validateTimeout",
    "Assert",
    "assertPositiveInteger",
    "e",
    "ValidationError",
    "_validateAttempts",
    "assertTrue",
    "qxgraphql",
    "HTTP"
  ],
  "mappings": "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",
  "sourcesContent": [
    "qx.Class.define(\"qxgraphql.HTTP\", {\n  extend : qx.core.Object,\n\n  /**\n   * Basic HTTP GraphQL client\n   */\n\n  construct : function(url) {\n    this.base(arguments);\n\n    if (url) { \n      this.setUrl(url);\n    }\n\n    this.__requestHeaders = new Map();\n\n    // Maximum delay between retries 3 seconds\n    this.setMaxDelay(3000);\n\n    // set defaults\n    this.setRequestHeader(\"Accept\", \"application/json\");\n    this.setRequestHeader(\"Content-Type\", \"application/json\");\n  },\n\n  events: {\n    /**\n     * Fired when the request was successful\n     */\n    \"success\": \"qxgraphql.event.type.GraphQL\",\n\n    /**\n     * Fired when the request fails\n     */\n    \"error\": \"qxgraphql.event.type.GraphQL\"\n\n\n  },\n\n  properties: {\n    /** The timeout for asynchronous calls in milliseconds.\n     * Default (0) means no limit\n     */\n    timeout: {\n      validate: \"_validateTimeout\",\n      nullable: false,\n      init: 0\n\n    },\n\n    /**\n     * Number of communication attempts. Default is 5\n     *\n     */\n    attempts: {\n      validate: \"_validateAttempts\",\n      nullable: false,\n      init: 15\n    },\n\n    url: {\n      check: \"String\",\n      event: \"changeUrl\",\n      init: null\n    }\n  },\n\n  members: {\n\n    __requestHeaders: null,\n    \n    // maximum delay between retries is 3 seconds\n    __MAX_DELAY: null,\n\n\n    __BASE_DELAY: 50,\n\n\n    /**\n     * Returns a javascript Map() object with the headers that will be set\n     * to the request\n     *\n     */\n    getRequestHeaders: function() {\n      return this.__requestHeaders;\n    },\n\n\n    /**\n     * Returns the value of the header or `undefined` if the \n     * header is not set\n     *\n     */\n    getRequestHeader: function(key) {\n      this.getRequestHeaders().get(key);\n    },\n\n\n    /**\n     * Adds a request key to the requests. Case sensitive. Keys with different \n     * casing will produce duplicate entries.\n     * @param key {String} The name of the header whose value is to be set.\n     * @param value {String}  The value to set as the body of the header.\n     */\n    setRequestHeader: function(key, value) {\n      this.__requestHeaders.set(key, value);\n    },\n\n    /**\n     * Removes a request header\n     * @param key {String} The header to be removed\n     */\n    removeRequestHeader: function(key) {\n      this.getRequestHeaders().delete(key);\n    },\n\n\n    /**\n     * Clears all the request headers.\n     *\n     */\n    clearRequestHeaders: function() {\n      this.getRequestHeaders().clear();\n    },\n\n\n    /**\n     * Sends the query and returns a promise.\n     * @query {String} The query to send\n     * @attempts {Integer}  The number of attempts to try sending the query\n     *                      after failure. Must be a positive integer greater\n     *                      than 0. Default is the value of the property attempts\n     * @return {qx.Promise} A promise that resolves with the result of the request \n     * \n     */\n    send: function(query, attempts = this.getAttempts()) {\n      const request = this.__getRequest();\n      request.setUrl(this.getUrl());\n\n      // only POST is supported for now\n      request.setMethod(\"POST\");\n      request.setTimeout(this.getTimeout());\n      this.getRequestHeaders().forEach((value, header) => { \n        request.setRequestHeader(header, value) \n      });\n\n\n      request.setRequestData(query.toJson());\n\n      return this.__performAttempts(request, attempts);\n    },\n\n    /**\n     * Set the maximum delay between retries\n     * \n     * @delay {Integer} The delay to set\n     */\n    setMaxDelay: function(delay) {\n      this.__MAX_DELAY = delay;\n    },\n\n    /**\n     * Get the maximum delay between retries\n     *\n     * @return {Integer} the maximum delay between retries\n     */\n    getMaxDelay: function(delay) {\n      return this.__MAX_DELAY;\n    },\n\n    /**\n     * Perform the send attempts. If the request fails with a \n     * retirable error, then it is tried again using backoff with jitter.\n     *\n     * @request {qx.io.request.AbstractRequest} The request to attempt\n     * @attempts {Integer} The number of attempts\n     * @delay {Integer} The first delay between the retries.\n     * @runs {Integer} The times it has run so far. This parametter is used to help \n     *                 with the backtracking algorithm and the deafult value of `1`\n     *                 shouldn't be changed.\n     * @return {qx.Promise} A promise that resolves with the result of the request \n     */\n    __performAttempts: function(request, attempts, delay = this.__BASE_DELAY, runs = 1) {\n      return request.sendWithPromise().catch((error) => {\n        if (attempts === 1) {\n          throw error;\n        }\n\n        if (!this._isRetriable(request)) {\n          throw error;\n        }\n\n        // return a promise that waits for `delay` milisecconds\n        // then returns the __performAttempts methos\n        return new qx.Promise(function(resolve) {\n          qx.event.Timer.once(function() {\n            resolve(delay);\n          }, this, delay)\n        })\n        .then(() => { \n\n          // calculate the new delay that may be needed for the next iteration\n          const min = 0;\n          const max = Math.min(this.getMaxDelay(), this.__BASE_DELAY * Math.pow(2, runs));\n          const newDelay = Math.floor(Math.random() * (max - min + 1)) + min;\n\n          return this.__performAttempts(request, attempts - 1, newDelay, runs + 1);\n        })\n      });\n    },\n\n\n    /**\n     * Return a new request object\n     *\n     */\n    __getRequest: function() {\n      return new qx.io.request.Xhr();\n    },\n\n    /**\n     * Returns true if the `request` status is one of the \n     * HTTP status codes that makes sense to retry sending the \n     * request or if the request failed with timeout.\n     * \n     * @param {qx.io.request.AbstractRequest} The request to check \n     * @return {Boolean} Whether is retriable or not\n     */\n    _isRetriable: function(request) {\n      return [0, 408, 502, 503, 504].includes(request.getStatus()) || request.getPhase() === \"timeout\";\n    },\n\n\n    _validateTimeout: function(value) {\n      try {\n        qx.core.Assert.assertPositiveInteger(value);\n      } catch (e) {\n        throw new qx.core.ValidationError(`ValidationError`, \n          `Time out value must be a positive integer. Found: ${value}.`);\n      }\n    },\n\n    _validateAttempts: function(value) {\n      try {\n        qx.core.Assert.assertPositiveInteger(value);\n        qx.core.Assert.assertTrue(value > 0);\n      } catch (e) {\n        throw new qx.core.ValidationError(`ValidationError`,\n        `Attempts must be a natural number greater than 0. Found: ${value}.`);\n      }\n    }\n  }\n});\n"
  ]
}