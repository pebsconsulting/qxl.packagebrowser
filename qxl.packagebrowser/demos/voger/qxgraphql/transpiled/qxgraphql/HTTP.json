{
  "className": "qxgraphql.HTTP",
  "packageName": "qxgraphql",
  "name": "HTTP",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 252,
        "column": 3
      }
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 8,
        "column": 14
      },
      "end": {
        "line": 23,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Basic HTTP GraphQL client</p>"
        }
      ]
    }
  },
  "events": {
    "success": {
      "location": {
        "start": {
          "line": 29,
          "column": 4
        },
        "end": {
          "line": 29,
          "column": 45
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the request was successful</p>"
          }
        ]
      },
      "name": "success",
      "type": "qxgraphql.event.type.GraphQL"
    },
    "error": {
      "location": {
        "start": {
          "line": 34,
          "column": 4
        },
        "end": {
          "line": 34,
          "column": 43
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the request fails</p>"
          }
        ]
      },
      "name": "error",
      "type": "qxgraphql.event.type.GraphQL"
    }
  },
  "properties": {
    "timeout": {
      "location": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The timeout for asynchronous calls in milliseconds.\n Default (0) means no limit</p>"
          }
        ]
      },
      "name": "timeout",
      "propertyType": "new",
      "nullable": false,
      "init": 0,
      "allowNull": false,
      "defaultValue": 0
    },
    "attempts": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Number of communication attempts. Default is 5</p>"
          }
        ]
      },
      "name": "attempts",
      "propertyType": "new",
      "nullable": false,
      "init": 15,
      "allowNull": false,
      "defaultValue": 15
    },
    "url": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 64,
          "column": 5
        }
      },
      "name": "url",
      "propertyType": "new",
      "event": "changeUrl",
      "check": "String"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__requestHeaders": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__MAX_DELAY": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 21
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "__BASE_DELAY": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getRequestHeaders": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 85,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a javascript Map() object with the headers that will be set\n to the request</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRequestHeader": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the value of the header or <code>undefined</code> if the\n header is not set</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRequestHeader": {
      "location": {
        "start": {
          "line": 104,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a request key to the requests. Case sensitive. Keys with different\n casing will produce duplicate entries.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} The name of the header whose value is to be set.",
            "paramName": "key",
            "description": " The name of the header whose value is to be set.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String}  The value to set as the body of the header.",
            "paramName": "value",
            "description": "  The value to set as the body of the header.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeRequestHeader": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 114,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a request header</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} The header to be removed",
            "paramName": "key",
            "description": " The header to be removed",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearRequestHeaders": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears all the request headers.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "send": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends the query and returns a promise.</p>"
          }
        ],
        "@query": [
          {
            "name": "@query",
            "body": "{String} The query to send"
          }
        ],
        "@attempts": [
          {
            "name": "@attempts",
            "body": "{Integer}  The number of attempts to try sending the query\n                      after failure. Must be a positive integer greater\n                      than 0. Default is the value of the property attempts"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} A promise that resolves with the result of the request",
            "type": "qx.Promise",
            "description": " A promise that resolves with the result of the request"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setMaxDelay": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 159,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the maximum delay between retries</p>"
          }
        ],
        "@delay": [
          {
            "name": "@delay",
            "body": "{Integer} The delay to set"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMaxDelay": {
      "location": {
        "start": {
          "line": 166,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the maximum delay between retries</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the maximum delay between retries",
            "type": "Integer",
            "description": " the maximum delay between retries"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__performAttempts": {
      "location": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 209,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Perform the send attempts. If the request fails with a\n retirable error, then it is tried again using backoff with jitter.</p>"
          }
        ],
        "@request": [
          {
            "name": "@request",
            "body": "{qx.io.request.AbstractRequest} The request to attempt"
          }
        ],
        "@attempts": [
          {
            "name": "@attempts",
            "body": "{Integer} The number of attempts"
          }
        ],
        "@delay": [
          {
            "name": "@delay",
            "body": "{Integer} The first delay between the retries."
          }
        ],
        "@runs": [
          {
            "name": "@runs",
            "body": "{Integer} The times it has run so far. This parametter is used to help\n                 with the backtracking algorithm and the deafult value of <code>1</code>\n                 shouldn't be changed."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} A promise that resolves with the result of the request",
            "type": "qx.Promise",
            "description": " A promise that resolves with the result of the request"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getRequest": {
      "location": {
        "start": {
          "line": 216,
          "column": 4
        },
        "end": {
          "line": 218,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a new request object</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_isRetriable": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true if the <code>request</code> status is one of the\n HTTP status codes that makes sense to retry sending the\n request or if the request failed with timeout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.request.AbstractRequest} The request to check",
            "paramName": "The",
            "description": "request to check",
            "type": "qx.io.request.AbstractRequest"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether is retriable or not",
            "type": "Boolean",
            "description": " Whether is retriable or not"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_validateTimeout": {
      "location": {
        "start": {
          "line": 233,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "type": "function",
      "access": "protected"
    },
    "_validateAttempts": {
      "location": {
        "start": {
          "line": 242,
          "column": 4
        },
        "end": {
          "line": 250,
          "column": 5
        }
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTimeout": {
      "type": "function",
      "name": "getTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for timeout"
          }
        ]
      }
    },
    "setTimeout": {
      "type": "function",
      "name": "setTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for timeout"
          }
        ]
      }
    },
    "resetTimeout": {
      "type": "function",
      "name": "resetTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>timeout</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ]
      }
    },
    "getAttempts": {
      "type": "function",
      "name": "getAttempts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>attempts</code>.\n\nFor further details take a look at the property definition: {@link #attempts}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for attempts"
          }
        ]
      }
    },
    "setAttempts": {
      "type": "function",
      "name": "setAttempts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>attempts</code>.\n\nFor further details take a look at the property definition: {@link #attempts}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for attempts"
          }
        ]
      }
    },
    "resetAttempts": {
      "type": "function",
      "name": "resetAttempts",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>attempts</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #attempts}."
          }
        ]
      }
    },
    "getUrl": {
      "type": "function",
      "name": "getUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for url"
          }
        ]
      }
    },
    "setUrl": {
      "type": "function",
      "name": "setUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for url"
          }
        ]
      }
    },
    "resetUrl": {
      "type": "function",
      "name": "resetUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>url</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ]
      }
    }
  },
  "descendants": []
}