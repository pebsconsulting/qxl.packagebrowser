{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/voger_qxgraphql_v0_0_2/source/class/qxgraphql/Query.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "query",
    "variables",
    "_compressor",
    "qxgraphql",
    "GraphqlQueryCompress",
    "setQuery",
    "setVariables",
    "properties",
    "check",
    "init",
    "event",
    "transform",
    "nullable",
    "validate",
    "members",
    "toJson",
    "JSON",
    "stringify",
    "__jsonReplacer",
    "getVariablesJson",
    "model",
    "getVariables",
    "json",
    "util",
    "Serializer",
    "toJSON",
    "getQuery",
    "key",
    "value",
    "undefined",
    "_transformVariables",
    "val",
    "includes",
    "data",
    "marshal",
    "Json",
    "createModel",
    "_validateVariables",
    "lang",
    "Type",
    "isObject",
    "ValidationError",
    "_transformQuery",
    "compress",
    "Query"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/**\n * The main query object. It holds and transforms the main query as a \n * String. The query string is minimized using https://www.npmjs.com/package/graphql-query-compress\n\n *\n */\nqx.Class.define(\"qxgraphql.Query\", {\n  extend: qx.core.Object,\n\n  construct: function(query = \"\", variables) {\n    this.base(arguments);\n\n    // First load the compressor\n    this._compressor = new qxgraphql.GraphqlQueryCompress();\n\n    if (query) {\n      this.setQuery(query);\n    }\n    if (variables) {\n      this.setVariables(variables);\n    }\n  },\n\n  properties: {\n    query:\n    {\n      check: \"String\",\n      init: \"\",\n      event: \"changeQuery\",\n      transform: \"_transformQuery\"\n    },\n\n    // Can be created from an object literal or a JSON\n    variables:\n    {\n      check: \"Object\",\n      init: null,\n      nullable: true,\n      event: \"changeVariables\",\n      transform: \"_transformVariables\",\n      validate: \"_validateVariables\"\n    }\n  },\n  members:\n  {\n\n    _compressor: null,\n    /**\n     * Returns a JSON representation of the current object.\n     * This is the method to use when serializing the query\n     * object to JSON and send it to the server.\n     */\n    toJson: function() {\n      return JSON.stringify(this, this.__jsonReplacer);\n    },\n\n    /**\n     * Returns a Json representation of the variables\n     * If the variables value is null, it returns null\n     */\n    getVariablesJson: function() {\n      var model = this.getVariables();\n      var json = null;\n      if (model !== null) {\n        json = qx.util.Serializer.toJson(model);\n      }\n      return json;\n    },\n\n    /**\n     * @internal\n     * The standard toJSON property of the object\n     *\n     */\n    toJSON: function() {\n      return {\n        query: this.getQuery(),\n        variables: this.getVariables()\n      };\n    },\n\n    __jsonReplacer: function(key, value) {\n      // Special case. If the variables key is an object, return it's JSON\n      // representation, otherwise remove that key from the final JSON\n      if (key === \"variables\") {\n        return value !== null ? qx.util.Serializer.toJson(value) : undefined;\n      }\n      // everything else s returned as it is\n      return value;\n    },\n\n    _transformVariables: function(val) {\n      var model = null;\n      if (![null, undefined].includes(val)) {\n        model = qx.data.marshal.Json.createModel(val);\n      }\n      return model;\n    },\n\n    _validateVariables: function(val) {\n      if (!qx.lang.Type.isObject(val) && (val !== null)) {\n        throw new qx.core.ValidationError(\n          \"Validation Error: \" + val + \" is not an object or null.\"\n        );\n      }\n    },\n\n    _transformQuery: function(val) {\n      return this._compressor.compress(val);\n    }\n  }\n});\n"
  ]
}