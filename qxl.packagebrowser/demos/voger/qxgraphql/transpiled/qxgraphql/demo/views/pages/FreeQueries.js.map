{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/voger_qxgraphql_v0_0_2/source/class/qxgraphql/demo/views/pages/FreeQueries.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "tabview",
    "Page",
    "construct",
    "label",
    "icon",
    "init",
    "events",
    "properties",
    "service",
    "deferredInit",
    "event",
    "members",
    "__formController",
    "__resultController",
    "setLayout",
    "layout",
    "Dock",
    "initService",
    "qxgraphql",
    "HTTP",
    "urlForm",
    "__createUrlForm",
    "add",
    "form",
    "renderer",
    "Single",
    "edge",
    "buttonsField",
    "__createButtonsField",
    "height",
    "resultField",
    "__createResultField",
    "width",
    "queryForm",
    "__createQueryForm",
    "renderedForm",
    "demo",
    "FreeQueries",
    "Form",
    "urlField",
    "TextField",
    "setRequired",
    "getService",
    "bind",
    "setValue",
    "queryBox",
    "TextArea",
    "flex",
    "variablesBox",
    "addListener",
    "setValid",
    "execButton",
    "Button",
    "setFont",
    "bom",
    "Font",
    "fromString",
    "setCenter",
    "validate",
    "getUrl",
    "resultModel",
    "getModel",
    "formModel",
    "send",
    "request",
    "response",
    "getResponse",
    "result",
    "JSON",
    "stringify",
    "setResult",
    "toString",
    "addButton",
    "delegate",
    "getModelClass",
    "object",
    "Query",
    "queryObject",
    "marshaler",
    "data",
    "marshal",
    "Json",
    "toClass",
    "model",
    "toModel",
    "formController",
    "controller",
    "model2query",
    "converter",
    "source",
    "target",
    "getValue",
    "addBindingOptions",
    "model2variables",
    "_this",
    "variables2model",
    "onSetFail",
    "exception",
    "resetVariables",
    "parse",
    "e",
    "log",
    "Logger",
    "error",
    "setMarginTop",
    "setReadOnly",
    "createModel",
    "Object",
    "addTarget",
    "views",
    "ButtonsContainer",
    "pages"
  ],
  "mappings": "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",
  "sourcesContent": [
    "qx.Class.define(\"qxgraphql.demo.views.pages.FreeQueries\", {\n  extend: qx.ui.tabview.Page,\n\n  construct: function(label, icon) {\n    this.base(arguments, label, icon);\n    this.init();\n  },\n\n  events: {\n    \"changeService\" :  \"qx.event.type.Data\"\n  },\n\n  properties: {\n    service: {\n      deferredInit: true,\n      event: \"changeService\"\n    }\n  },\n\n  members: {\n    __formController: null,\n    __resultController: null,\n\n    init: function() {\n      this.setLayout(new qx.ui.layout.Dock(30));\n      this.initService(new qxgraphql.HTTP());\n\n      var urlForm = this.__createUrlForm();\n      this.add(new qx.ui.form.renderer.Single(urlForm), {edge: \"north\"});\n\n      var buttonsField = this.__createButtonsField();\n      this.add(buttonsField, {edge: \"south\", height: \"10%\"});\n\n      // add the result field\n      var resultField = this.__createResultField();\n      this.add(resultField, {edge: \"east\", width: \"50%\"});\n\n      var queryForm = this.__createQueryForm();\n      var renderedForm = new qxgraphql.demo.layout.renderer.FreeQueries(queryForm);\n      this.add(renderedForm, {edge: \"west\", width: \"50%\"});\n\n    },\n\n    __createUrlForm: function() {\n      var form = new qx.ui.form.Form();\n      var urlField = new qx.ui.form.TextField();\n\n      urlField.setRequired(true);\n\n      // if service is set then setup binding\n      const service = this.getService();\n      urlField.bind(\"changeValue\", service, \"url\");\n\n      form.add(urlField, \"Server Address\");\n\n\n      // FIXME: next line should be removed after we finish with this\n      urlField.setValue(\"https://api.graph.cool/simple/v1/cixos23120m0n0173veiiwrjr\");\n\n      return form;\n    },\n\n    __createQueryForm: function() {\n      var form = new qx.ui.form.Form();\n\n      // Add a box to type the queries\n      var queryBox = new qx.ui.form.TextArea();\n      queryBox.setRequired(true);\n      form.add(queryBox, \"Query\", null, \"query\", null, {flex: 4});\n\n      // Add a box to type the variables\n      var variablesBox = new qx.ui.form.TextArea();\n\n      variablesBox.addListener(\"input\", function() {\n        variablesBox.setValid(true);\n      }, this);\n\n      form.add(variablesBox, \"Variables\", null, \"variables\", null, {flex: 1});\n\n      // Add a button to perform the query\n      var execButton = new qx.ui.form.Button(\"\\u25B6\");\n      execButton.setFont(qx.bom.Font.fromString(\"24px sans-serif bold\"));\n      execButton.setCenter(true);\n\n      execButton.addListener(\"execute\", async function() {\n        // check that the query form is valid and url is not a falsy value\n        const service = this.getService();\n        if (form.validate() && service.getUrl()) {\n          const resultModel = this.__resultController.getModel();\n\n          try {\n            const formModel = this.__formController.getModel();\n\n            const request = await service.send(formModel);\n            const response = request.getResponse(); \n            const result = JSON.stringify(response, null, 2);\n            resultModel.setResult(result);\n          } catch (error) {\n            const toString = error.toString();\n            resultModel.setResult(toString);\n          }\n        }\n      }, this);\n      form.addButton(execButton);\n\n      // create form model from qxgraphql.Query\n      var delegate = {\n        getModelClass: function(properties, object) {\n          return qxgraphql.Query;\n        }\n      };\n\n      // Create a model based on the query Object\n      var queryObject = new qxgraphql.Query();\n      var marshaler = new qx.data.marshal.Json(delegate);\n      marshaler.toClass(queryObject);\n      var model = marshaler.toModel(queryObject);\n\n      var formController = this.__formController = new qx.data.controller.Form(model, form);\n\n\n      var model2query = {\n        converter: function(data, model, source, target) {\n          // disable binding back\n          return target.getValue();\n        }\n      };\n\n      formController.addBindingOptions(\"query\", model2query);\n\n      var model2variables = {\n        converter: function(data, model, source, target) {\n          return target.getValue();\n        }\n      }; \n\n      var _this = this;\n      var variables2model = {\n        onSetFail: function(exception) {\n          variablesBox.setValid(false);\n          formController.getModel().resetVariables();\n        },\n\n\n        converter: function(data) {\n          var result = null;\n\n          if (data === \"\") {\n            result = null;\n          } else {\n            try {\n              result = JSON.parse(data);\n            } catch (e) {\n              qx.log.Logger.error(_this, \"Cannot parse variables data from: \", data);\n              // let the model reject it so it can trigger onSetFail\n              result = data;\n            }\n          }\n          return result;\n        }\n      };\n\n      formController.addBindingOptions(\"variables\", model2variables, variables2model);\n      return form;\n    },\n\n    __createResultField: function() {\n      var resultField = new qx.ui.form.TextArea();\n      resultField.setMarginTop(27);\n      resultField.setReadOnly(true);\n\n      var model = qx.data.marshal.Json.createModel({result: null});\n      this.__resultController = new qx.data.controller.Object(model);\n\n      this.__resultController.addTarget(resultField, \"value\", \"result\");\n      return resultField;\n    },\n\n    __createButtonsField: function() {\n      return new qxgraphql.demo.views.ButtonsContainer(this);\n    }\n\n  }\n});\n"
  ]
}