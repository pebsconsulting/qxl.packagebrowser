{
  "className": "qxl.testrunner.runner.TestItem",
  "packageName": "qxl.testrunner.runner",
  "name": "TestItem",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 20,
        "column": 0
      },
      "end": {
        "line": 236,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Common superclass for test suite model items</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 24,
        "column": 14
      },
      "end": {
        "line": 27,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "properties": {
    "state": {
      "location": {
        "start": {
          "line": 35,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The item's state. The state of a parent item reflects its children:\n  If one or more children have \"error\" or \"failure\" states, so will the\n  parent.</p>"
          }
        ]
      },
      "name": "state",
      "propertyType": "new",
      "event": "changeState",
      "apply": "_applyState",
      "init": "start",
      "defaultValue": "start"
    },
    "previousState": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 50,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The item's previous state. This is used to preserve the correct state value\n for asynchronous tests that have an intermediate \"wait\" value.</p>"
          }
        ]
      },
      "name": "previousState",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true
    },
    "exceptions": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Any exceptions caught during a test's execution.</p>"
          }
        ]
      },
      "name": "exceptions",
      "propertyType": "new",
      "event": "changeExceptions",
      "nullable": true,
      "init": [],
      "allowNull": true,
      "defaultValue": []
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "statics": {
    "sortFunction": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compare function for test model items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "aItem {qxl.testrunner.runner.TestItem} First item",
            "paramName": "aItem",
            "description": " First item",
            "type": "qxl.testrunner.runner.TestItem"
          },
          {
            "name": "@param",
            "body": "bItem {qxl.testrunner.runner.TestItem} Second item",
            "paramName": "bItem",
            "description": " Second item",
            "type": "qxl.testrunner.runner.TestItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Comparison result",
            "type": "Integer",
            "description": " Comparison result"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "getModel": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 105,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns this instance. Workaround needed to bind each child item's state\n to the parent's.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} This model object",
            "type": "Object",
            "description": " This model object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFullName": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the fully qualified name of a model item, e.g.\n \"someApp.test.foo.Bar:testBaz\"</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The item's fully qualified name",
            "type": "String",
            "description": " The item's fully qualified name"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getType": {
      "location": {
        "start": {
          "line": 123,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the item's type (\"package\", \"class\" or \"test\")</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The item's type",
            "type": "String",
            "description": " The item's type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sortChildren": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 145,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sorts the item's children. Packages are always listed before classes.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMessage": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 184,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Serializes and returns any exceptions caught during the test's execution</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Exceptions",
            "type": "String",
            "description": " Exceptions"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getStackTrace": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 214,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns stack trace information for a given exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ex {Error} Exception",
            "paramName": "ex",
            "description": " Exception",
            "type": "Error"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Stack trace information",
            "type": "String",
            "description": " Stack trace information"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyState": {
      "location": {
        "start": {
          "line": 223,
          "column": 4
        },
        "end": {
          "line": 227,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Save the previous value when the state changes</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newState {String} New state value",
            "paramName": "newState",
            "description": " New state value",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "oldState {String} Previous state value",
            "paramName": "oldState",
            "description": " Previous state value",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "state"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getState": {
      "type": "function",
      "name": "getState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for state"
          }
        ]
      }
    },
    "setState": {
      "type": "function",
      "name": "setState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for state"
          }
        ]
      }
    },
    "resetState": {
      "type": "function",
      "name": "resetState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>state</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ]
      }
    },
    "getPreviousState": {
      "type": "function",
      "name": "getPreviousState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>previousState</code>.\n\nFor further details take a look at the property definition: {@link #previousState}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for previousState"
          }
        ]
      }
    },
    "setPreviousState": {
      "type": "function",
      "name": "setPreviousState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>previousState</code>.\n\nFor further details take a look at the property definition: {@link #previousState}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for previousState"
          }
        ]
      }
    },
    "resetPreviousState": {
      "type": "function",
      "name": "resetPreviousState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>previousState</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #previousState}."
          }
        ]
      }
    },
    "getExceptions": {
      "type": "function",
      "name": "getExceptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>exceptions</code>.\n\nFor further details take a look at the property definition: {@link #exceptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for exceptions"
          }
        ]
      }
    },
    "setExceptions": {
      "type": "function",
      "name": "setExceptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>exceptions</code>.\n\nFor further details take a look at the property definition: {@link #exceptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for exceptions"
          }
        ]
      }
    },
    "resetExceptions": {
      "type": "function",
      "name": "resetExceptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>exceptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #exceptions}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 230,
        "column": 13
      },
      "end": {
        "line": 235,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}