{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_qxl_testrunner_v6_0_1/source/class/qxl/testrunner/runner/ModelUtil.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "statics",
    "createModelData",
    "testRep",
    "data",
    "i",
    "l",
    "length",
    "nameSpace",
    "classname",
    "split",
    "testList",
    "tests",
    "sort",
    "x",
    "y",
    "qxl",
    "testrunner",
    "runner",
    "ModelUtil",
    "addChainToMap",
    "concat",
    "getItemsByProperty",
    "model",
    "property",
    "value",
    "propertyName",
    "lang",
    "String",
    "firstUp",
    "push",
    "getChildren",
    "kids",
    "child",
    "getItem",
    "arguments",
    "callee",
    "getItemByFullName",
    "fullName",
    "found",
    "addDataFields",
    "parent",
    "getName",
    "mType",
    "getType",
    "sortChildren",
    "core",
    "Environment",
    "get",
    "bind",
    "converter",
    "getState",
    "nsArr",
    "obj",
    "list",
    "next",
    "shift",
    "children",
    "name",
    "getNextSiblingOf",
    "node",
    "siblings",
    "index",
    "indexOf",
    "hasTestClassWithMixin",
    "mixin",
    "win",
    "autWindow",
    "window",
    "clazz",
    "getByName",
    "getFullName",
    "hasMixin"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Utilities for creating and querying the test (suite) model.\n */\n\nqx.Class.define(\"qxl.testrunner.runner.ModelUtil\", {\n\n  type : \"static\",\n\n  statics :\n  {\n\n    /**\n     * Creates a nested map for the test namespace from the flat list of tests\n     *\n     * @param testRep {Object} Test suite object obtained by parsing the JSON\n     * returned by {@link qx.dev.unit.TestLoader:getTestDescriptions}\n     * @return {Object} Test suite object\n     */\n    createModelData : function(testRep) {\n      var data = {};\n      for (var i=0, l=testRep.length; i<l; i++) {\n        var nameSpace = testRep[i].classname.split(\".\");\n        var testList = testRep[i].tests;\n        testList.sort();\n        for (var x=0, y=testList.length; x<y; x++) {\n          qxl.testrunner.runner.ModelUtil.addChainToMap(nameSpace.concat(testList[x]), data);\n        }\n      }\n      return data;\n    },\n\n\n    /**\n     * Recursively searches a model for all items with a given property/value\n     * combination\n     *\n     * @param model {Object} The test model to search\n     * @param property {String} Property name\n     * @param value {var} Property value\n     * @return {Object[]} Array of matching model items\n     */\n    getItemsByProperty : function(model, property, value) {\n      var propertyName = qx.lang.String.firstUp(property);\n      var testList = [];\n      if (model[\"get\" + propertyName] && model[\"get\" + propertyName]() === value) {\n        testList.push(model);\n      }\n\n      if (!model.getChildren) {\n        return testList;\n      }\n\n      var kids = model.getChildren();\n      for (var i=0, l=kids.length; i<l; i++) {\n        var child = kids.getItem(i);\n        testList = testList.concat(arguments.callee(child, property, value));\n      }\n      return testList;\n    },\n\n\n    /**\n     * Finds a model item by its full path name\n     *\n     * @param model {Object} The test model to search\n     * @param fullName {String} The item's name\n     * @return {Object|null} The matching item or null if there is no match\n     */\n    getItemByFullName : function(model, fullName) {\n      if (model.fullName == fullName) {\n        return model;\n      }\n      if (model.getChildren) {\n        var kids = model.getChildren();\n        for (var i=0, l=kids.length; i<l; i++) {\n          var child = kids.getItem(i);\n          var found = arguments.callee(child, fullName);\n          if (found) {\n            return found;\n          }\n        }\n      }\n      return null;\n    },\n\n\n    /**\n     * Adds additional data fields to the model items:\n     * parent : reference to the parent item\n     *\n     * @param model {Object} The model to process\n     */\n    addDataFields : function(model) {\n      if (!model.parent) {\n        model.fullName = model.getName();\n      }\n\n      if (model.getChildren) {\n        var mType = model.getType();\n        if (mType == \"package\" || mType == \"class\") {\n          model.sortChildren();\n        }\n        var kids = model.getChildren();\n        for (var i=0, l=kids.length; i<l; i++) {\n          var child = kids.getItem(i);\n          child.parent = model;\n\n          if (child.getType() == \"test\") {\n            child.fullName = model.fullName + \":\" + child.getName();\n          } else {\n            child.fullName = model.fullName + \".\" + child.getName();\n          }\n\n          arguments.callee(child);\n\n          // skip binding the children's state to the parent in old IEs to\n          // accelerate application startup\n          if (!(qx.core.Environment.get(\"browser.name\") === \"ie\" &&\n              qx.core.Environment.get(\"browser.version\") < 9)) {\n            child.bind(\"state\", model, \"state\", {\n              converter : function(data, model) {\n                if (model.getState() == \"failure\" || model.getState() == \"error\" ||\n                  data == \"start\" || data == \"wait\") {\n                  return model.getState();\n                }\n                return data;\n              }\n            });\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Adds nested keys to a map, e.g.: addChainToMap([\"foo\", \"bar\", \"baz\"], {})\n     * creates the following structure:\n     * {\n     *   \"foo\" :\n     *   {\n     *     \"bar\" :\n     *     {\n     *       \"baz\" : {}\n     *     }\n     *   }\n     * }\n     *\n     * @param nsArr {String[]} Array of key names\n     * @param obj {Map} The initial map\n     */\n    addChainToMap : function(nsArr, obj) {\n      if (nsArr.length == 0) {\n        return;\n      }\n\n      var list = nsArr.concat();\n      var next = list.shift();\n\n      if (!obj.children) {\n        obj.children = [];\n      }\n\n      var found = false;\n      for (var i=0, l=obj.children.length; i<l; i++) {\n        if (obj.children[i].name === next) {\n          found = obj.children[i];\n          break;\n        }\n      }\n\n      if (!found) {\n        found = {\n          name : next\n        };\n        obj.children.push(found);\n      }\n\n      arguments.callee(list, found);\n    },\n\n\n    /**\n     * Returns the following sibling of a given model item or null if there isn't\n     * one.\n     *\n     * @param node {Object} Model node\n     * @return {Object|null} Following sibling\n     */\n    getNextSiblingOf : function(node) {\n      if (!node.parent) {\n        return null;\n      }\n      var siblings = node.parent.getChildren();\n      if (!siblings) {\n        return null;\n      }\n      var index = siblings.indexOf(node);\n      if (index < siblings.length - 1) {\n        return siblings.getItem(index + 1);\n      }\n      return null;\n    },\n\n\n    /**\n     * Recursively traverses a model tree and checks if one of\n     * the test classes includes the given mixin.\n     *\n     * @param node {qx.core.Object} test model (root) node\n     * @param mixin {qx.Mixin}  mixin to look for\n     * @param win {Window?} AUT window. Default: Top-level (test runner)\n     * @return {Boolean} <code>true</code> if at least one test class\n     * in the model includes the mixin\n     */\n    hasTestClassWithMixin : function(node, mixin, win) {\n      var autWindow = win || window;\n      var children = node.getChildren ? node.getChildren() : [];\n      for (var i=0, l=children.length; i<l; i++) {\n        var child = children.getItem(i);\n        if (child.getType() == \"class\") {\n          var clazz = autWindow.qx.Class.getByName(child.getFullName());\n          if (autWindow.qx.Class.hasMixin(clazz, mixin)) {\n            return true;\n          }\n        } else if (arguments.callee(child, mixin, win)) {\n            return true;\n          }\n      }\n\n      return false;\n    }\n  }\n});\n"
  ]
}