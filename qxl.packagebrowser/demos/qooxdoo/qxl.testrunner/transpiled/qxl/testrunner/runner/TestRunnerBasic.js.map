{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_qxl_testrunner_v6_0_1/source/class/qxl/testrunner/runner/TestRunnerBasic.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "start",
    "init",
    "Init",
    "BaseInit",
    "runner",
    "getApplication",
    "_loadExternalTests",
    "view",
    "toggleAllTests",
    "construct",
    "Environment",
    "get",
    "event",
    "GlobalError",
    "setErrorHandler",
    "_handleGlobalError",
    "__testsInView",
    "viewSetting",
    "viewClass",
    "getByName",
    "include",
    "qxl",
    "testrunner",
    "MPerformance",
    "addListener",
    "_runTests",
    "_stopTests",
    "bind",
    "data",
    "SingleValueBinding",
    "_origin",
    "_testNameSpace",
    "_getTestNameSpace",
    "_loadTests",
    "properties",
    "testSuiteState",
    "check",
    "testCount",
    "nullable",
    "testModel",
    "selectedTests",
    "apply",
    "members",
    "loader",
    "_testParts",
    "_externalTestClasses",
    "location",
    "search",
    "params",
    "indexOf",
    "substr",
    "_resetSuite",
    "dispose",
    "setTestModel",
    "origin",
    "_loadInlineTests",
    "nameSpace",
    "setTestSuiteState",
    "dev",
    "unit",
    "TestLoaderBasic",
    "_wrapAssertions",
    "_getTestModel",
    "_addTestClass",
    "membersMap",
    "testNameSpace",
    "prefix",
    "testClassName",
    "classname",
    "testClass",
    "_defineTestClass",
    "getSuite",
    "add",
    "qxClass",
    "TestCase",
    "window",
    "testDefinitions",
    "Array",
    "i",
    "l",
    "length",
    "__getTestRep",
    "testRep",
    "getTestDescriptions",
    "error",
    "lang",
    "Json",
    "parse",
    "currentTestData",
    "oldModel",
    "getTestModel",
    "tests",
    "modelData",
    "ModelUtil",
    "createModelData",
    "delegate",
    "getModelSuperClass",
    "TestItem",
    "marshal",
    "toClass",
    "children",
    "model",
    "toModel",
    "addDataFields",
    "autWindow",
    "win",
    "tCase",
    "prototype",
    "prop",
    "originalName",
    "body",
    "Function",
    "getTestSuiteState",
    "runTests",
    "self",
    "suiteState",
    "testList",
    "setTimeout",
    "exit",
    "currentTest",
    "shift",
    "resetState",
    "setTestCount",
    "className",
    "parent",
    "fullName",
    "functionName",
    "getName",
    "testResult",
    "__initTestResult",
    "java",
    "System",
    "_getTestResult",
    "TestResult",
    "e",
    "test",
    "getData",
    "getFullName",
    "getState",
    "setState",
    "getPreviousState",
    "setExceptions",
    "includes",
    "addTestResult",
    "push",
    "_onTestWait",
    "_onTestFailure",
    "_onTestError",
    "_onTestSkip",
    "_onTestEnd",
    "_onTestEndMeasurement",
    "ev",
    "__addExceptions",
    "state",
    "Timer",
    "once",
    "url",
    "measureData",
    "exception",
    "testname",
    "browsername",
    "browserversion",
    "osname",
    "osversion",
    "parsedUri",
    "util",
    "Uri",
    "parseUri",
    "href",
    "queryKey",
    "branch",
    "toParameter",
    "req",
    "bom",
    "request",
    "Script",
    "open",
    "send",
    "exceptions",
    "oldEx",
    "getExceptions",
    "newEx",
    "concat",
    "newExMsg",
    "toString",
    "dupe",
    "j",
    "m",
    "oldExMsg",
    "_applySelectedTests",
    "value",
    "old",
    "removeListener",
    "_onChangeTestSelection",
    "_getFlatTestList",
    "getTestCount",
    "resetTestCount",
    "selection",
    "getSelectedTests",
    "item",
    "getItem",
    "testsFromItem",
    "getItemsByProperty",
    "ex",
    "destruct",
    "removeAllBindings",
    "_disposeArray",
    "_disposeObjects",
    "TestRunnerBasic"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * The TestRunner is responsible for loading the test classes and keeping track\n * of the test suite's state.\n *\n */\nqx.Class.define(\"qxl.testrunner.runner.TestRunnerBasic\", {\n\n  extend : qx.core.Object,\n\n  statics :\n  {\n    /**\n     * Load test suite defined by qxl.testrunner.define()\n     */\n    start : function() {\n      var init = qx.core.Init ? qx.core.Init : qx.core.BaseInit;\n      var runner = init.getApplication().runner;\n      runner._loadExternalTests();\n      if (typeof runner.view.toggleAllTests == \"function\") {\n        runner.view.toggleAllTests(true);\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n  construct : function() {\n    if (qx.core.Environment.get(\"qx.globalErrorHandling\")) {\n      qx.event.GlobalError.setErrorHandler(this._handleGlobalError, this);\n    }\n\n    // Create view\n    this.__testsInView = [];\n    var viewSetting = qx.core.Environment.get(\"qxl.testrunner.view\");\n    var viewClass = qx.Class.getByName(viewSetting);\n\n    if (qx.core.Environment.get(\"qxl.testrunner.performance\")) {\n      qx.Class.include(viewClass, qxl.testrunner.view.MPerformance);\n    }\n\n    this.view = new viewClass();\n\n    // Connect view and controller\n    this.view.addListener(\"runTests\", this._runTests, this);\n\n    this.view.addListener(\"stopTests\", this._stopTests, this);\n    this.bind(\"testSuiteState\", this.view, \"testSuiteState\");\n    this.bind(\"testCount\", this.view, \"testCount\");\n    this.bind(\"testModel\", this.view, \"testModel\");\n    qx.data.SingleValueBinding.bind(this.view, \"selectedTests\", this, \"selectedTests\");\n\n    this._origin = qx.core.Environment.get(\"qxl.testrunner.testOrigin\");\n    this._testNameSpace = this._getTestNameSpace();\n\n    this._loadTests();\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Current state of the test suite */\n    testSuiteState :\n    {\n      init : \"init\",\n      check : [ \"init\", \"loading\", \"ready\", \"running\", \"finished\", \"aborted\", \"error\" ],\n      event : \"changeTestSuiteState\"\n    },\n\n    /** Number of tests that haven't run yet */\n    testCount :\n    {\n      init : null,\n      nullable : true,\n      check : \"Integer\",\n      event : \"changeTestCount\"\n    },\n\n    /** Model object representing the test namespace. */\n    testModel :\n    {\n      init : null,\n      nullable : true,\n      event : \"changeTestModel\"\n    },\n\n    /** List of tests selected by the user */\n    selectedTests :\n    {\n      nullable : true,\n      init : null,\n      apply : \"_applySelectedTests\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    _origin : null,\n    loader : null,\n    _testParts : null,\n    __testsInView : null,\n    _testNameSpace : null,\n    _externalTestClasses : 0,\n\n\n    /**\n     * Returns the configured base namespace of the current test suite\n     * @return {String} Test namespace\n     */\n    _getTestNameSpace : function() {\n      // Test namespace set by URI parameter\n      if (typeof location !== \"undefined\" && location.search) {\n        var params = location.search;\n        if (params.indexOf(\"testclass=\") > 0) {\n          return params.substr(params.indexOf(\"testclass=\") + 10);\n        }\n      }\n      return qx.core.Environment.get(\"qx.testNameSpace\");\n    },\n\n\n    /**\n     * Deletes the current test suite so a new one can be loaded\n     */\n    _resetSuite : function() {\n      if (this.loader) {\n        this.loader.dispose();\n        this.loader = null;\n      }\n\n      this._externalTestClasses = 0;\n      this.setTestModel(null);\n      this.__testsInView = [];\n    },\n\n\n    /**\n     * Loads the test suite\n     */\n    _loadTests : function() {\n      var origin = qx.core.Environment.get(\"qxl.testrunner.testOrigin\");\n      switch (origin) {\n        case \"external\":\n          break;\n        default:\n          this._loadInlineTests(this._testNameSpace);\n      }\n    },\n\n\n    /**\n     * Loads test classes that are a part of the TestRunner application.\n     *\n     * @param nameSpace {String|Object} Test namespace to be loaded\n     */\n    _loadInlineTests : function(nameSpace) {\n      this.setTestSuiteState(\"loading\");\n      this.loader = new qx.dev.unit.TestLoaderBasic(nameSpace);\n      this._wrapAssertions();\n      this._getTestModel();\n    },\n\n\n    /**\n     * Creates a test class from the given members map and adds it to the suite\n     * @param membersMap {map} Map containing the class members (test methods etc.)\n     */\n    _addTestClass : function(membersMap) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertMap(membersMap);\n      }\n      this.setTestSuiteState(\"loading\");\n\n      this._externalTestClasses += 1;\n      var testNameSpace = this._testNameSpace;\n      var prefix = \"test\";\n\n      var testClassName;\n      if (membersMap.classname) {\n        testClassName = membersMap.classname;\n        testClassName = prefix + \".\" + testClassName;\n\n        if (testClassName.indexOf(testNameSpace) !== 0) {\n          return;\n        }\n\n        delete membersMap.classname;\n      } else {\n        testClassName = prefix + \".Test\" + (this._externalTestClasses);\n      }\n      var testClass = this._defineTestClass(testClassName, membersMap);\n\n      if (this.loader) {\n        this.loader.getSuite().add(testClass);\n      } else {\n        this.loader = new qx.dev.unit.TestLoaderBasic(testNameSpace);\n      }\n    },\n\n\n    /**\n     * Creates a test class from the given members map\n     *\n     * @param testClassName {String} Fully qualified name for the test class\n     * @param membersMap {map} Map containing the class members (test methods etc.)\n     * @return {qx.Class} Configured test class\n     */\n    _defineTestClass : function(testClassName, membersMap) {\n      var qxClass = qx.Class;\n      return qxClass.define(testClassName,\n      {\n        extend : qx.dev.unit.TestCase,\n        members : membersMap\n      });\n    },\n\n\n    /**\n     * Create a test class from the given definition and add it to the model\n     *\n     * @param membersMap {Map} \"members\" section for the new test class\n     */\n    define : function(membersMap) {\n      this._addTestClass(membersMap);\n      this._getTestModel();\n    },\n\n    /**\n     * Create a new test suite from the class definitions in\n     * window.qxl.testrunner.testDefinitions\n     *\n     * @ignore(qxl.testrunner.testDefinitions.*)\n     */\n    _loadExternalTests : function() {\n      this._resetSuite();\n\n      if (window.qxl.testrunner.testDefinitions instanceof Array) {\n        for (var i=0, l=qxl.testrunner.testDefinitions.length; i<l; i++) {\n          this._addTestClass(qxl.testrunner.testDefinitions[i]);\n        }\n        window.qxl.testrunner.testDefinitions = [];\n        if (this.loader) {\n          //FIXME: Assertion wrapping causes weird errors\n          //this._wrapAssertions();\n          this._getTestModel();\n        }\n      }\n    },\n\n    /**\n     * Returns the loader's test representation object\n     *\n     * @return {Object} Test representation\n     */\n    __getTestRep : function() {\n      var testRep = this.loader.getTestDescriptions();\n      if (!testRep) {\n        this.error(\"Couldn't get test descriptions from loader!\");\n        return null;\n      }\n      return qx.lang.Json.parse(testRep);\n    },\n\n\n    /**\n     * Constructs a model of the test suite from the loader's test\n     * representation data\n     */\n    _getTestModel : function() {\n      if (this.currentTestData) {\n        this.currentTestData = null;\n        delete this.currentTestData;\n      }\n      var oldModel = this.getTestModel();\n      if (oldModel) {\n        this.getTestModel().dispose();\n        this.__testsInView = [];\n      }\n      this.setTestModel(null);\n\n      var testRep = this.__getTestRep();\n      if (!testRep || testRep.length === 0 ||\n        (testRep.length === 1 && testRep[0].tests.length === 0)) {\n        this.setTestSuiteState(\"error\");\n        return;\n      }\n      var modelData = qxl.testrunner.runner.ModelUtil.createModelData(testRep);\n      var delegate = {\n        getModelSuperClass : function(properties) {\n          return qxl.testrunner.runner.TestItem;\n        }\n      };\n      var marshal = new qx.data.marshal.Json(delegate);\n      marshal.toClass(modelData.children[0], true);\n      var model = marshal.toModel(modelData.children[0]);\n      qxl.testrunner.runner.ModelUtil.addDataFields(model);\n      this.setTestModel(model);\n      this.setTestSuiteState(\"ready\");\n    },\n\n\n    /**\n     * Wraps all assert* methods included in qx.dev.unit.TestCase in try/catch\n     * blocks. For each caught exception, a data event containing the Error\n     * object will be fired on the test class. This allows the Testrunner to\n     * mark the test as failed while any code following an assertion call will\n     * still be executed. Aborting the test execution whenever an assertion\n     * fails has caused some extremely hard to debug problems in the qooxdoo\n     * framework unit tests in the past.\n     *\n     * Doing this in the Testrunner application is a temporary solution: It\n     * really should be done in qx.dev.unit.TestCase, but that would break\n     * backwards compatibility with the existing testrunner component. Once\n     * testrunner has fully replaced testrunner, this code should be moved.\n     *\n     * @param autWindow {DOMWindow?} The test application's window. Default: The\n     * Testrunner's window.\n     */\n    _wrapAssertions : function(autWindow) {\n      var win = autWindow || window;\n      var tCase = win.qx.dev.unit.TestCase.prototype;\n      for (var prop in tCase) {\n        if ((prop.indexOf(\"assert\") == 0 || prop === \"fail\") &&\n            typeof tCase[prop] == \"function\") {\n          // store original assertion func\n          var originalName = \"__\" + prop;\n          tCase[originalName] = tCase[prop];\n          // create wrapped assertion func\n          var body = \"var argumentsArray = qx.lang.Array.fromArguments(arguments);\" +\n            \"try {\" +\n            \"this[arguments.callee.originalName].apply(this, argumentsArray);\" +\n            \"} catch(ex) {\" +\n            \"this.fireDataEvent(\\\"assertionFailed\\\", ex);\" +\n            \"}\";\n\n          // need to use the AUT window's Function since IE 6/7/8 can't catch\n          // exceptions from other windows.\n          tCase[prop] = new win.Function(body);\n          tCase[prop].originalName = originalName;\n        }\n      }\n    },\n\n\n    /**\n     * Run the selected tests\n     */\n    _runTests : function() {\n      if (this.getTestSuiteState() === \"aborted\") {\n        this.setTestSuiteState(\"ready\");\n      }\n      this.runTests();\n    },\n\n\n    /**\n     * Stop executing tests\n     */\n    _stopTests : function() {\n      this.setTestSuiteState(\"aborted\");\n    },\n\n\n    /**\n     * Runs all tests in the list.\n     */\n    runTests : function() {\n      var self = this;\n      var suiteState = this.getTestSuiteState();\n      switch (suiteState) {\n        case \"loading\":\n          this.__testsInView = [];\n          break;\n        case \"ready\":\n        case \"finished\":\n          if (this.testList.length > 0) {\n            this.setTestSuiteState(\"running\");\n          } else {\n            return;\n          }\n          break;\n        case \"aborted\":\n        case \"error\":\n          return;\n      }\n\n      if (this.testList.length == 0) {\n        window.setTimeout(function() {\n          self.setTestSuiteState(\"finished\");\n          self.exit();\n        }, 250);\n        return;\n      }\n\n      var currentTest = this.currentTestData = this.testList.shift();\n      currentTest.resetState();\n      this.setTestCount(this.testList.length);\n      var className = currentTest.parent.fullName;\n      var functionName = currentTest.getName();\n      var testResult = this.__initTestResult(currentTest);\n\n      window.setTimeout(function() {\n        self.loader.runTests(testResult, className, functionName);\n      }, 5);\n    },\n\n\n    /**\n     * Terminates the Java VM\n     */\n    exit : function() {\n      if (qx.core.Environment.get(\"runtime.name\") == \"rhino\") {\n        java.lang.System.exit(0);\n      }\n    },\n\n\n    /**\n     * Returns a new instance of the class that executes the tests\n     *\n     * @return {qx.dev.unit.TestResult} TestResult instance\n     */\n    _getTestResult : function() {\n      return new qx.dev.unit.TestResult();\n    },\n\n\n    /**\n     * Creates the TestResult object that will run the actual test functions.\n     * @return {qx.dev.unit.TestResult} The configured TestResult object\n     */\n    __initTestResult : function() {\n      var testResult = this._getTestResult();\n\n      testResult.addListener(\"startTest\", function(e) {\n        var test = e.getData();\n\n        if (this.currentTestData) {\n          if (this.currentTestData.fullName === test.getFullName() &&\n              this.currentTestData.getState() == \"wait\") {\n            // test is in wait state, don't add it to the view again\n            this.currentTestData.setState(this.currentTestData.getPreviousState() || \"start\");\n            return;\n          }\n          \n            // test was executed before, clear old exceptions\n            this.currentTestData.setExceptions([]);\n        }\n\n        if (!this.__testsInView.includes(this.currentTestData.fullName)) {\n          this.view.addTestResult(this.currentTestData);\n          this.__testsInView.push(this.currentTestData.fullName);\n        }\n      }, this);\n\n      testResult.addListener(\"wait\", this._onTestWait, this);\n\n      testResult.addListener(\"failure\", this._onTestFailure, this);\n\n      testResult.addListener(\"error\", this._onTestError, this);\n\n      testResult.addListener(\"skip\", this._onTestSkip, this);\n\n      testResult.addListener(\"endTest\", this._onTestEnd, this);\n\n      testResult.addListener(\"endMeasurement\", this._onTestEndMeasurement, this);\n\n      return testResult;\n    },\n\n\n    /**\n     * Sets the \"wait\" state for async tests\n     *\n     * @param ev {qx.event.type.Data} \"wait\" event\n     */\n    _onTestWait : function(ev) {\n      this.currentTestData.setState(\"wait\");\n    },\n\n\n    /**\n     * Records any (assertion) exceptions that caused a test to fail\n     *\n     * @param ev {qx.event.type.Data} \"failure\" event\n     */\n    _onTestFailure : function(ev) {\n      this.__addExceptions(this.currentTestData, ev.getData());\n\n      if (this.currentTestData.getState() === \"failure\") {\n        this.currentTestData.resetState();\n      }\n      this.currentTestData.setState(\"failure\");\n    },\n\n\n    /**\n     * Records any unexpected exceptions that occurred during test execution\n     *\n     * @param ev {qx.event.type.Data} \"error\" event\n     */\n    _onTestError : function(ev) {\n      this.__addExceptions(this.currentTestData, ev.getData());\n\n      if (this.currentTestData.getState() === \"error\") {\n        this.currentTestData.resetState();\n      }\n      this.currentTestData.setState(\"error\");\n    },\n\n\n    /**\n     * Records any exceptions that caused a test to be skipped\n     *\n     * @param ev {qx.event.type.Data} \"skip\" event\n     */\n    _onTestSkip : function(ev) {\n      this.__addExceptions(this.currentTestData, ev.getData());\n\n      if (this.currentTestData.getState() === \"skip\") {\n        this.currentTestData.resetState();\n      }\n      this.currentTestData.setState(\"skip\");\n    },\n\n\n    /**\n     * Starts the next test\n     *\n     * @param ev {qx.event.type.Data} \"endTest\" event\n     */\n    _onTestEnd : function(ev) {\n      var state = this.currentTestData.getState();\n      if (state == \"start\") {\n        this.currentTestData.setState(\"success\");\n      }\n\n      qx.event.Timer.once(this.runTests, this, 0);\n    },\n\n\n    /**\n     * Records any exceptions that occurred during a performance test\n     *\n     * @param ev {qx.event.type.Data} \"endMeasurement\" event\n     */\n    _onTestEndMeasurement : function(ev) {\n      this.__addExceptions(this.currentTestData, ev.getData());\n\n      var url = qx.core.Environment.get(\"qxl.testrunner.reportPerfResultUrl\");\n      if (url) {\n        var measureData = ev.getData()[0].exception.getData();\n        measureData.testname = this.currentTestData.getFullName();\n        measureData.browsername = qx.core.Environment.get(\"browser.name\");\n        measureData.browserversion = qx.core.Environment.get(\"browser.version\");\n        measureData.osname = qx.core.Environment.get(\"os.name\") || \"unknown\";\n        measureData.osversion = qx.core.Environment.get(\"os.version\") || \"unknown\";\n\n        var parsedUri = qx.util.Uri.parseUri(location.href);\n        if (parsedUri.queryKey && parsedUri.queryKey.branch) {\n          measureData.branch = parsedUri.queryKey.branch;\n        }\n\n        url += \"?\" + qx.util.Uri.toParameter(measureData, false);\n        var req = new qx.bom.request.Script();\n        req.open(\"GET\", url);\n        req.send();\n      }\n    },\n\n    /**\n     * Adds exception information to an existing TestResult object, making sure\n     * no duplicates are recorded.\n     *\n     * @param testResult {qx.dev.unit.TestResult} TestResult object\n     * @param exceptions {Object[]} List of exception objects\n     */\n    __addExceptions : function(testResult, exceptions) {\n      var oldEx = testResult.getExceptions();\n      var newEx = oldEx.concat();\n\n      for (var i=0, l=exceptions.length; i<l; i++) {\n        var newExMsg = exceptions[i].exception.toString();\n        var dupe = false;\n        for (var j=0, m=oldEx.length; j<m; j++) {\n          var oldExMsg = oldEx[j].exception.toString();\n          if (newExMsg === oldExMsg) {\n            dupe = true;\n            break;\n          }\n        }\n        if (!dupe) {\n          newEx.push(exceptions[i]);\n        }\n      }\n      testResult.setExceptions(newEx);\n    },\n\n\n    /**\n     * Sets the list of pending tests to those selected by the user.\n     *\n     * @param value {String[]} Selected tests\n     * @param old {String[]} Previous value\n     */\n    _applySelectedTests : function(value, old) {\n      if (!value) {\n        return;\n      }\n      if (old) {\n        old.removeListener(\"change\", this._onChangeTestSelection, this);\n      }\n      value.addListener(\"change\", this._onChangeTestSelection, this);\n      this._onChangeTestSelection();\n    },\n\n\n    /**\n     * Sets the pending test list and count according to the selection\n     */\n    _onChangeTestSelection : function() {\n      this.testList = this._getFlatTestList();\n      // Make sure the value is applied even if it didn't change so the view is\n      // updated\n      if (this.testList.length == this.getTestCount()) {\n        this.resetTestCount();\n      }\n      this.setTestCount(this.testList.length);\n    },\n\n\n    /**\n     * Returns an array containing all \"test\" children of the current test\n     * selection\n     *\n     * @return {Object[]} Test array\n     */\n    _getFlatTestList : function() {\n      var selection = this.getSelectedTests();\n      if (selection.length == 0) {\n        return new qx.data.Array();\n      }\n\n      var testList = [];\n      for (var i=0, l=selection.length; i<l; i++) {\n        var item = selection.getItem(i);\n        var testsFromItem = qxl.testrunner.runner.ModelUtil.getItemsByProperty(item, \"type\", \"test\");\n        testList = testList.concat(testsFromItem);\n      }\n      return testList;\n    },\n\n\n    /**\n     * Logs any errors caught by qooxdoo's global error handling.\n     * @param ex{Error} Caught exception\n     * @param ex\n     */\n    _handleGlobalError : function(ex) {\n      this.error(ex);\n    }\n\n  },\n\n  destruct : function() {\n    this.view.removeListener(\"runTests\", this._runTests, this);\n    this.view.removeListener(\"stopTests\", this._stopTests, this);\n    this.removeAllBindings();\n    if (this.getTestModel()) {\n      this.getTestModel().dispose();\n    }\n    this._disposeArray(\"testsInView\");\n    this._disposeArray(\"testList\");\n    this._disposeArray(\"testPackageList\");\n    this._disposeObjects(\"view\", \"currentTestData\", \"loader\");\n  }\n\n});\n"
  ]
}