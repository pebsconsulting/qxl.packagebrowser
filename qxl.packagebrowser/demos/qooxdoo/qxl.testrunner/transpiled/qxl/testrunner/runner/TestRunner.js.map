{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_qxl_testrunner_v6_0_1/source/class/qxl/testrunner/runner/TestRunner.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxl",
    "testrunner",
    "runner",
    "TestRunnerBasic",
    "construct",
    "TEST_MIXINS",
    "dev",
    "unit",
    "MMock",
    "MRequirements",
    "push",
    "MMeasure",
    "view",
    "getLogAppenderElement",
    "__logAppender",
    "log",
    "appender",
    "Element",
    "Logger",
    "unregister",
    "setElement",
    "_origin",
    "register",
    "members",
    "origin",
    "__iframe",
    "frameWindow",
    "__loadAttempts",
    "__loadTimer",
    "_externalTestClasses",
    "_loadTests",
    "getIframe",
    "event",
    "Registration",
    "addListener",
    "_onLoadIframe",
    "src",
    "_testNameSpace",
    "setTestSuiteState",
    "setAutUri",
    "_loadInlineTests",
    "_loadExternalTests",
    "pushType",
    "bom",
    "Iframe",
    "getWindow",
    "evtFunc",
    "data",
    "boundEvtFunc",
    "bind",
    "window",
    "setTimeout",
    "req",
    "io",
    "request",
    "Xhr",
    "e",
    "test",
    "getResponse",
    "doc",
    "getDocument",
    "el",
    "createElement",
    "text",
    "getElementsByTagName",
    "appendChild",
    "loader",
    "TestLoader",
    "getInstance",
    "setTestNamespace",
    "_wrapAssertions",
    "_getTestModel",
    "send",
    "nameSpace",
    "TestLoaderInline",
    "_defineTestClass",
    "testClassName",
    "membersMap",
    "qxClass",
    "classDef",
    "TestCase",
    "include",
    "_runTests",
    "clear",
    "_getTestResult",
    "testResult",
    "TestResult",
    "_onTestEnd",
    "ev",
    "__fetchIframeLog",
    "getType",
    "stop",
    "body",
    "location",
    "protocol",
    "alert",
    "Timer",
    "once",
    "getSuite",
    "frameParts",
    "core",
    "Environment",
    "get",
    "Boolean",
    "valueOf",
    "i",
    "length",
    "_testParts",
    "w",
    "logger",
    "getLogLevel",
    "setLevel",
    "destruct",
    "_disposeObjects",
    "TestRunner"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * The TestRunner is responsible for loading the test classes and keeping track\n * of the test suite's state.\n */\nqx.Class.define(\"qxl.testrunner.runner.TestRunner\", {\n\n  extend : qxl.testrunner.runner.TestRunnerBasic,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n  construct : function() {\n    this.TEST_MIXINS = [qx.dev.unit.MMock, qx.dev.unit.MRequirements];\n    if (qx.core.Environment.get(\"qxl.testrunner.performance\")) {\n      this.TEST_MIXINS.push(qx.dev.unit.MMeasure);\n    }\n\n    if (qx.core.Environment.get(\"qxl.testrunner.reportServer\")) {\n      var viewClass = qx.Class.getByName(qx.core.Environment.get(\"qxl.testrunner.view\"));\n      qx.Class.include(viewClass, qxl.testrunner.view.MReportResult);\n    }\n\n    this.base(arguments);\n\n    // Get log appender element from view\n    if (this.view.getLogAppenderElement) {\n      this.__logAppender = new qx.log.appender.Element();\n      qx.log.Logger.unregister(this.__logAppender);\n      this.__logAppender.setElement(this.view.getLogAppenderElement());\n\n      if (this._origin != \"iframe\") {\n        qx.log.Logger.register(this.__logAppender);\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    origin : null,\n    __iframe : null,\n    frameWindow : null,\n    __loadAttempts : null,\n    __loadTimer : null,\n    __logAppender : null,\n    _externalTestClasses : null,\n\n    TEST_MIXINS : null,\n\n\n    _loadTests : function() {\n      switch (this._origin) {\n        case \"iframe\":\n          // Load the tests from a standalone AUT\n          this.__iframe = this.view.getIframe();\n          qx.event.Registration.addListener(this.__iframe, \"load\", this._onLoadIframe, this);\n          var src = qx.core.Environment.get(\"qx.testPageUri\");\n          src += \"?testclass=\" + this._testNameSpace;\n          this.setTestSuiteState(\"loading\");\n          this.view.setAutUri(src);\n          break;\n        case \"inline\":\n          this._loadInlineTests();\n          break;\n        case \"external\":\n          this._loadExternalTests();\n          break;\n        case \"push\":\n          var pushType = \"code\";\n          //var pushType = \"uri\";\n\n          if (pushType == \"uri\") {\n            this.__iframe = this.view.getIframe();\n            this.frameWindow = qx.bom.Iframe.getWindow(this.__iframe);\n\n            var evtFunc = function(event) {\n              // Load the tests from a standalone AUT\n              qx.event.Registration.addListener(this.__iframe, \"load\", this._onLoadIframe, this);\n              var src = event.data + \"?testclass=\" + this._testNameSpace;\n              this.setTestSuiteState(\"loading\");\n              this.view.setAutUri(src);\n            };\n\n            var boundEvtFunc = evtFunc.bind(this);\n\n            window.setTimeout(function() {\n              boundEvtFunc({data : \"html/tests-source.html\"});\n            }, 1000);\n          } else if (pushType == \"code\") {\n            var req = new qx.io.request.Xhr(\"../build/script/tests.js\");\n            req.addListener(\"success\", function(e) {\n              var test = req.getResponse();\n              this.__iframe = this.view.getIframe();\n              var doc = qx.bom.Iframe.getDocument(this.__iframe);\n              var el =doc.createElement(\"script\");\n              el.text = test;\n              doc.getElementsByTagName(\"head\")[0].appendChild(el);\n\n              this.loader = qx.bom.Iframe.getWindow(this.__iframe).qxl.testrunner.TestLoader.getInstance();\n              this.loader.setTestNamespace(this._testNameSpace);\n              this._wrapAssertions(this.frameWindow);\n              this._getTestModel();\n            }, this);\n            req.send();\n          }\n      }\n    },\n\n\n    /**\n     * Loads test classes that are a part of the TestRunner application.\n     *\n     * @param nameSpace {String|Object} Test namespace to be loaded\n     */\n    _loadInlineTests : function(nameSpace) {\n      nameSpace = nameSpace || this._testNameSpace;\n      this.setTestSuiteState(\"loading\");\n      this.loader = new qx.dev.unit.TestLoaderInline();\n      this.loader.setTestNamespace(nameSpace);\n      this._wrapAssertions();\n      this._getTestModel();\n    },\n\n\n    // overridden\n    _defineTestClass : function(testClassName, membersMap) {\n      var qxClass = qx.Class;\n      var classDef = {\n        extend : qx.dev.unit.TestCase,\n        members : membersMap\n      };\n      if (this.TEST_MIXINS) {\n        classDef.include = this.TEST_MIXINS;\n      }\n      return qxClass.define(testClassName, classDef);\n    },\n\n\n    _runTests : function() {\n      if (this.__logAppender) {\n        this.__logAppender.clear();\n      }\n      this.base(arguments);\n    },\n\n\n    _getTestResult : function() {\n      if (this._origin == \"iframe\" || this._origin == \"push\") {\n        var frameWindow = qx.bom.Iframe.getWindow(this.__iframe);\n        var testResult = new frameWindow.qx.dev.unit.TestResult();\n      } else {\n        var testResult = new qx.dev.unit.TestResult();\n      }\n      return testResult;\n    },\n\n\n    _onTestEnd : function(ev) {\n      if (this._origin == \"iframe\" || this._origin == \"push\") {\n        if (this.__logAppender) {\n          this.__fetchIframeLog();\n        }\n      }\n\n      this.base(arguments);\n    },\n\n\n    /**\n     * Waits until the test application in the iframe has finished loading, then\n     * retrieves its TestLoader.\n     * @param ev {qx.event.type.Event} Iframe's \"load\" event\n     *\n     * @lint ignoreDeprecated(alert)\n     */\n    _onLoadIframe : function(ev) {\n      if (ev && ev.getType() == \"load\") {\n        this.setTestSuiteState(\"loading\");\n      }\n\n      if (!this.__loadAttempts) {\n        this.__loadAttempts = 0;\n      }\n      this.__loadAttempts++;\n\n      this.frameWindow = qx.bom.Iframe.getWindow(this.__iframe);\n\n      if (this.__loadTimer) {\n        this.__loadTimer.stop();\n        this.__loadTimer = null;\n      }\n\n      if (this.__loadAttempts <= 300) {\n        // Detect failure to access frame after some period of time\n        if (!this.frameWindow.body) {\n          if (this.__loadAttempts >= 20 && window.location.protocol == \"file:\") {\n            alert(\"Failed to load application from the file system.\\n\\n\" +\n                  \"The security settings of your browser may prohibit to access \" +\n                  \"frames loaded using the file protocol. Please try the http \" +\n                  \"protocol instead.\");\n\n            // Quit\n            this.setTestSuiteState(\"error\");\n            return;\n          }\n        }\n\n        // Repeat until testrunner in iframe is loaded\n        if (!this.frameWindow.qxl || !this.frameWindow.qxl.testrunner) {\n          this.__loadTimer = qx.event.Timer.once(this._onLoadIframe, this, 100);\n          return;\n        }\n\n        this.loader = this.frameWindow.qxl.testrunner.TestLoader.getInstance();\n        // Avoid errors in slow browsers\n\n        if (!this.loader) {\n          this.__loadTimer = qx.event.Timer.once(this._onLoadIframe, this, 100);\n          return;\n        }\n\n        if (!this.loader.getSuite()) {\n          this.__loadTimer = qx.event.Timer.once(this._onLoadIframe, this, 100);\n          return;\n        }\n      } else {\n        this.setTestSuiteState(\"error\");\n        this.__loadAttempts = 0;\n        return;\n      }\n\n      this.__loadAttempts = 0;\n\n      var frameParts = this.frameWindow.qx.core.Environment.get(\"qxl.testrunner.testParts\");\n      if (frameParts instanceof this.frameWindow.Boolean) {\n        frameParts = frameParts.valueOf();\n      }\n      if (frameParts) {\n        for (var i = 0; i < frameParts.length; i++) {\n          this._testParts.push(frameParts[i]);\n        }\n      }\n\n      if (this.__logAppender) {\n        this.__logAppender.clear();\n      }\n\n      if (qx.core.Environment.get(\"engine.name\") !== \"opera\") {\n        this._wrapAssertions(this.frameWindow);\n      }\n      this._getTestModel();\n    },\n\n\n    /**\n     * Retrieves the AUT's log messages and writes them to the current appender.\n     */\n    __fetchIframeLog : function() {\n      var w = qx.bom.Iframe.getWindow(this.__iframe);\n\n      var logger;\n      if (w.qx && w.qx.log && w.qx.log.Logger) {\n        logger = w.qx.log.Logger;\n        if (this.view.getLogLevel) {\n          logger.setLevel(this.view.getLogLevel());\n        }\n        // Register to flush the log queue into the appender.\n        logger.register(this.__logAppender);\n        logger.clear();\n        logger.unregister(this.__logAppender);\n      }\n    }\n  },\n\n  destruct : function() {\n    this._disposeObjects(\"__logAppender\", \"__loadTimer\");\n    this.__iframe = null;\n    delete this.__iframe;\n    this.frameWindow = null;\n    delete this.frameWindow;\n  }\n\n});\n"
  ]
}