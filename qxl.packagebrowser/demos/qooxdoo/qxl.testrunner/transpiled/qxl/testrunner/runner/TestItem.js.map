{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_qxl_testrunner_v6_0_1/source/class/qxl/testrunner/runner/TestItem.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "$$test",
    "properties",
    "state",
    "init",
    "event",
    "apply",
    "previousState",
    "nullable",
    "exceptions",
    "statics",
    "sortFunction",
    "aItem",
    "bItem",
    "aType",
    "getType",
    "bType",
    "a",
    "getName",
    "b",
    "members",
    "getModel",
    "getFullName",
    "fullName",
    "itemName",
    "indexOf",
    "length",
    "getChildren",
    "substr",
    "toUpperCase",
    "sortChildren",
    "sort",
    "qxl",
    "testrunner",
    "runner",
    "TestItem",
    "getMessage",
    "Environment",
    "select",
    "getExceptions",
    "message",
    "i",
    "l",
    "exception",
    "toString",
    "msg",
    "split",
    "trim",
    "getStackTrace",
    "ex",
    "trace",
    "dev",
    "StackTrace",
    "getStackTraceFromError",
    "first",
    "shift",
    "join",
    "_applyState",
    "newState",
    "oldState",
    "setPreviousState",
    "destruct",
    "parent"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Common superclass for test suite model items\n */\n\nqx.Class.define(\"qxl.testrunner.runner.TestItem\", {\n\n  extend : qx.core.Object,\n\n  construct : function() {\n    this.base(arguments);\n    this.$$test = this;\n  },\n\n  properties :\n  {\n    /** The item's state. The state of a parent item reflects its children:\n     *  If one or more children have \"error\" or \"failure\" states, so will the\n     *  parent.\n     */\n    state :\n    {\n      init : \"start\",\n      event : \"changeState\",\n      apply : \"_applyState\"\n    },\n\n    /**\n     * The item's previous state. This is used to preserve the correct state value\n     * for asynchronous tests that have an intermediate \"wait\" value.\n     */\n    previousState :\n    {\n      nullable : true,\n      init : null\n    },\n\n    /**\n     * Any exceptions caught during a test's execution.\n     */\n    exceptions :\n    {\n      init : [],\n      nullable : true,\n      event : \"changeExceptions\"\n    }\n  },\n\n  statics :\n  {\n    /**\n     * Compare function for test model items.\n     *\n     * @param aItem {qxl.testrunner.runner.TestItem} First item\n     * @param bItem {qxl.testrunner.runner.TestItem} Second item\n     * @return {Integer} Comparison result\n     */\n    sortFunction : function(aItem, bItem) {\n      var aType = aItem.getType();\n      var bType = bItem.getType();\n      // always sort packages before classes\n      if (aType == \"package\" && bType == \"class\") {\n        return -1;\n      }\n      if (aType == \"class\" && bType == \"package\") {\n        return 1;\n      }\n\n      var a = aItem.getName();\n      var b = bItem.getName();\n      if (a < b) {\n        return -1;\n      }\n      if (a > b) {\n        return 1;\n      }\n      return 0;\n    }\n  },\n\n  members :\n  {\n    /**\n     * Returns this instance. Workaround needed to bind each child item's state\n     * to the parent's.\n     *\n     * @return {Object} This model object\n     */\n    getModel : function() {\n      return this.$$test;\n    },\n\n    /**\n     * Returns the fully qualified name of a model item, e.g.\n     * \"someApp.test.foo.Bar:testBaz\"\n     *\n     * @return {String} The item's fully qualified name\n     */\n    getFullName : function() {\n      return this.fullName;\n    },\n\n\n    /**\n     * Return the item's type (\"package\", \"class\" or \"test\")\n     *\n     * @return {String} The item's type\n     */\n    getType : function() {\n      var itemName = this.getName();\n\n      if (itemName.indexOf(\"test\") === 0 && itemName.length > 4) {\n        // ugly workaround for packages with names beginning with \"test\"\n        if (this.getChildren) {\n          return \"package\";\n        }\n        return \"test\";\n      }\n      if (itemName.substr(0, 1) === itemName.substr(0, 1).toUpperCase()) {\n        return \"class\";\n      }\n      return \"package\";\n    },\n\n\n    /**\n     * Sorts the item's children. Packages are always listed before classes.\n     */\n    sortChildren : function() {\n      this.getChildren().sort(qxl.testrunner.runner.TestItem.sortFunction);\n    },\n\n\n    /**\n     * Serializes and returns any exceptions caught during the test's execution\n     *\n     * @return {String} Exceptions\n     */\n    getMessage : qx.core.Environment.select(\"engine.name\",\n    {\n      \"default\" : function() {\n        if (this.getExceptions() && this.getExceptions().length > 0) {\n          var exceptions = this.getExceptions();\n          var message = \"\";\n          for (var i=0, l=exceptions.length; i<l; i++) {\n            message += exceptions[i].exception.toString() + \" \";\n          }\n          return message;\n        } \n          return \"\";\n      },\n\n      \"opera\" : function() {\n        if (this.getExceptions() && this.getExceptions().length > 0) {\n          var exceptions = this.getExceptions();\n          var message = \"\";\n          for (var i=0, l=exceptions.length; i<l; i++) {\n            var msg = exceptions[i].exception.message + \"\";\n            if (msg.indexOf(\"Backtrace:\") < 0) {\n              message += exceptions[i].exception.toString();\n            } else {\n              message += msg.split(\"Backtrace:\")[0].trim();\n            }\n          }\n          return message;\n        }\n        \n          return \"\";\n      }\n    }),\n\n\n    /**\n     * Returns stack trace information for a given exception.\n     *\n     * @param ex {Error} Exception\n     * @return {String} Stack trace information\n     */\n    getStackTrace : function(ex) {\n      var trace = [];\n\n      if (typeof (ex.getStackTrace) == \"function\") {\n        trace = ex.getStackTrace();\n      } else {\n        trace = qx.dev.StackTrace.getStackTraceFromError(ex);\n      }\n\n      // filter Test Runner functions from the stack trace\n      while (trace.length > 0) {\n        var first = trace[0];\n\n        if (first.indexOf(\"qx.dev.unit.AssertionError\") == 0 || first.indexOf(\"qx.Class\") == 0 || first.indexOf(\"qx.dev.unit.MAssert\") == 0 || first.indexOf(\"script\") == 0) {\n          trace.shift();\n        } else {\n          break;\n        }\n      }\n\n      return trace.join(\"<br>\");\n    },\n\n\n    /**\n     * Save the previous value when the state changes\n     *\n     * @param newState {String} New state value\n     * @param oldState {String} Previous state value\n     */\n    _applyState : function(newState, oldState) {\n      if (oldState) {\n        this.setPreviousState(oldState);\n      }\n    }\n  },\n\n  destruct : function() {\n    this.$$test = null;\n    if (this.parent) {\n      this.parent = null;\n    }\n  }\n});\n"
  ]
}