{
  "className": "qxl.testrunner.runner.TestRunnerBasic",
  "packageName": "qxl.testrunner.runner",
  "name": "TestRunnerBasic",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 711,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The TestRunner is responsible for loading the test classes and keeping track\n of the test suite's state.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "start": {
      "location": {
        "start": {
          "line": 33,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Load test suite defined by qxl.testrunner.define()</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 48,
        "column": 14
      },
      "end": {
        "line": 77,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "properties": {
    "testSuiteState": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Current state of the test suite</p>"
          }
        ]
      },
      "name": "testSuiteState",
      "propertyType": "new",
      "event": "changeTestSuiteState",
      "init": "init",
      "possibleValues": [
        "init",
        "loading",
        "ready",
        "running",
        "finished",
        "aborted",
        "error"
      ],
      "defaultValue": "init"
    },
    "testCount": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Number of tests that haven't run yet</p>"
          }
        ]
      },
      "name": "testCount",
      "propertyType": "new",
      "event": "changeTestCount",
      "nullable": true,
      "allowNull": true,
      "check": "Integer"
    },
    "testModel": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 111,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Model object representing the test namespace.</p>"
          }
        ]
      },
      "name": "testModel",
      "propertyType": "new",
      "event": "changeTestModel",
      "nullable": true,
      "allowNull": true
    },
    "selectedTests": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of tests selected by the user</p>"
          }
        ]
      },
      "name": "selectedTests",
      "propertyType": "new",
      "apply": "_applySelectedTests",
      "nullable": true,
      "allowNull": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "_origin": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 131,
          "column": 18
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "loader": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 17
        }
      },
      "type": "variable",
      "access": "public"
    },
    "_testParts": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 21
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__testsInView": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_testNameSpace": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 25
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_externalTestClasses": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 28
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_getTestNameSpace": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the configured base namespace of the current test suite</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Test namespace",
            "type": "String",
            "description": " Test namespace"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_resetSuite": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deletes the current test suite so a new one can be loaded</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_loadTests": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads the test suite</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_loadInlineTests": {
      "location": {
        "start": {
          "line": 189,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads test classes that are a part of the TestRunner application.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nameSpace {String|Object} Test namespace to be loaded",
            "paramName": "nameSpace",
            "description": " Test namespace to be loaded",
            "type": [
              "String",
              "Object"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addTestClass": {
      "location": {
        "start": {
          "line": 201,
          "column": 4
        },
        "end": {
          "line": 231,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a test class from the given members map and adds it to the suite</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "membersMap {map} Map containing the class members (test methods etc.)",
            "paramName": "membersMap",
            "description": " Map containing the class members (test methods etc.)",
            "type": "map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_defineTestClass": {
      "location": {
        "start": {
          "line": 241,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a test class from the given members map</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "testClassName {String} Fully qualified name for the test class",
            "paramName": "testClassName",
            "description": " Fully qualified name for the test class",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "membersMap {map} Map containing the class members (test methods etc.)",
            "paramName": "membersMap",
            "description": " Map containing the class members (test methods etc.)",
            "type": "map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Class} Configured test class",
            "type": "qx.Class",
            "description": " Configured test class"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "define": {
      "location": {
        "start": {
          "line": 256,
          "column": 4
        },
        "end": {
          "line": 259,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create a test class from the given definition and add it to the model</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "membersMap {Map} \"members\" section for the new test class",
            "paramName": "membersMap",
            "description": " \"members\" section for the new test class",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_loadExternalTests": {
      "location": {
        "start": {
          "line": 267,
          "column": 4
        },
        "end": {
          "line": 281,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create a new test suite from the class definitions in\n window.qxl.testrunner.testDefinitions</p>"
          }
        ],
        "@ignore": [
          {
            "name": "@ignore",
            "body": "qxl.testrunner.testDefinitions.*"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__getTestRep": {
      "location": {
        "start": {
          "line": 288,
          "column": 4
        },
        "end": {
          "line": 295,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the loader's test representation object</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Test representation",
            "type": "Object",
            "description": " Test representation"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_getTestModel": {
      "location": {
        "start": {
          "line": 302,
          "column": 4
        },
        "end": {
          "line": 332,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Constructs a model of the test suite from the loader's test\n representation data</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_wrapAssertions": {
      "location": {
        "start": {
          "line": 352,
          "column": 4
        },
        "end": {
          "line": 375,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Wraps all assert* methods included in qx.dev.unit.TestCase in try/catch\n blocks. For each caught exception, a data event containing the Error\n object will be fired on the test class. This allows the Testrunner to\n mark the test as failed while any code following an assertion call will\n still be executed. Aborting the test execution whenever an assertion\n fails has caused some extremely hard to debug problems in the qooxdoo\n framework unit tests in the past.\n Doing this in the Testrunner application is a temporary solution: It\n really should be done in qx.dev.unit.TestCase, but that would break\n backwards compatibility with the existing testrunner component. Once\n testrunner has fully replaced testrunner, this code should be moved.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "autWindow {DOMWindow?} The test application's window. Default: The\n Testrunner's window.",
            "paramName": "autWindow",
            "description": " The test application's window. Default: The\n Testrunner's window.",
            "optional": true,
            "type": "DOMWindow"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_runTests": {
      "location": {
        "start": {
          "line": 381,
          "column": 4
        },
        "end": {
          "line": 386,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Run the selected tests</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_stopTests": {
      "location": {
        "start": {
          "line": 392,
          "column": 4
        },
        "end": {
          "line": 394,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop executing tests</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "runTests": {
      "location": {
        "start": {
          "line": 400,
          "column": 4
        },
        "end": {
          "line": 438,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Runs all tests in the list.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exit": {
      "location": {
        "start": {
          "line": 444,
          "column": 4
        },
        "end": {
          "line": 448,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Terminates the Java VM</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getTestResult": {
      "location": {
        "start": {
          "line": 456,
          "column": 4
        },
        "end": {
          "line": 458,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new instance of the class that executes the tests</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.dev.unit.TestResult} TestResult instance",
            "type": "qx.dev.unit.TestResult",
            "description": " TestResult instance"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__initTestResult": {
      "location": {
        "start": {
          "line": 465,
          "column": 4
        },
        "end": {
          "line": 502,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the TestResult object that will run the actual test functions.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.dev.unit.TestResult} The configured TestResult object",
            "type": "qx.dev.unit.TestResult",
            "description": " The configured TestResult object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_onTestWait": {
      "location": {
        "start": {
          "line": 510,
          "column": 4
        },
        "end": {
          "line": 512,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the \"wait\" state for async tests</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} \"wait\" event",
            "paramName": "ev",
            "description": " \"wait\" event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTestFailure": {
      "location": {
        "start": {
          "line": 520,
          "column": 4
        },
        "end": {
          "line": 527,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Records any (assertion) exceptions that caused a test to fail</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} \"failure\" event",
            "paramName": "ev",
            "description": " \"failure\" event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTestError": {
      "location": {
        "start": {
          "line": 535,
          "column": 4
        },
        "end": {
          "line": 542,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Records any unexpected exceptions that occurred during test execution</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} \"error\" event",
            "paramName": "ev",
            "description": " \"error\" event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTestSkip": {
      "location": {
        "start": {
          "line": 550,
          "column": 4
        },
        "end": {
          "line": 557,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Records any exceptions that caused a test to be skipped</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} \"skip\" event",
            "paramName": "ev",
            "description": " \"skip\" event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTestEnd": {
      "location": {
        "start": {
          "line": 565,
          "column": 4
        },
        "end": {
          "line": 572,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Starts the next test</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} \"endTest\" event",
            "paramName": "ev",
            "description": " \"endTest\" event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTestEndMeasurement": {
      "location": {
        "start": {
          "line": 580,
          "column": 4
        },
        "end": {
          "line": 602,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Records any exceptions that occurred during a performance test</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} \"endMeasurement\" event",
            "paramName": "ev",
            "description": " \"endMeasurement\" event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__addExceptions": {
      "location": {
        "start": {
          "line": 611,
          "column": 4
        },
        "end": {
          "line": 630,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds exception information to an existing TestResult object, making sure\n no duplicates are recorded.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "testResult {qx.dev.unit.TestResult} TestResult object",
            "paramName": "testResult",
            "description": " TestResult object",
            "type": "qx.dev.unit.TestResult"
          },
          {
            "name": "@param",
            "body": "exceptions {Object[]} List of exception objects",
            "paramName": "exceptions",
            "description": " List of exception objects",
            "type": "Object[]"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applySelectedTests": {
      "location": {
        "start": {
          "line": 639,
          "column": 4
        },
        "end": {
          "line": 648,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the list of pending tests to those selected by the user.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String[]} Selected tests",
            "paramName": "value",
            "description": " Selected tests",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "old {String[]} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "String[]"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "selectedTests"
      ]
    },
    "_onChangeTestSelection": {
      "location": {
        "start": {
          "line": 654,
          "column": 4
        },
        "end": {
          "line": 662,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the pending test list and count according to the selection</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getFlatTestList": {
      "location": {
        "start": {
          "line": 671,
          "column": 4
        },
        "end": {
          "line": 684,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array containing all \"test\" children of the current test\n selection</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object[]} Test array",
            "type": "Object[]",
            "description": " Test array"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleGlobalError": {
      "location": {
        "start": {
          "line": 692,
          "column": 4
        },
        "end": {
          "line": 694,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs any errors caught by qooxdoo's global error handling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ex{Error} Caught exception"
          },
          {
            "name": "@param",
            "body": "ex",
            "paramName": "ex",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTestSuiteState": {
      "type": "function",
      "name": "getTestSuiteState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testSuiteState</code>.\n\nFor further details take a look at the property definition: {@link #testSuiteState}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testSuiteState"
          }
        ]
      }
    },
    "setTestSuiteState": {
      "type": "function",
      "name": "setTestSuiteState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testSuiteState</code>.\n\nFor further details take a look at the property definition: {@link #testSuiteState}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testSuiteState"
          }
        ]
      }
    },
    "resetTestSuiteState": {
      "type": "function",
      "name": "resetTestSuiteState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testSuiteState</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testSuiteState}."
          }
        ]
      }
    },
    "getTestCount": {
      "type": "function",
      "name": "getTestCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testCount</code>.\n\nFor further details take a look at the property definition: {@link #testCount}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for testCount"
          }
        ]
      }
    },
    "setTestCount": {
      "type": "function",
      "name": "setTestCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testCount</code>.\n\nFor further details take a look at the property definition: {@link #testCount}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for testCount"
          }
        ]
      }
    },
    "resetTestCount": {
      "type": "function",
      "name": "resetTestCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testCount</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testCount}."
          }
        ]
      }
    },
    "getTestModel": {
      "type": "function",
      "name": "getTestModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>testModel</code>.\n\nFor further details take a look at the property definition: {@link #testModel}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for testModel"
          }
        ]
      }
    },
    "setTestModel": {
      "type": "function",
      "name": "setTestModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>testModel</code>.\n\nFor further details take a look at the property definition: {@link #testModel}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for testModel"
          }
        ]
      }
    },
    "resetTestModel": {
      "type": "function",
      "name": "resetTestModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>testModel</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #testModel}."
          }
        ]
      }
    },
    "getSelectedTests": {
      "type": "function",
      "name": "getSelectedTests",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectedTests</code>.\n\nFor further details take a look at the property definition: {@link #selectedTests}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for selectedTests"
          }
        ]
      }
    },
    "setSelectedTests": {
      "type": "function",
      "name": "setSelectedTests",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selectedTests</code>.\n\nFor further details take a look at the property definition: {@link #selectedTests}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for selectedTests"
          }
        ]
      }
    },
    "resetSelectedTests": {
      "type": "function",
      "name": "resetSelectedTests",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selectedTests</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selectedTests}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 698,
        "column": 13
      },
      "end": {
        "line": 709,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "qxl.testrunner.runner.TestRunner"
  ]
}