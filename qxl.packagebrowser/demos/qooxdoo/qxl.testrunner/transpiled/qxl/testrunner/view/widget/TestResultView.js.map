{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_qxl_testrunner_v6_0_1/source/class/qxl/testrunner/view/widget/TestResultView.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MNativeOverflow",
    "construct",
    "set",
    "overflowX",
    "overflowY",
    "selectable",
    "Environment",
    "get",
    "getContentElement",
    "setStyle",
    "properties",
    "showStackTrace",
    "check",
    "init",
    "apply",
    "members",
    "__results",
    "addTestResult",
    "testResult",
    "addListener",
    "__onStateChange",
    "clear",
    "getDomElement",
    "innerHTML",
    "getState",
    "getPreviousState",
    "testName",
    "getFullName",
    "resultElement",
    "_getResultElement",
    "contEl",
    "appendChild",
    "_updateResultElement",
    "fullName",
    "coll",
    "q",
    "create",
    "addClass",
    "append",
    "state",
    "removeAttribute",
    "addClasses",
    "getChildren",
    "remove",
    "errorDetail",
    "_getErrorDetailElement",
    "_createContentElement",
    "html",
    "Element",
    "exceptArr",
    "getExceptions",
    "length",
    "i",
    "l",
    "error",
    "exception",
    "errorStr",
    "toString",
    "message",
    "prefix",
    "classname",
    "bom",
    "String",
    "escape",
    "replace",
    "trace",
    "getStackTrace",
    "traceEl",
    "getShowStackTrace",
    "hide",
    "__applyShowStackTrace",
    "value",
    "show",
    "destruct",
    "qxl",
    "testrunner",
    "view",
    "widget",
    "TestResultView"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/* ************************************************************************\n************************************************************************ */\n\n/**\n * Widget which displays the test results as a formatted list.\n *\n * @require(qx.module.Manipulating)\n * @require(qx.module.Css)\n * @require(qx.module.Attribute)\n * @require(qx.module.Traversing)\n */\nqx.Class.define(\"qxl.testrunner.view.widget.TestResultView\",\n{\n  extend : qx.ui.core.Widget,\n  include : [qx.ui.core.MNativeOverflow],\n\n  construct : function() {\n    this.base(arguments);\n    this.set({\n      overflowX : \"auto\",\n      overflowY : \"auto\",\n      selectable: true\n    });\n\n    if (qx.core.Environment.get(\"device.type\") !== \"desktop\") {\n      this.getContentElement().setStyle(\"WebkitOverflowScrolling\", \"touch\");\n      this.getContentElement().setStyle(\"touchAction\", \"auto\");\n    }\n    // Workaround for http://bugzilla.qooxdoo.org/show_bug.cgi?id=7679\n    if (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n      qx.core.Environment.get(\"browser.documentmode\") == 9) {\n      this.getContentElement().setStyle(\"position\", \"relative\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Controls the display of stack trace information for exceptions */\n    showStackTrace : {\n      check : \"Boolean\",\n      init : true,\n      apply : \"__applyShowStackTrace\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __results : null,\n\n\n    /**\n     * Adds a new entry to the test results HTML\n     *\n     * @param testResult {Object} A test model object\n     */\n    addTestResult : function(testResult) {\n      //this.__results.push(testResult);\n      testResult.addListener(\"changeState\", function() {\n        this.__onStateChange(testResult);\n      }, this);\n    },\n\n\n    /**\n     * Removes all entries from the list.\n     *\n     * @return {void}\n     */\n    clear : function() {\n      this.getContentElement().getDomElement().innerHTML = \"\";\n      this.__results = {};\n    },\n\n\n    /**\n     * Reacts to test state changes by creating a new list entry and/or\n     * updating an existing one.\n     *\n     * @param testResult {qxl.testrunner.runner.TestItem} Test data object\n     */\n    __onStateChange : function(testResult) {\n      if (testResult.getState() === testResult.getPreviousState()) {\n        return;\n      }\n\n      if (!this.__results) {\n        this.__results = {};\n      }\n\n      var testName = testResult.getFullName();\n\n      if (!this.__results[testName]) {\n        var resultElement = this._getResultElement(testName);\n        this.__results[testName] = resultElement;\n        var contEl = this.getContentElement().getDomElement();\n        contEl.appendChild(resultElement[0]);\n      }\n\n      this._updateResultElement(testResult);\n    },\n\n\n    /**\n     * Creates a list item element for a single test result\n     * @param fullName {String} The test's fully qualified name\n     * @return {q} Collection containing the list item\n     */\n    _getResultElement : function(fullName) {\n      var coll = q.create(\"<li></li>\").addClass(\"testResult\")\n      .append(q.create(\"<h3>\" + fullName + \"</h3>\"));\n      return coll;\n    },\n\n\n    /**\n     * Updates an existing list entry corresponding to a given test result\n     * @param testResult {qxl.testrunner.runner.TestItem} Test data object\n     */\n    _updateResultElement : function(testResult) {\n      var fullName = testResult.getFullName();\n      var state = testResult.getState();\n      var coll = this.__results[fullName];\n      coll.removeAttribute(\"class\").addClasses([\"testResult\", state]);\n\n      //remove old error info\n      coll.getChildren(\".errorDetail\").remove();\n      var errorDetail = this._getErrorDetailElement(testResult);\n      if (errorDetail) {\n        coll.append(errorDetail);\n      }\n    },\n\n\n    // overridden\n    _createContentElement : function() {\n      return new qx.html.Element(\"ul\", {}, {\n        \"class\": \"resultPane\"\n      });\n    },\n\n\n    /**\n     * Returns a DOM tree containing details about the exception(s) that\n     * occurred during a test function's runtime\n     * @param testResult {qxl.testrunner.runner.TestItem} Test data object\n     * @return {q} Collection containing the error detail element\n     */\n    _getErrorDetailElement : function(testResult) {\n      var exceptArr = testResult.getExceptions();\n      if (exceptArr.length == 0) {\n        return null;\n      }\n\n      var coll = q.create(\"<div class='errorDetail'></div>\");\n      for (var i=0, l=exceptArr.length; i<l; i++) {\n        var error = exceptArr[i].exception;\n        var errorStr = error.toString ? error.toString() :\n          error.message ? error.message : \"Unknown Error\";\n\n        var prefix = error.classname && error.classname == \"qx.dev.unit.MeasurementResult\" ? \"\" :\n          \"Error message is: <br />\";\n\n        coll.append(q.create(\"<strong>\" + prefix + qx.bom.String.escape(errorStr).replace(/\\n/g, \"<br/>\") + \"</strong>\"));\n\n        var trace = testResult.getStackTrace(exceptArr[i].exception);\n        if (trace && trace.length > 0) {\n          var traceEl = q.create(\"<div class=\\\"trace\\\">Stack trace: <br/>\" + trace + \"</div>\");\n          if (!this.getShowStackTrace()) {\n            traceEl.hide();\n          }\n          coll.append(traceEl);\n        }\n      }\n      return coll;\n    },\n\n\n    /**\n     * Display or hide stack trace info for all test results.\n     *\n     * @param value {Boolean} Display (true) or hide (false) stack trace info.\n     * @return {void}\n     */\n    __applyShowStackTrace : function(value) {\n      var coll = q(\".resultPane .trace\");\n      value ? coll.show() : coll.hide();\n    }\n  },\n\n  destruct : function() {\n    this.__results = null;\n  }\n});\n"
  ]
}