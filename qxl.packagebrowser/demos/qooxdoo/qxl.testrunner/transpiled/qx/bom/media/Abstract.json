{
  "className": "qx.bom.media.Abstract",
  "packageName": "qx.bom.media",
  "name": "Abstract",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0
      },
      "end": {
        "line": 507,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Media element. Other media types can derive from this class.\n NOTE: Instances of this class must be disposed of to free resources</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "construct": {
    "location": {
      "start": {
        "line": 37,
        "column": 13
      },
      "end": {
        "line": 63,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "media {var} the media element.",
          "paramName": "media",
          "description": " the media element.",
          "type": "var"
        }
      ]
    }
  },
  "events": {
    "play": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 33
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the media starts to play</p>"
          }
        ]
      },
      "name": "play",
      "type": "qx.event.type.Event"
    },
    "pause": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 74,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the media is paused</p>"
          }
        ]
      },
      "name": "pause",
      "type": "qx.event.type.Event"
    },
    "timeupdate": {
      "location": {
        "start": {
          "line": 77,
          "column": 4
        },
        "end": {
          "line": 77,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the current time of the media has changed</p>"
          }
        ]
      },
      "name": "timeupdate",
      "type": "qx.event.type.Event"
    },
    "ended": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 80,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the media has finished to play</p>"
          }
        ]
      },
      "name": "ended",
      "type": "qx.event.type.Event"
    },
    "volumechange": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 83,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the volume property is changed</p>"
          }
        ]
      },
      "name": "volumechange",
      "type": "qx.event.type.Event"
    },
    "loadeddata": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the media is loaded enough to start play</p>"
          }
        ]
      },
      "name": "loadeddata",
      "type": "qx.event.type.Event"
    },
    "loadedmetadata": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 43
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the media is loaded enough to start play</p>"
          }
        ]
      },
      "name": "loadedmetadata",
      "type": "qx.event.type.Event"
    }
  },
  "members": {
    "_media": {
      "location": {
        "start": {
          "line": 95,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 16
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_hasLoop": {
      "location": {
        "start": {
          "line": 96,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 19
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_loopId": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 17
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "getMediaObject": {
      "location": {
        "start": {
          "line": 104,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the media object, so that you can add it to the DOM.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the native media object",
            "type": "Object",
            "description": " the native media object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "play": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Starts playback of the media.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pause": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pauses playback of the media.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isPaused": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 139,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the media is paused or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isEnded": {
      "location": {
        "start": {
          "line": 147,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the media is ended or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setId": {
      "location": {
        "start": {
          "line": 158,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the id of the media.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The new value of id",
            "paramName": "id",
            "description": " The new value of id",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getId": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 171,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the id of the media.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the id of the media element",
            "type": "String",
            "description": " the id of the media element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "canPlayType": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 183,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the browser can play the file format.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} the file format",
            "paramName": "type",
            "description": " the file format",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setVolume": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 195,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the current playback volume, as a number in the range 0.0 to 1.0,\n where 0.0 is the quietest and 1.0 the loudest.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "volume {Number} 0.0 - 1.0",
            "paramName": "volume",
            "description": " 0.0 - 1.0",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getVolume": {
      "location": {
        "start": {
          "line": 204,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the current playback volume, as a number in the range 0.0 to 1.0,\n where 0.0 is the quietest and 1.0 the loudest.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} 0.0 - 1.0",
            "type": "Number",
            "description": " 0.0 - 1.0"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setMuted": {
      "location": {
        "start": {
          "line": 215,
          "column": 4
        },
        "end": {
          "line": 218,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the media element to mute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "muted {Boolean} new value for mute",
            "paramName": "muted",
            "description": " new value for mute",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isMuted": {
      "location": {
        "start": {
          "line": 226,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the media element is muted or not</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDuration": {
      "location": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the duration of the loaded media file.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the duration",
            "type": "Number",
            "description": " the duration"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setCurrentTime": {
      "location": {
        "start": {
          "line": 248,
          "column": 4
        },
        "end": {
          "line": 251,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the value of current time.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Number} the new value of current time",
            "paramName": "value",
            "description": " the new value of current time",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentTime": {
      "location": {
        "start": {
          "line": 259,
          "column": 4
        },
        "end": {
          "line": 262,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets current time of the playback.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the current time",
            "type": "Number",
            "description": " the current time"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setSource": {
      "location": {
        "start": {
          "line": 269,
          "column": 4
        },
        "end": {
          "line": 272,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the source url of the media file.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {String} the source url to the media file.",
            "paramName": "source",
            "description": " the source url to the media file.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSource": {
      "location": {
        "start": {
          "line": 280,
          "column": 4
        },
        "end": {
          "line": 283,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the source url of the media file.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the source url to the media file.",
            "type": "String",
            "description": " the source url to the media file."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setSourceObject": {
      "location": {
        "start": {
          "line": 291,
          "column": 4
        },
        "end": {
          "line": 294,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the source object of the media file.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourceObject {MediaStream} the source media stream.",
            "paramName": "sourceObject",
            "description": " the source media stream.",
            "type": "MediaStream"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSourceObject": {
      "location": {
        "start": {
          "line": 302,
          "column": 4
        },
        "end": {
          "line": 305,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the source object of the media file.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{MediaStream|null} the source stream object to the media file, if it exists.",
            "type": "MediaStream|null",
            "description": " the source stream object to the media file, if it exists."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasControls": {
      "location": {
        "start": {
          "line": 313,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the media element shows its controls.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "showControls": {
      "location": {
        "start": {
          "line": 322,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shows the controls of the media element.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hideControls": {
      "location": {
        "start": {
          "line": 331,
          "column": 4
        },
        "end": {
          "line": 334,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hides the controls of the media element.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setAutoplay": {
      "location": {
        "start": {
          "line": 342,
          "column": 4
        },
        "end": {
          "line": 345,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Plays the media directly when it is loaded / the page is loaded.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "autoplay {Boolean} To autoplay or not",
            "paramName": "autoplay",
            "description": " To autoplay or not",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAutoplay": {
      "location": {
        "start": {
          "line": 353,
          "column": 4
        },
        "end": {
          "line": 356,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the media is played directly when it is loaded / the page is loaded.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} if autoplay is on or not",
            "type": "Boolean",
            "description": " if autoplay is on or not"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setPreload": {
      "location": {
        "start": {
          "line": 372,
          "column": 4
        },
        "end": {
          "line": 380,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hints how much buffering the media resource will likely need.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "preload {String} One of the following values:\n  \"none\": Hints to the user agent that either the author does not expect\n  the user to need the media resource, or that the server wants to minimize\n  unnecessary traffic.\n  \"metadata\": Hints to the user agent that the author does not expect the\n  user to need the media resource, but that fetching the resource metadata\n  (dimensions, first frame, track list, duration, etc) is reasonable.\n  \"auto\": Hints to the user agent that the user agent can put the user's needs\n  first without risk to the server, up to and including optimistically\n  downloading the entire resource.",
            "paramName": "preload",
            "description": " One of the following values:\n  \"none\": Hints to the user agent that either the author does not expect\n  the user to need the media resource, or that the server wants to minimize\n  unnecessary traffic.\n  \"metadata\": Hints to the user agent that the author does not expect the\n  user to need the media resource, but that fetching the resource metadata\n  (dimensions, first frame, track list, duration, etc) is reasonable.\n  \"auto\": Hints to the user agent that the user agent can put the user's needs\n  first without risk to the server, up to and including optimistically\n  downloading the entire resource.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPreload": {
      "location": {
        "start": {
          "line": 388,
          "column": 4
        },
        "end": {
          "line": 391,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns how much buffering the media resource will likely need.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} hint how much buffering the media resource needs",
            "type": "String",
            "description": " hint how much buffering the media resource needs"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setLoop": {
      "location": {
        "start": {
          "line": 399,
          "column": 4
        },
        "end": {
          "line": 411,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Indicates that the media element is to seek back to the start of the media resource upon reaching the end.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} To loop or not.",
            "paramName": "value",
            "description": " To loop or not.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isLoop": {
      "location": {
        "start": {
          "line": 419,
          "column": 4
        },
        "end": {
          "line": 422,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the media element is to seek back to the start of the media resource upon reaching the end.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} if loop is on or not",
            "type": "Boolean",
            "description": " if loop is on or not"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_handlePlayEvent": {
      "location": {
        "start": {
          "line": 428,
          "column": 4
        },
        "end": {
          "line": 431,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Play event handler.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handlePauseEvent": {
      "location": {
        "start": {
          "line": 437,
          "column": 4
        },
        "end": {
          "line": 440,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pause event handler.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleTimeUpdateEvent": {
      "location": {
        "start": {
          "line": 446,
          "column": 4
        },
        "end": {
          "line": 449,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Time Update event handler.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleEndedEvent": {
      "location": {
        "start": {
          "line": 455,
          "column": 4
        },
        "end": {
          "line": 458,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Ended event handler.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleVolumeChangeEvent": {
      "location": {
        "start": {
          "line": 464,
          "column": 4
        },
        "end": {
          "line": 467,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Volume Change event handler.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleLoadedDataEvent": {
      "location": {
        "start": {
          "line": 472,
          "column": 4
        },
        "end": {
          "line": 475,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loaded Data event handler.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_handleLoadedMetaDataEvent": {
      "location": {
        "start": {
          "line": 480,
          "column": 4
        },
        "end": {
          "line": 483,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loaded Metadata event handler.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 487,
        "column": 12
      },
      "end": {
        "line": 506,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "qx.bom.media.Audio",
    "qx.bom.media.Video"
  ]
}