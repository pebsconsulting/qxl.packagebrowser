{
  "className": "qx.bom.Blocker",
  "packageName": "qx.bom",
  "name": "Blocker",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 49,
        "column": 0
      },
      "end": {
        "line": 371,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class provides an unified blocker which offers three different modes.\n<em>Blocker modes</em></p>\n<ul>\n<li>block the whole document</li>\n<li>block the content of an element</li>\n<li>act as an underlying blocker for an element to shim native controls\nThe third mode is mainly necessary for IE browsers.\nThe first mode is the easiest to use. Just use the {@link #block} method\nwithout a parameter.\nThe second and third mode are taking a DOM element as parameter for the\n{@link #block} method. Additionally one need to setup the \"zIndex\" value\ncorrectly to get the right results (see at {@link #setBlockerZIndex} method).\nThe zIndex value defaults to the value \"10000\". Either you set an appropriate\nvalue for the blocker zIndex or for your DOM element to block. If you want\nto block the content of your DOM element it has to have at least the zIndex\nvalue of \"10001\" with default blocker values.\nNOTE: Instances of this class must be disposed of after use</li>\n</ul>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.bom.Element"
        },
        {
          "name": "@require",
          "body": "qx.bom.Iframe"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 53,
        "column": 14
      },
      "end": {
        "line": 58,
        "column": 3
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__iframeElement": {
      "location": {
        "start": {
          "line": 63,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__blockerElement": {
      "location": {
        "start": {
          "line": 64,
          "column": 4
        },
        "end": {
          "line": 64,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__blockedElement": {
      "location": {
        "start": {
          "line": 65,
          "column": 4
        },
        "end": {
          "line": 65,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__isActive": {
      "location": {
        "start": {
          "line": 66,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultZIndex": {
      "location": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 67,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultBlockerOpacity": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 30
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__defaultBlockerColor": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 40
        }
      },
      "type": "variable",
      "access": "private"
    },
    "block": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Blocks the whole document (if no parameter is given) or acts as an\n underlying blocker for native controls.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {element?null} If no element is given the whole document is blocked.",
            "paramName": "element",
            "description": " If no element is given the whole document is blocked.",
            "optional": true,
            "defaultValue": "null",
            "type": "element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unblock": {
      "location": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Releases the blocking</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isBlocked": {
      "location": {
        "start": {
          "line": 117,
          "column": 4
        },
        "end": {
          "line": 119,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the blocker is already active.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Blocker active",
            "type": "Boolean",
            "description": " Blocker active"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBlockerElement": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the blocker element. Useful if the element should be animated.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} DOM element",
            "type": "qx.bom.Element",
            "description": " DOM element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setBlockerColor": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the color of the blocker element. Be sure to set also a suitable\n opacity value to get the desired result.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "color {String} CSS color value",
            "paramName": "color",
            "description": " CSS color value",
            "type": "qx.bom.String"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setBlockerOpacity"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBlockerColor": {
      "location": {
        "start": {
          "line": 149,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current blocker color.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} CSS color value",
            "type": "qx.bom.String",
            "description": " CSS color value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setBlockerOpacity": {
      "location": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 163,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the blocker opacity. Be sure to set also a suitable blocker color\n value to get the desired result.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "opacity {String} CSS opacity value",
            "paramName": "opacity",
            "description": " CSS opacity value",
            "type": "qx.bom.String"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setBlockerColor"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBlockerOpacity": {
      "location": {
        "start": {
          "line": 171,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the blocker opacity value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} CSS opacity value",
            "type": "Integer",
            "description": " CSS opacity value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setBlockerZIndex": {
      "location": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 184,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the zIndex of the blocker element. For most use cases you do not need\n to manipulate this value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "zIndex {Integer} CSS zIndex value",
            "paramName": "zIndex",
            "description": " CSS zIndex value",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBlockerZIndex": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the blocker zIndex value</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} CSS zIndex value",
            "type": "Integer",
            "description": " CSS zIndex value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__init": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 215,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Setups the elements and registers a \"resize\" event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__setupBlockerElement": {
      "location": {
        "start": {
          "line": 221,
          "column": 4
        },
        "end": {
          "line": 231,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create blocker element and set initial styles.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__setupIframeElement": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 251,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create iframe blocker element and set initial styles.\n Needed to block native form elements</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__calculateStyles": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 282,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the necessary styles for the blocker element.\n Either the values of the document or of the element to block are used.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Object with necessary style infos",
            "type": "Map",
            "description": " Object with necessary style infos"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__styleAndInsertBlocker": {
      "location": {
        "start": {
          "line": 290,
          "column": 4
        },
        "end": {
          "line": 304,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given styles and inserts the blocker.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Object} styles to apply",
            "paramName": "styles",
            "description": " styles to apply",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__removeBlocker": {
      "location": {
        "start": {
          "line": 310,
          "column": 4
        },
        "end": {
          "line": 317,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the blocker elements.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onResize": {
      "location": {
        "start": {
          "line": 326,
          "column": 4
        },
        "end": {
          "line": 342,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reacts on window resize and adapts the new size for the blocker element\n if the whole document is blocked.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} event instance",
            "paramName": "e",
            "description": " event instance",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__resizeBlocker": {
      "location": {
        "start": {
          "line": 350,
          "column": 4
        },
        "end": {
          "line": 357,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the resizing for blocker element and blocker iframe element (IE)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dimension {Object} Map with width and height as keys",
            "paramName": "dimension",
            "description": " Map with width and height as keys",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__isWholeDocumentBlockTarget": {
      "location": {
        "start": {
          "line": 365,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks whether the whole document is be blocked.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} block mode",
            "type": "Boolean",
            "description": " block mode"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}