{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_qxl_tutorial_v1_0_2/qx_packages/qooxdoo_qxl_playground_v1_0_1/source/class/qxl/playground/Samples.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "array",
    "data",
    "Array",
    "setModel",
    "i",
    "length",
    "item",
    "getItem",
    "getCategory",
    "remove",
    "textAreas",
    "document",
    "getElementsByTagName",
    "className",
    "name",
    "title",
    "split",
    "mode",
    "code",
    "value",
    "category",
    "unshift",
    "marshal",
    "Json",
    "createModel",
    "properties",
    "model",
    "members",
    "get",
    "nameandmode",
    "getModel",
    "sample",
    "getName",
    "getMode",
    "getFirstSample",
    "isAvailable",
    "qxl",
    "playground",
    "Samples"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * Samples data container. This class is responsible for getting the samples\n * stored in textareas in the index.mhtml file into the JavaScript world.\n */\nqx.Class.define(\"qxl.playground.Samples\",\n{\n  extend : qx.core.Object,\n\n  /**\n   * @param array {qx.data.Array?} The array to which the objects should be\n   *   added.\n   */\n  construct : function(array) {\n    this.base(arguments);\n\n    // initialize the model\n    if (!array) {\n      array = new qx.data.Array();\n    }\n    this.setModel(array);\n    \n    // remove all stored static samples\n    for (let i = array.length - 1; i >= 0; i--) {\n      var item = array.getItem(i);\n      if (item.getCategory() == \"static\") {\n        array.remove(item);\n      }\n    }\n\n    var textAreas = document.getElementsByTagName(\"TEXTAREA\");\n\n    for (let i = textAreas.length -1; i >= 0; i--) {\n      if (textAreas[i].className == \"qx_samples\") {\n        var name = textAreas[i].title.split(\"-\")[0];\n        var mode = textAreas[i].title.split(\"-\")[1];\n        var code = textAreas[i].value;\n        var data = {\n          name: name,\n          code: code,\n          mode: mode,\n          category: \"static\"\n        };\n        array.unshift(qx.data.marshal.Json.createModel(data, true));\n      }\n    }\n  },\n\n\n  properties : {\n    /** Model property to hald the data array. */\n    model : {}\n  },\n\n\n  members :\n  {\n    /**\n     * Returns the sample stored with the given name.\n     * @param nameandmode {String} the name and mode of the sample code.\n     * @return {String|null} Returns the sample code, if available.\n     */\n    get : function(nameandmode) {\n      // split the name and mode into separate parts\n      var name = nameandmode.split(\"-\")[0];\n      var mode = nameandmode.split(\"-\")[1];\n      // get the data\n      var model = this.getModel();\n      for (var i = 0; i < model.length; i++) {\n        var sample = model.getItem(i);\n        // check if name AND mode are fitting\n        if (sample.getName() == name && sample.getMode() == mode) {\n          return sample;\n        }\n      }\n      return null;\n    },\n\n\n    /**\n     * Get the first available sample for the given mode.\n     * @param mode {String} The mode to look for.\n     * @return {Object|null} A sample object.\n     */\n    getFirstSample : function(mode) {\n      var model = this.getModel();\n      for (var i = 0; i < model.length; i++) {\n        var sample = model.getItem(i);\n        if (sample.getMode() == mode) {\n          return sample;\n        }\n      }\n      return null;\n    },\n\n\n    /**\n     * Check if a sample with the given name and mode is available.\n     * @param nameandmode {String} The name and mode of the sample.\n     * @return {Boolean} true, if the sample is available.\n     */\n    isAvailable : function(nameandmode) {\n      var name = nameandmode.split(\"-\")[0];\n      var mode = nameandmode.split(\"-\")[1];\n      var model = this.getModel();\n      for (var i = 0; i < model.length; i++) {\n        var sample = model.getItem(i);\n        if (sample.getName() == name && sample.getMode() == mode) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n});\n"
  ]
}