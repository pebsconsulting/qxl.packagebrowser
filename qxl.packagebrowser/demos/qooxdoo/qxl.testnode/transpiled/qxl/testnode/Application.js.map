{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_qxl_testnode_v1_0_11/source/class/qxl/testnode/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "minimist",
    "require",
    "Class",
    "define",
    "extend",
    "application",
    "Basic",
    "members",
    "main",
    "argv",
    "process",
    "slice",
    "runTest",
    "exit",
    "_fail",
    "_cnt",
    "_failed",
    "namespace",
    "loader",
    "dev",
    "unit",
    "TestLoaderBasic",
    "setTestNamespace",
    "clazzes",
    "getSuite",
    "getTestClasses",
    "class",
    "matcher",
    "RegExp",
    "console",
    "log",
    "filter",
    "clazz",
    "getName",
    "match",
    "pChain",
    "Promise",
    "resolve",
    "forEach",
    "then",
    "runAll",
    "that",
    "methods",
    "getTestMethods",
    "method",
    "testResult",
    "TestResult",
    "methodNameIndex",
    "next",
    "length",
    "runTests",
    "showExceptions",
    "arr",
    "item",
    "test",
    "getFullName",
    "message",
    "String",
    "exception",
    "error",
    "setTimeout",
    "addListener",
    "evt",
    "getData",
    "qxl",
    "testnode",
    "Application"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   Copyright: Henner Kollmann 2020\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n   * Henner Kollmann (hkollmann) Henner.Kollmann@gmx.de\n\n************************************************************************ */\nconst minimist = require(\"minimist\");      \n\n/**\n * This is the main application class of your custom application \"qxl.testnode\".\n *\n * If you have added resources to your app, remove the first '@' in the\n * following line to make use of them.\n * @asset(qxl/testnode/*)\n *\n */\nqx.Class.define(\"qxl.testnode.Application\",\n  {\n    extend: qx.application.Basic,\n    members:\n    {\n      main: async function () {\n        let argv = minimist(process.argv.slice(2));        \n        await this.runTest(argv);\n        process.exit(this._fail);\n      },\n\n      runTest: async function (argv) {\n        this._cnt = 0;\n        this._fail = 0;\n        this._failed = {};\n\n        let namespace = qx.core.Environment.get(\"testnode.testNameSpace\") || \"qx.test\";\n        this.loader = new qx.dev.unit.TestLoaderBasic();\n        this.loader.setTestNamespace(namespace);\n        let clazzes = this.loader.getSuite().getTestClasses();\n        if (argv.class) {\n          let matcher = new RegExp(argv.class);\n          console.log(\"# running only test classes that match \" + matcher);\n          clazzes = clazzes.filter(clazz => clazz.getName().match(matcher));\n        }\n\n        let pChain = new qx.Promise(resolve => resolve(true));\n        clazzes.forEach(\n          clazz => {\n            pChain = pChain.then(() =>\n              this.runAll(argv, clazz)\n                .then(() => {\n                  console.log(`# done testing ${clazz.getName()}.`);\n                })\n            );\n          }\n        );\n\n        return pChain.then(() => {\n          console.log(`1..${this._cnt}`);\n        });\n      },\n\n      runAll: function (argv, clazz) {\n        let that = this;\n        console.log(`# start testing ${clazz.getName()}.`);\n        let methods = clazz.getTestMethods();\n        if (argv.method) {\n          let matcher = new RegExp(argv.method);\n          console.log(\"# running only test methods that match \" + matcher);\n          methods = methods.filter(method => method.getName().match(matcher));\n        }\n\n        return new qx.Promise(resolve => {\n          let testResult = new qx.dev.unit.TestResult();\n          let methodNameIndex = -1;\n          let next = () => {\n            methodNameIndex++;\n            if (methodNameIndex < methods.length) {\n              that.loader.runTests(\n                testResult,\n                clazz.getName(),\n                methods[methodNameIndex].getName()\n              );\n            } else {\n              resolve();\n            }\n          };\n          let showExceptions = arr => {\n            arr.forEach(item => {\n              if (item.test.getFullName) {\n                let test = item.test.getFullName();\n                that._failed[test] = true;\n                that._cnt++;\n                that._fail++;\n                let message = String(item.exception);\n                if (item.exception) {\n                  if (item.exception.message) {\n                    message = item.exception.message;\n                    console.log(`not ok ${that._cnt} - ${test} - ${message}`);\n                  } else {\n                    this.error(\"# \" + item.exception);\n                  }\n                }\n              } else {\n                this.error(\"Unexpected Error - \", item);\n              }\n            });\n            setTimeout(next, 0);\n          };\n          testResult.addListener(\"startTest\", evt => {\n            console.log(\"# start \" + evt.getData().getFullName());\n          });\n          testResult.addListener(\"wait\", evt => {\n            console.log(\"# wait \" + evt.getData().getFullName());\n          });\n          testResult.addListener(\"endMeasurement\", evt => {\n            console.log(\"# endMeasurement \" + evt.getData()[0].test.getFullName());\n          });\n          testResult.addListener(\"endTest\", evt => {\n            let test = evt.getData().getFullName();\n            if (!that._failed[test]) {\n              that._cnt++;\n              console.log(`ok ${that._cnt} - ` + test);\n            }\n            setTimeout(next, 0);\n          });\n          testResult.addListener(\"failure\", evt => showExceptions(evt.getData()));\n          testResult.addListener(\"error\", evt => showExceptions(evt.getData()));\n          testResult.addListener(\"skip\", evt => {\n            that._cnt++;\n            let test = evt.getData()[0].test.getFullName();\n            that._failed[test] = true;\n            console.log(`ok ${that._cnt} - # SKIP ${test}`);\n          });\n          next();\n        });\n      },\n      _cnt: null,\n      _fail: null,\n      _failed: null\n    }\n  });\n"
  ]
}