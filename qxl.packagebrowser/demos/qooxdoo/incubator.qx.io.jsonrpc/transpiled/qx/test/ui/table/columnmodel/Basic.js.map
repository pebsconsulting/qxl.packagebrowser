{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/node_modules/@qooxdoo/framework/source/class/qx/test/ui/table/columnmodel/Basic.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "LayoutTestCase",
    "members",
    "createModel",
    "tableModel",
    "table",
    "model",
    "Simple",
    "setColumns",
    "setData",
    "createRandomRows",
    "rowCount",
    "rowData",
    "nextId",
    "strings",
    "row",
    "date",
    "Date",
    "number",
    "NaN",
    "push",
    "testSetColumnWidth",
    "Table",
    "tcm",
    "getTableColumnModel",
    "destroy",
    "dispose",
    "testGetColumnWidth",
    "testSetHeaderCellRenderer",
    "testGetHeaderCellRenderer",
    "testSetDataCellRenderer",
    "testGetDataCellRenderer",
    "testSetCellEditorFactory",
    "testGetCellEditorFactory",
    "columnmodel",
    "Basic"
  ],
  "mappings": ";;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,oCAAhB,EACA;AACEC,IAAAA,MAAM,EAAGN,EAAE,CAACO,IAAH,CAAQC,EAAR,CAAWC,cADtB;AAGEC,IAAAA,OAAO,EACP;AAEEC,MAAAA,WAAW,EAAG,uBACd;AACE,YAAIC,UAAU,GAAG,IAAIZ,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYC,KAAZ,CAAkBC,MAAtB,EAAjB;AACAH,QAAAA,UAAU,CAACI,UAAX,CAAsB,CAAE,IAAF,EAAQ,UAAR,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,SAAxC,CAAtB;AACAJ,QAAAA,UAAU,CAACK,OAAX,CAAmB,KAAKC,gBAAL,CAAsB,CAAtB,CAAnB;AAEA,eAAON,UAAP;AACD,OATH;AAWEM,MAAAA,gBAAgB,EAAG,0BAASC,QAAT,EACnB;AACE,YAAIC,OAAO,GAAG,EAAd;AACA,YAAIC,MAAM,GAAG,CAAb;AACA,YAAIC,OAAO,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAd;;AACA,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,QAAxB,EAAkCI,GAAG,EAArC,EAAyC;AACvC,cAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,GAAG,GAAGA,GAAN,GAAYA,GAArB,CAAX;AACA,cAAIG,MAAM,GAAGH,GAAG,GAAG,CAAN,IAAW,CAAX,GAAeA,GAAG,GAAG,CAArB,GAAyBI,GAAtC;AACAP,UAAAA,OAAO,CAACQ,IAAR,CAAa,CAAEP,MAAM,EAAR,EAAYK,MAAZ,EAAoBJ,OAAO,CAACC,GAAG,GAAG,CAAP,CAA3B,EAAsCC,IAAtC,EAA6CD,GAAG,GAAG,CAAN,IAAW,CAAxD,CAAb;AACD;;AACD,eAAOH,OAAP;AACD,OAtBH;AAwBES,MAAAA,kBAAkB,EAAG,8BACrB;AACC,YAAIf,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AASCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD,OAvCH;AA0CEC,MAAAA,kBAAkB,EAAG,8BACrB;AACC,YAAIrB,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AAWCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD,OA3DH;AA+DEE,MAAAA,yBAAyB,EAAG,qCAC5B;AACC,YAAItB,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AAUCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD,OA/EH;AAiFEG,MAAAA,yBAAyB,EAAG,qCAC5B;AACC,YAAIvB,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AAUCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD,OAjGH;AAoGEI,MAAAA,uBAAuB,EAAG,mCAC1B;AACC,YAAIxB,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AAUCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD,OApHH;AAuHEK,MAAAA,uBAAuB,EAAG,mCAC1B;AACC,YAAIzB,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AAUCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD,OAvIH;AA0IEM,MAAAA,wBAAwB,EAAG,oCAC3B;AACC,YAAI1B,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AAUCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD,OA1JH;AA6JEO,MAAAA,wBAAwB,EAAG,oCAC3B;AACC,YAAI3B,KAAK,GAAG,KAAKH,WAAL,EAAZ;AACA,YAAIE,KAAK,GAAG,IAAIb,EAAE,CAACQ,EAAH,CAAMK,KAAN,CAAYiB,KAAhB,CAAsBhB,KAAtB,CAAZ;AACA,YAAIiB,GAAG,GAAGlB,KAAK,CAACmB,mBAAN,EAAV;AAUCnB,QAAAA,KAAK,CAACoB,OAAN;AACAnB,QAAAA,KAAK,CAACoB,OAAN;AACD;AA7KH;AAJF,GADA;AAjBAlC,EAAAA,EAAE,CAACO,IAAH,CAAQC,EAAR,CAAWK,KAAX,CAAiB6B,WAAjB,CAA6BC,KAA7B,CAAmCxC,aAAnC,GAAmDA,aAAnD",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\nqx.Class.define(\"qx.test.ui.table.columnmodel.Basic\",\n{\n  extend : qx.test.ui.LayoutTestCase,\n\n  members :\n  {\n\n    createModel : function()\n    {\n      var tableModel = new qx.ui.table.model.Simple();\n      tableModel.setColumns([ \"ID\", \"A number\", \"String\", \"A date\", \"Boolean\" ]);\n      tableModel.setData(this.createRandomRows(5));\n\n      return tableModel;\n    },\n\n    createRandomRows : function(rowCount)\n    {\n      var rowData = [];\n      var nextId = 0;\n      var strings = [\"a\", \"b\", \"c\", \"d\"];\n      for (var row = 0; row < rowCount; row++) {\n        var date = new Date(row * row * row);\n        var number = row % 2 == 0 ? row / 2 : NaN;\n        rowData.push([ nextId++, number, strings[row % 4], date, (row % 2 == 1) ]);\n      }\n      return rowData;\n    },\n\n    testSetColumnWidth : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function(){\n         tcm.setColumnWidth(6, 10);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n      table.destroy();\n      model.dispose();\n    },\n\n\n    testGetColumnWidth : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function()\n       {\n         tcm.getColumnWidth(6, 10);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n\n      table.destroy();\n      model.dispose();\n    },\n\n\n\n    testSetHeaderCellRenderer : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function()\n       {\n         tcm.setHeaderCellRenderer(6, new qx.ui.table.headerrenderer.Default);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testGetHeaderCellRenderer : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function()\n       {\n         tcm.getHeaderCellRenderer(6);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n      table.destroy();\n      model.dispose();\n    },\n\n\n    testSetDataCellRenderer : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function()\n       {\n         tcm.setDataCellRenderer(6, qx.ui.table.cellrenderer.Default);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n      table.destroy();\n      model.dispose();\n    },\n\n\n    testGetDataCellRenderer : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function()\n       {\n         tcm.getDataCellRenderer(6);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n      table.destroy();\n      model.dispose();\n    },\n\n\n    testSetCellEditorFactory : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function()\n       {\n         tcm.setCellEditorFactory(6, qx.ui.table.celleditor.SelectBox);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n      table.destroy();\n      model.dispose();\n    },\n\n\n    testGetCellEditorFactory : function()\n    {\n     var model = this.createModel();\n     var table = new qx.ui.table.Table(model);\n     var tcm = table.getTableColumnModel();\n\n     if (qx.core.Environment.get(\"qx.debug\"))\n     {\n       this.assertException(function()\n       {\n         tcm.getCellEditorFactory(6);\n       }, qx.core.AssertionError, \"Column not found in table model\", \"Invalid column width.\");\n     }\n\n      table.destroy();\n      model.dispose();\n    }\n\n\n\n\n\n\n  }\n});\n"
  ]
}