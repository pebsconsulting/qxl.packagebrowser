{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.packagebrowser/qxl.packagebrowser/packages/qx_packages/qooxdoo_incubator_qx_util_v0_0_4/source/class/qx/dev/TestRunner.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "runAll",
    "clazz",
    "methodNames",
    "showExceptions",
    "arr",
    "forEach",
    "item",
    "log",
    "Logger",
    "error",
    "test",
    "getClassName",
    "getName",
    "exception",
    "keys",
    "prototype",
    "name",
    "length",
    "startsWith",
    "substring",
    "toUpperCase",
    "push",
    "Promise",
    "resolve",
    "pos",
    "classname",
    "lastIndexOf",
    "pkgname",
    "loader",
    "dev",
    "unit",
    "TestLoaderBasic",
    "getSuite",
    "add",
    "testResult",
    "TestResult",
    "addListener",
    "evt",
    "info",
    "getData",
    "getFullName",
    "setTimeout",
    "next",
    "methodNameIndex",
    "runTests",
    "runAllXX",
    "obj",
    "p",
    "methodName",
    "then",
    "reject",
    "fn",
    "setTestResult",
    "run",
    "console",
    "call",
    "ex",
    "AsyncWrapper",
    "stack",
    "TestRunner"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2019 Zenesis Ltd http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (https://github.com/johnspackman)\n\n************************************************************************ */\n\n/**\n * Helper class to simulate the TestRunner, but without loading all the classes\n */\nqx.Class.define(\"qx.dev.TestRunner\", {\n  extend: qx.core.Object,\n  statics: {\n    \n    /**\n     * Unit tests all methods in a class where the method name begins \"test\", unless the\n     * `methodNames` parameter is provided to list the method names explicitly.  Tests can be\n     * asynchronous, so this returns a promise\n     * \n     *  @param clazz {Class} the class to unit test\n     *  @param methodNames {String[]?} optional list of method names\n     *  @return {qx.Promise} promise for completion of all tests\n     */\n    runAll: function(clazz, methodNames) {\n      function showExceptions(arr) {\n        arr.forEach(item => {\n          qx.log.Logger.error(item.test.getClassName() + \".\" + item.test.getName() + \": \" + item.exception);\n        });\n      };\n\n      if (!methodNames) {\n        methodNames = [];\n        Object.keys(clazz.prototype).forEach(function(name) {\n          if (name.length < 5 || !name.startsWith(\"test\") || name.substring(4, 5) != name.substring(4, 5).toUpperCase())\n            return;\n          methodNames.push(name);\n        });\n      }\n      \n      return new qx.Promise((resolve) => {\n        var pos = clazz.classname.lastIndexOf('.');\n        var pkgname = clazz.classname.substring(0, pos);\n        var loader = new qx.dev.unit.TestLoaderBasic(pkgname);\n        loader.getSuite().add(clazz);\n        \n        var testResult = new qx.dev.unit.TestResult();\n        testResult.addListener(\"startTest\", evt => { \n          qx.log.Logger.info(\"Running test \" + evt.getData().getFullName()); \n        });\n        testResult.addListener(\"endTest\", evt => { \n          qx.log.Logger.info(\"End of \" + evt.getData().getFullName());\n          setTimeout(next, 1);\n        });\n        testResult.addListener(\"wait\", evt => qx.log.Logger.info(\"Waiting for \" + evt.getData().getFullName()));\n        testResult.addListener(\"failure\", evt => showExceptions(evt.getData()));\n        testResult.addListener(\"error\", evt => showExceptions(evt.getData()));\n        testResult.addListener(\"skip\", evt => showExceptions(evt.getData()));\n        \n        var methodNameIndex = -1;\n        function next() {\n          methodNameIndex++;\n          if (!methodNames) {\n            if (methodNameIndex === 0){\n              loader.runTests(testResult, clazz.classname, null);\n            } else {\n              resolve();\n            }\n          } else {\n            if (methodNameIndex < methodNames.length)\n              loader.runTests(testResult, clazz.classname, methodNames[methodNameIndex]);\n            else\n              resolve();\n          }\n        }\n\n        next();\n      });\n    },\n    \n    runAllXX: function(clazz, methodNames) {\n      if (typeof methodNames == \"string\")\n        methodNames = [methodNames];\n      if (!methodNames) {\n        methodNames = [];\n        Object.keys(clazz.prototype).forEach(function(name) {\n          if (name.length < 5 || !name.startsWith(\"test\") || name.substring(4, 5) != name.substring(4, 5).toUpperCase())\n            return;\n          methodNames.push(name);\n        });\n      }\n      var obj = new clazz();\n      var p = qx.Promise.resolve();\n      methodNames.forEach(methodName => {\n        p = p.then(() => {\n          return new qx.Promise((resolve, reject) => {\n              var fn = obj[methodName];\n              obj.setTestResult({\n                run: function() {\n                  console.log(\"Finished async \" + methodName);\n                  resolve();\n                }\n              });\n              try {\n                console.log(\"Starting \" + methodName); \n                fn.call(obj);\n                console.log(\"Finished \" + methodName);\n                resolve();\n              } catch(ex) {\n                if (!(ex instanceof qx.dev.unit.AsyncWrapper)) {\n                  console.log(\"Error in \" + methodName + \": \" + (ex.stack||ex));\n                  reject(ex);\n                }\n              }\n            });\n        });\n      });\n      return p.then(() => console.log(\"Finished all tests\"));\n    }\n      \n  }\n});"
  ]
}